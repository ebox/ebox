#!/usr/bin/perl

use strict;
use warnings;


use Getopt::Long;
use Cwd;
use HTML::Mason;
use File::Slurp;
use File::Copy;

use constant 
    {
       MODULE_VERSION => '0.1',
       STUBS_PATH => '@DATADIR@/emoddev/stubs',
    };

sub _printUsage
{
    print STDERR "Usage: $0 --module-name --main-class [Options]\n\n";
    print STDERR "Options:\n";
    print STDERR "\t--version\n"; 
    print STDERR "\t--destdir\n";
    print STDERR "\t--model form | table. Default: form\n";
    exit 1;
}

sub _parseOptions
{
    my %options = ( 
            moduleName => undef, 
            printableModuleName => undef,
            mainClass => undef ,
            version => MODULE_VERSION,
            destdir => undef,
            model => 'form',
            );
    my $help;
    my $info;
    my $optionsOk = GetOptions(
            'module-name=s' => \$options{moduleName},
            'main-class=s' => \$options{mainClass},
            'printable-module-name=s' => \$options{printableModuleName},
            'version=s' => \$options{version},
            'destdir=s' => \$options{destdir},
            'model=s' => \$options{model},
            'help'  => \$help,
            'info'  => \$info,
            );

    if (not $optionsOk or $info or $help) {
        _printUsage();
    }

    unless (defined($options{moduleName}) and defined($options{mainClass})) {
        _printUsage();
    }

    if ($options{destdir}) {
        unless (-d $options{destdir}) {
            die "$options{destidir} does not exist";
        }
    } else {
        $options{destdir} = getcwd;
    }

    unless ($options{printableModuleName}) {
        $options{printableModuleName} = $options{mainClass};
    }

    $options{destdir} .= '/' . $options{moduleName};

    if ( -d $options{destdir} ) {
        die "$options{destdir} already exists!!";
    }

    return \%options;
}

sub _configure
{
    my ($interp, $output, $options) = @_;

    my $comp = $interp->make_component(
            comp_file => STUBS_PATH .  '/configure.ac.mas');
    ${$output} = '';
    $interp->exec($comp,  
            (mainClass => $options->{mainClass},
             module => $options->{moduleName},
             version => $options->{version}));
   write_file($options->{destdir} . '/configure.ac', ${$output});
}

sub _makefile
{
    my ($interp, $output, $options) = @_;

    my $comp = $interp->make_component(
            comp_file => STUBS_PATH .  '/Makefile.am.mas');
    ${$output} = '';
    $interp->exec($comp);
    write_file($options->{destdir} . '/Makefile.am', ${$output});
}

sub _src
{
    my ($interp, $output, $options) = @_;

    my $dir = $options->{destdir} . '/src';
    mkdir ($dir) or die "Can't create $dir";

     copy (STUBS_PATH . '/src/Makefile.am', $dir);
}

sub _src_EBox
{
    my ($interp, $output, $options) = @_;

    my $dir = $options->{destdir} . '/src/EBox';
    my $mainClass = $options->{mainClass} . '.pm';
    mkdir ($dir) or die "Can't create $dir";

    my $comp = $interp->make_component(
            comp_file => STUBS_PATH .  '/src/Makefile.am.mas',
            );
    ${$output} = '';
    $interp->exec($comp, ( mainClass => $mainClass));
    write_file($dir . '/Makefile.am', ${$output});
    
    $comp = $interp->make_component(
            comp_file => STUBS_PATH .  '/src/MainClass.pm.mas',
            );
    ${$output} = '';
    $interp->exec($comp, 
            ( mainClass => $mainClass,
              class => 'EBox::' . $options->{mainClass},
              name => $options->{moduleName},
              printableName => $options->{printableModuleName},
              domain => 'ebox-' . $options->{moduleName},
              modelDomain => $options->{mainClass},
              ));
    write_file($dir . "/$mainClass", ${$output});
}

sub _src_EBox_Model
{
    my ($interp, $output, $options) = @_;

    my $dir = $options->{destdir}; 
    my $mainClass = $options->{mainClass}; 
    my $params = " --main-class $mainClass --name Settings" .
                 " --field field1:Text --field field2:Text" .
                 " --destdir $dir";
    system("ebox-moddev-model $params"); 
}

sub _src_EBox_Types
{
    my ($interp, $output, $options) = @_;

    my $dir = $options->{destdir}; 
    my $mainClass = $options->{mainClass}; 
    my $params = " --main-class $mainClass " .
                 " --destdir $dir";
    system("ebox-moddev-type$params"); 
}


sub _debian
{
    my ($interp, $output, $options) = @_;

    my $dir = $options->{destdir} . '/debian';
    my $module = $options->{moduleName};

    mkdir ("$dir") or die "Can't create $dir";
    mkdir ("$dir/cdbs") or die "Can't create $dir";
    copy ( STUBS_PATH . '/debian/cdbs/ebox.mk',
           "$dir/cdbs/ebox.mk");
    copy ( STUBS_PATH . '/debian/compat',
           "$dir/compat");
    copy ( STUBS_PATH . '/debian/prerm',
           "$dir/ebox-$module.prerm");
    copy ( STUBS_PATH . '/debian/rules',
           "$dir/rules");
    chmod(0755, "$dir/rules" );


    my $comp = $interp->make_component(
            comp_file => STUBS_PATH .  '/debian/changelog.mas',
            );
    ${$output} = '';
    $interp->exec($comp, ( module => $module, 
        version => $options->{version}));
    write_file($dir . '/changelog', ${$output});

    $comp = $interp->make_component(
            comp_file => STUBS_PATH .  '/debian/control.mas',
            );
    ${$output} = '';
    $interp->exec($comp, ( module => $module, ));
    write_file($dir . '/control', ${$output});

    $comp = $interp->make_component(
            comp_file => STUBS_PATH .  '/debian/postinst.mas',
            );
    ${$output} = '';
    $interp->exec($comp, ( module => $module));
    write_file($dir . "/ebox-$module.postinst", ${$output});

    $comp = $interp->make_component(
            comp_file => STUBS_PATH .  '/debian/postrm.mas',
            );
    ${$output} = '';
    $interp->exec($comp, ( module => $module));
    write_file($dir . "/ebox-$module.postrm", ${$output});
    
}

sub _migration
{
    my ($interp, $output, $options) = @_;

    my $dir = $options->{destdir} . '/migration';
    my $module = $options->{moduleName};

    mkdir ("$dir") or die "Can't create $dir";

    my $comp = $interp->make_component(
            comp_file => STUBS_PATH .  '/migration/Makefile.am.mas',
            );
    ${$output} = '';
    $interp->exec($comp, ( module => $module, migrationScripts => []));
    write_file($dir . '/Makefile.am', ${$output});

   
}

sub _schemas
{
    my ($interp, $output, $options) = @_;

    my $dir = $options->{destdir} . '/schemas';
    my $module = $options->{moduleName};
    my $schema = "ebox-$module.schemas";
    my $mainClass = 'EBox::' . $options->{mainClass};

    mkdir ("$dir") or die "Can't create $dir";

    my $comp = $interp->make_component(
            comp_file => STUBS_PATH .  '/schemas/Makefile.am.mas',
            );
    ${$output} = '';
    $interp->exec($comp, ( schema => $schema));
    write_file($dir . '/Makefile.am', ${$output});

    $comp = $interp->make_component(
            comp_file => STUBS_PATH .  '/schemas/gconf.schemas.mas',
            );
    ${$output} = '';
    $interp->exec($comp, ( module => $module, mainClass => $mainClass));
    write_file($dir . "/$schema", ${$output});

  
}

sub _stubs
{
    my ($interp, $output, $options) = @_;

    my $dir = $options->{destdir};
    my $module = $options->{moduleName};

    my $params = " --main-class $module --name service.conf" .
                 " --destdir $dir";
    system("ebox-moddev-stub $params"); 
}

sub _m4
{
    my ($interp, $output, $options) = @_;

    my $m4src = STUBS_PATH . '/m4';
    my $m4dst = $options->{destdir} . '/m4';

    `cp -a $m4src $m4dst`;
} 

sub _tools
{
    my ($interp, $output, $options) = @_;

    my $toolsSrc = STUBS_PATH . '/tools';
    my $toolsDst = $options->{destdir} . '/tools';

    `cp -a $toolsSrc $toolsDst`;
    chmod(0755, "$toolsDst/po-am.generator");
} 


sub _autogen
{
    my ($interp, $output, $options) = @_;

    my $dir = $options->{destdir};

    copy (STUBS_PATH . '/autogen.sh', "$dir/autogen.sh");
    chmod(0755, "$dir/autogen.sh");

}

sub _runAutogen
{
    my ($options) = @_;

    my $dir = $options->{destdir};

    my $cwd = getcwd();
    chdir($dir);

    system("./autogen.sh");

    chdir($cwd);
}

sub _createModule
{
    # Main
    my $options = _parseOptions();

    my $dir = $options->{destdir};
    
    mkdir $dir or die "Can't create dir $dir";
    
    my $output;
    my $interp = HTML::Mason::Interp->new(comp_root => STUBS_PATH, 
            out_method => \$output);

   _configure($interp, \$output, $options);
   _makefile($interp, \$output, $options);
   _src($interp, \$output, $options);
   _src_EBox($interp, \$output, $options);
   _src_EBox_Model($interp, \$output, $options);
   _src_EBox_Types($interp, \$output, $options);
   _debian($interp, \$output, $options);
   _migration($interp, \$output, $options);
   _schemas($interp, \$output, $options);
   _m4($interp, \$output, $options);
   _autogen($interp, \$output, $options);
   _tools($interp, \$output, $options);
   _stubs($interp, \$output, $options);
   _runAutogen($options);

}

_createModule();
