/* header auto-generated by pidl */

#include <stdint.h>

#include "libcli/util/ntstatus.h"

#include "librpc/gen_ndr/misc.h"
#include "librpc/gen_ndr/security.h"
#include "librpc/gen_ndr/winreg.h"
#ifndef _HEADER_spoolss
#define _HEADER_spoolss

#define PRINTER_STATUS_OK	( 0x00000000 )
#define JOB_STATUS_QUEUED	( 0x0000 )
#define PRINTER_ENUM_ICONMASK	( (PRINTER_ENUM_ICON1|PRINTER_ENUM_ICON2|PRINTER_ENUM_ICON3|PRINTER_ENUM_ICON4|PRINTER_ENUM_ICON5|PRINTER_ENUM_ICON6|PRINTER_ENUM_ICON7|PRINTER_ENUM_ICON8) )
#define SPL_ARCH_WIN40	( "WIN40" )
#define SPL_ARCH_W32X86	( "W32X86" )
#define SPL_ARCH_W32MIPS	( "W32MIPS" )
#define SPL_ARCH_W32ALPHA	( "W32ALPHA" )
#define SPL_ARCH_W32PPC	( "W32PPC" )
#define SPL_ARCH_IA64	( "IA64" )
#define SPL_ARCH_X64	( "x64" )
#define SPOOLSS_ARCHITECTURE_ALL	( "all" )
#define SPOOLSS_ARCHITECTURE_NT_X86	( "Windows NT x86" )
#define SPOOLSS_DEFAULT_SERVER_PATH	( "C:\\WINDOWS\\system32\\spool" )
#define SPL_LOCAL_PORT	( "Local Port" )
#define SPL_TCPIP_PORT	( "Standard TCP/IP Port" )
#define SPL_XCV_MONITOR_LOCALMON	( ",XcvMonitor Local Port" )
#define SPL_XCV_MONITOR_TCPMON	( ",XcvMonitor Standard TCP/IP Port" )
#define PRINTER_CHANGE_PRINTER	( 0x000000FF )
#define PRINTER_CHANGE_JOB	( 0x0000FF00 )
#define PRINTER_CHANGE_FORM	( (PRINTER_CHANGE_ADD_FORM|PRINTER_CHANGE_SET_FORM|PRINTER_CHANGE_DELETE_FORM) )
#define PRINTER_CHANGE_PORT	( (PRINTER_CHANGE_ADD_PORT|PRINTER_CHANGE_CONFIGURE_PORT|PRINTER_CHANGE_DELETE_PORT) )
#define PRINTER_CHANGE_PRINT_PROCESSOR	( 0x07000000 )
#define PRINTER_CHANGE_PRINTER_DRIVER	( (PRINTER_CHANGE_ADD_PRINTER_DRIVER|PRINTER_CHANGE_SET_PRINTER_DRIVER|PRINTER_CHANGE_DELETE_PRINTER_DRIVER) )
#define PRINTER_CHANGE_ALL	( (PRINTER_CHANGE_PRINTER|PRINTER_CHANGE_JOB|PRINTER_CHANGE_FORM|PRINTER_CHANGE_PORT|PRINTER_CHANGE_PRINT_PROCESSOR|PRINTER_CHANGE_PRINTER_DRIVER) )
#define SERVER_ALL_ACCESS	( SEC_STD_REQUIRED|SERVER_ACCESS_ADMINISTER|SERVER_ACCESS_ENUMERATE )
#define SERVER_READ	( SEC_STD_READ_CONTROL|SERVER_ACCESS_ENUMERATE )
#define SERVER_WRITE	( STANDARD_RIGHTS_WRITE_ACCESS|SERVER_ACCESS_ADMINISTER|SERVER_ACCESS_ENUMERATE )
#define SERVER_EXECUTE	( SEC_STD_READ_CONTROL|SERVER_ACCESS_ENUMERATE )
#define PRINTER_ALL_ACCESS	( SEC_STD_REQUIRED|PRINTER_ACCESS_ADMINISTER|PRINTER_ACCESS_USE )
#define PRINTER_READ	( SEC_STD_READ_CONTROL|PRINTER_ACCESS_USE )
#define PRINTER_WRITE	( STANDARD_RIGHTS_WRITE_ACCESS|PRINTER_ACCESS_USE )
#define PRINTER_EXECUTE	( SEC_STD_READ_CONTROL|PRINTER_ACCESS_USE )
#define JOB_ALL_ACCESS	( SEC_STD_REQUIRED|JOB_ACCESS_ADMINISTER )
#define JOB_READ	( SEC_STD_READ_CONTROL|JOB_ACCESS_ADMINISTER )
#define JOB_WRITE	( STANDARD_RIGHTS_WRITE_ACCESS|JOB_ACCESS_ADMINISTER )
#define JOB_EXECUTE	( SEC_STD_READ_CONTROL|JOB_ACCESS_ADMINISTER )
#define PRINTER_ACE_FULL_CONTROL	( SEC_GENERIC_ALL|PRINTER_ALL_ACCESS )
#define PRINTER_ACE_MANAGE_DOCUMENTS	( SEC_GENERIC_ALL|READ_CONTROL_ACCESS )
#define PRINTER_ACE_PRINT	( GENERIC_EXECUTE_ACCESS|READ_CONTROL_ACCESS|PRINTER_ACCESS_USE )
struct spoolss_Time {
	uint16_t year;
	uint16_t month;
	uint16_t day_of_week;
	uint16_t day;
	uint16_t hour;
	uint16_t minute;
	uint16_t second;
	uint16_t millisecond;
}/* [gensize] */;

struct spoolss_TimeCtr {
	uint32_t size;/* [value(ndr_size_spoolss_Time(time,ndr->iconv_convenience,ndr->flags))] */
	struct spoolss_Time *time;/* [unique] */
};

enum spoolss_ProcessorArchitecture
#ifndef USE_UINT_ENUMS
 {
	PROCESSOR_ARCHITECTURE_INTEL=0x0000,
	PROCESSOR_ARCHITECTURE_IA64=0x0006,
	PROCESSOR_ARCHITECTURE_AMD64=0x0009
}
#else
 { __donnot_use_enum_spoolss_ProcessorArchitecture=0x7FFFFFFF}
#define PROCESSOR_ARCHITECTURE_INTEL ( 0x0000 )
#define PROCESSOR_ARCHITECTURE_IA64 ( 0x0006 )
#define PROCESSOR_ARCHITECTURE_AMD64 ( 0x0009 )
#endif
;

enum spoolss_ProcessorType
#ifndef USE_UINT_ENUMS
 {
	PROCESSOR_INTEL_386=0x00000182,
	PROCESSOR_INTEL_486=0x000001E6,
	PROCESSOR_INTEL_PENTIUM=0x0000024A,
	PROCESSOR_INTEL_IA64=0x00000898,
	PROCESSOR_AMD_X8664=0x000022A0
}
#else
 { __donnot_use_enum_spoolss_ProcessorType=0x7FFFFFFF}
#define PROCESSOR_INTEL_386 ( 0x00000182 )
#define PROCESSOR_INTEL_486 ( 0x000001E6 )
#define PROCESSOR_INTEL_PENTIUM ( 0x0000024A )
#define PROCESSOR_INTEL_IA64 ( 0x00000898 )
#define PROCESSOR_AMD_X8664 ( 0x000022A0 )
#endif
;

enum spoolss_MajorVersion
#ifndef USE_UINT_ENUMS
 {
	SPOOLSS_MAJOR_VERSION_NT4_95_98_ME=0x00000004,
	SPOOLSS_MAJOR_VERSION_2000_2003_XP=0x00000005,
	SPOOLSS_MAJOR_VERSION_2008_VISTA=0x00000006
}
#else
 { __donnot_use_enum_spoolss_MajorVersion=0x7FFFFFFF}
#define SPOOLSS_MAJOR_VERSION_NT4_95_98_ME ( 0x00000004 )
#define SPOOLSS_MAJOR_VERSION_2000_2003_XP ( 0x00000005 )
#define SPOOLSS_MAJOR_VERSION_2008_VISTA ( 0x00000006 )
#endif
;

enum spoolss_MinorVersion
#ifndef USE_UINT_ENUMS
 {
	SPOOLSS_MINOR_VERSION_0=0x00000000,
	SPOOLSS_MINOR_VERSION_XP=0x00000001,
	SPOOLSS_MINOR_VERSION_2003_XP64=0x00000002,
	SPOOLSS_MINOR_VERSION_98=0x0000000a,
	SPOOLSS_MINOR_VERSION_ME=0x0000005a
}
#else
 { __donnot_use_enum_spoolss_MinorVersion=0x7FFFFFFF}
#define SPOOLSS_MINOR_VERSION_0 ( 0x00000000 )
#define SPOOLSS_MINOR_VERSION_XP ( 0x00000001 )
#define SPOOLSS_MINOR_VERSION_2003_XP64 ( 0x00000002 )
#define SPOOLSS_MINOR_VERSION_98 ( 0x0000000a )
#define SPOOLSS_MINOR_VERSION_ME ( 0x0000005a )
#endif
;

/* bitmap spoolss_PrinterStatus */
#define PRINTER_STATUS_PAUSED ( 0x00000001 )
#define PRINTER_STATUS_ERROR ( 0x00000002 )
#define PRINTER_STATUS_PENDING_DELETION ( 0x00000004 )
#define PRINTER_STATUS_PAPER_JAM ( 0x00000008 )
#define PRINTER_STATUS_PAPER_OUT ( 0x00000010 )
#define PRINTER_STATUS_MANUAL_FEED ( 0x00000020 )
#define PRINTER_STATUS_PAPER_PROBLEM ( 0x00000040 )
#define PRINTER_STATUS_OFFLINE ( 0x00000080 )
#define PRINTER_STATUS_IO_ACTIVE ( 0x00000100 )
#define PRINTER_STATUS_BUSY ( 0x00000200 )
#define PRINTER_STATUS_PRINTING ( 0x00000400 )
#define PRINTER_STATUS_OUTPUT_BIN_FULL ( 0x00000800 )
#define PRINTER_STATUS_NOT_AVAILABLE ( 0x00001000 )
#define PRINTER_STATUS_WAITING ( 0x00002000 )
#define PRINTER_STATUS_PROCESSING ( 0x00004000 )
#define PRINTER_STATUS_INITIALIZING ( 0x00008000 )
#define PRINTER_STATUS_WARMING_UP ( 0x00010000 )
#define PRINTER_STATUS_TONER_LOW ( 0x00020000 )
#define PRINTER_STATUS_NO_TONER ( 0x00040000 )
#define PRINTER_STATUS_PAGE_PUNT ( 0x00080000 )
#define PRINTER_STATUS_USER_INTERVENTION ( 0x00100000 )
#define PRINTER_STATUS_OUT_OF_MEMORY ( 0x00200000 )
#define PRINTER_STATUS_DOOR_OPEN ( 0x00400000 )
#define PRINTER_STATUS_SERVER_UNKNOWN ( 0x00800000 )
#define PRINTER_STATUS_POWER_SAVE ( 0x01000000 )

/* bitmap spoolss_JobStatus */
#define JOB_STATUS_PAUSED ( 0x00000001 )
#define JOB_STATUS_ERROR ( 0x00000002 )
#define JOB_STATUS_DELETING ( 0x00000004 )
#define JOB_STATUS_SPOOLING ( 0x00000008 )
#define JOB_STATUS_PRINTING ( 0x00000010 )
#define JOB_STATUS_OFFLINE ( 0x00000020 )
#define JOB_STATUS_PAPEROUT ( 0x00000040 )
#define JOB_STATUS_PRINTED ( 0x00000080 )
#define JOB_STATUS_DELETED ( 0x00000100 )
#define JOB_STATUS_BLOCKED_DEVQ ( 0x00000200 )
#define JOB_STATUS_USER_INTERVENTION ( 0x00000400 )
#define JOB_STATUS_RESTART ( 0x00000800 )
#define JOB_STATUS_COMPLETE ( 0x00001000 )

struct spoolss_PrinterInfo0 {
	const char * printername;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM)] */
	const char * servername;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM)] */
	uint32_t cjobs;
	uint32_t total_jobs;
	uint32_t total_bytes;
	struct spoolss_Time time;
	uint32_t global_counter;
	uint32_t total_pages;
	uint32_t version;
	uint32_t free_build;
	uint32_t spooling;
	uint32_t max_spooling;
	uint32_t session_counter;
	uint32_t num_error_out_of_paper;
	uint32_t num_error_not_ready;
	uint32_t job_error;
	uint32_t number_of_processors;
	enum spoolss_ProcessorType processor_type;
	uint32_t high_part_total_bytes;
	uint32_t change_id;
	WERROR last_error;
	uint32_t status;
	uint32_t enumerate_network_printers;
	uint32_t c_setprinter;
	enum spoolss_ProcessorArchitecture processor_architecture;
	uint16_t processor_level;
	uint32_t ref_ic;
	uint32_t reserved2;
	uint32_t reserved3;
}/* [gensize,public] */;

/* bitmap spoolss_DeviceModeFields */
#define DEVMODE_ORIENTATION ( 0x00000001 )
#define DEVMODE_PAPERSIZE ( 0x00000002 )
#define DEVMODE_PAPERLENGTH ( 0x00000004 )
#define DEVMODE_PAPERWIDTH ( 0x00000008 )
#define DEVMODE_SCALE ( 0x00000010 )
#define DEVMODE_POSITION ( 0x00000020 )
#define DEVMODE_NUP ( 0x00000040 )
#define DEVMODE_COPIES ( 0x00000100 )
#define DEVMODE_DEFAULTSOURCE ( 0x00000200 )
#define DEVMODE_PRINTQUALITY ( 0x00000400 )
#define DEVMODE_COLOR ( 0x00000800 )
#define DEVMODE_DUPLEX ( 0x00001000 )
#define DEVMODE_YRESOLUTION ( 0x00002000 )
#define DEVMODE_TTOPTION ( 0x00004000 )
#define DEVMODE_COLLATE ( 0x00008000 )
#define DEVMODE_FORMNAME ( 0x00010000 )
#define DEVMODE_LOGPIXELS ( 0x00020000 )
#define DEVMODE_BITSPERPEL ( 0x00040000 )
#define DEVMODE_PELSWIDTH ( 0x00080000 )
#define DEVMODE_PELSHEIGHT ( 0x00100000 )
#define DEVMODE_DISPLAYFLAGS ( 0x00200000 )
#define DEVMODE_DISPLAYFREQUENCY ( 0x00400000 )
#define DEVMODE_ICMMETHOD ( 0x00800000 )
#define DEVMODE_ICMINTENT ( 0x01000000 )
#define DEVMODE_MEDIATYPE ( 0x02000000 )
#define DEVMODE_DITHERTYPE ( 0x04000000 )
#define DEVMODE_PANNINGWIDTH ( 0x08000000 )
#define DEVMODE_PANNINGHEIGHT ( 0x10000000 )

struct spoolss_DeviceMode {
	const char *devicename;/* [charset(UTF16)] */
	uint16_t specversion;
	uint16_t driverversion;
	uint16_t size;
	uint16_t __driverextra_length;/* [value(r->driverextra_data.length)] */
	uint32_t fields;
	uint16_t orientation;
	uint16_t papersize;
	uint16_t paperlength;
	uint16_t paperwidth;
	uint16_t scale;
	uint16_t copies;
	uint16_t defaultsource;
	uint16_t printquality;
	uint16_t color;
	uint16_t duplex;
	uint16_t yresolution;
	uint16_t ttoption;
	uint16_t collate;
	const char *formname;/* [charset(UTF16)] */
	uint16_t logpixels;
	uint32_t bitsperpel;
	uint32_t pelswidth;
	uint32_t pelsheight;
	uint32_t displayflags;
	uint32_t displayfrequency;
	uint32_t icmmethod;
	uint32_t icmintent;
	uint32_t mediatype;
	uint32_t dithertype;
	uint32_t reserved1;
	uint32_t reserved2;
	uint32_t panningwidth;
	uint32_t panningheight;
	DATA_BLOB driverextra_data;/* [subcontext_size(__driverextra_length),subcontext(0),flag(LIBNDR_FLAG_REMAINING)] */
}/* [gensize,public] */;

/* bitmap spoolss_EnumPrinterFlags */
#define PRINTER_ENUM_DEFAULT ( 0x00000001 )
#define PRINTER_ENUM_LOCAL ( 0x00000002 )
#define PRINTER_ENUM_CONNECTIONS ( 0x00000004 )
#define PRINTER_ENUM_FAVORITE ( 0x00000004 )
#define PRINTER_ENUM_NAME ( 0x00000008 )
#define PRINTER_ENUM_REMOTE ( 0x00000010 )
#define PRINTER_ENUM_SHARED ( 0x00000020 )
#define PRINTER_ENUM_NETWORK ( 0x00000040 )
#define PRINTER_ENUM_EXPAND ( 0x00004000 )
#define PRINTER_ENUM_CONTAINER ( 0x00008000 )
#define PRINTER_ENUM_ICON1 ( 0x00010000 )
#define PRINTER_ENUM_ICON2 ( 0x00020000 )
#define PRINTER_ENUM_ICON3 ( 0x00040000 )
#define PRINTER_ENUM_ICON4 ( 0x00080000 )
#define PRINTER_ENUM_ICON5 ( 0x00100000 )
#define PRINTER_ENUM_ICON6 ( 0x00200000 )
#define PRINTER_ENUM_ICON7 ( 0x00400000 )
#define PRINTER_ENUM_ICON8 ( 0x00800000 )
#define PRINTER_ENUM_HIDE ( 0x01000000 )

struct spoolss_PrinterInfo1 {
	uint32_t flags;
	const char * description;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM)] */
	const char * name;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM)] */
	const char * comment;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM)] */
}/* [gensize,public] */;

/* bitmap spoolss_PrinterAttributes */
#define PRINTER_ATTRIBUTE_QUEUED ( 0x00000001 )
#define PRINTER_ATTRIBUTE_DIRECT ( 0x00000002 )
#define PRINTER_ATTRIBUTE_DEFAULT ( 0x00000004 )
#define PRINTER_ATTRIBUTE_SHARED ( 0x00000008 )
#define PRINTER_ATTRIBUTE_NETWORK ( 0x00000010 )
#define PRINTER_ATTRIBUTE_HIDDEN ( 0x00000020 )
#define PRINTER_ATTRIBUTE_LOCAL ( 0x00000040 )
#define PRINTER_ATTRIBUTE_ENABLE_DEVQ ( 0x00000080 )
#define PRINTER_ATTRIBUTE_KEEPPRINTEDJOBS ( 0x00000100 )
#define PRINTER_ATTRIBUTE_DO_COMPLETE_FIRST ( 0x00000200 )
#define PRINTER_ATTRIBUTE_WORK_OFFLINE ( 0x00000400 )
#define PRINTER_ATTRIBUTE_ENABLE_BIDI ( 0x00000800 )
#define PRINTER_ATTRIBUTE_RAW_ONLY ( 0x00001000 )
#define PRINTER_ATTRIBUTE_PUBLISHED ( 0x00002000 )
#define PRINTER_ATTRIBUTE_FAX ( 0x00004000 )
#define PRINTER_ATTRIBUTE_TS ( 0x00008000 )

struct spoolss_PrinterInfo2 {
	const char * servername;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM)] */
	const char * printername;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM)] */
	const char * sharename;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM)] */
	const char * portname;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM)] */
	const char * drivername;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM)] */
	const char * comment;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM)] */
	const char * location;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM)] */
	struct spoolss_DeviceMode *devmode;/* [relative,subcontext(0)] */
	const char * sepfile;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM)] */
	const char * printprocessor;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM)] */
	const char * datatype;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM)] */
	const char * parameters;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM)] */
	struct security_descriptor *secdesc;/* [relative,subcontext(0)] */
	uint32_t attributes;
	uint32_t priority;/* [range(0,99)] */
	uint32_t defaultpriority;
	uint32_t starttime;
	uint32_t untiltime;
	uint32_t status;
	uint32_t cjobs;
	uint32_t averageppm;
}/* [gensize,public] */;

struct spoolss_PrinterInfo3 {
	struct security_descriptor *secdesc;/* [relative,subcontext(0)] */
}/* [gensize,public] */;

struct spoolss_PrinterInfo4 {
	const char * printername;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM)] */
	const char * servername;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM)] */
	uint32_t attributes;
}/* [gensize,public] */;

struct spoolss_PrinterInfo5 {
	const char * printername;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM)] */
	const char * portname;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM)] */
	uint32_t attributes;
	uint32_t device_not_selected_timeout;
	uint32_t transmission_retry_timeout;
}/* [gensize,public] */;

struct spoolss_PrinterInfo6 {
	uint32_t status;
}/* [gensize,public] */;

/* bitmap spoolss_DsPrintAction */
#define DSPRINT_PUBLISH ( 0x00000001 )
#define DSPRINT_UPDATE ( 0x00000002 )
#define DSPRINT_UNPUBLISH ( 0x00000004 )
#define DSPRINT_REPUBLISH ( 0x00000008 )
#define DSPRINT_PENDING ( 0x80000000 )

struct spoolss_PrinterInfo7 {
	const char * guid;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM)] */
	uint32_t action;
}/* [gensize,public] */;

struct spoolss_DeviceModeInfo {
	struct spoolss_DeviceMode *devmode;/* [relative,subcontext(0)] */
};

union spoolss_PrinterInfo {
	struct spoolss_PrinterInfo0 info0;/* [case(0)] */
	struct spoolss_PrinterInfo1 info1;/* [case] */
	struct spoolss_PrinterInfo2 info2;/* [case(2)] */
	struct spoolss_PrinterInfo3 info3;/* [case(3)] */
	struct spoolss_PrinterInfo4 info4;/* [case(4)] */
	struct spoolss_PrinterInfo5 info5;/* [case(5)] */
	struct spoolss_PrinterInfo6 info6;/* [case(6)] */
	struct spoolss_PrinterInfo7 info7;/* [case(7)] */
	struct spoolss_DeviceModeInfo info8;/* [case(8)] */
	struct spoolss_DeviceModeInfo info9;/* [case(9)] */
}/* [relative_base,gensize,public,nodiscriminant] */;

struct spoolss_DevmodeContainer {
	uint32_t _ndr_size;/* [value(_ndr_size_spoolss_DeviceMode(devmode,ndr->iconv_convenience,ndr->flags))] */
	struct spoolss_DeviceMode *devmode;/* [unique,subcontext_size(_ndr_size),subcontext(4)] */
};

struct spoolss_JobInfo1 {
	uint32_t job_id;
	const char * printer_name;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM)] */
	const char * server_name;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM)] */
	const char * user_name;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM)] */
	const char * document_name;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM)] */
	const char * data_type;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM)] */
	const char * text_status;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM)] */
	uint32_t status;
	uint32_t priority;/* [range(0,99)] */
	uint32_t position;
	uint32_t total_pages;
	uint32_t pages_printed;
	struct spoolss_Time submitted;
}/* [gensize,public] */;

struct spoolss_JobInfo2 {
	uint32_t job_id;
	const char * printer_name;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM)] */
	const char * server_name;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM)] */
	const char * user_name;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM)] */
	const char * document_name;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM)] */
	const char * notify_name;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM)] */
	const char * data_type;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM)] */
	const char * print_processor;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM)] */
	const char * parameters;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM)] */
	const char * driver_name;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM)] */
	struct spoolss_DeviceMode *devmode;/* [relative] */
	const char * text_status;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM)] */
	struct security_descriptor *secdesc;/* [relative] */
	uint32_t status;
	uint32_t priority;/* [range(0,99)] */
	uint32_t position;
	uint32_t start_time;
	uint32_t until_time;
	uint32_t total_pages;
	uint32_t size;
	struct spoolss_Time submitted;
	uint32_t time;
	uint32_t pages_printed;
}/* [gensize,public] */;

struct spoolss_JobInfo3 {
	uint32_t job_id;
	uint32_t next_job_id;
	uint32_t reserved;
}/* [gensize,public] */;

struct spoolss_JobInfo4 {
	uint32_t job_id;
	const char * printer_name;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM)] */
	const char * server_name;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM)] */
	const char * user_name;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM)] */
	const char * document_name;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM)] */
	const char * notify_name;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM)] */
	const char * data_type;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM)] */
	const char * print_processor;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM)] */
	const char * parameters;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM)] */
	const char * driver_name;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM)] */
	struct spoolss_DeviceMode *devmode;/* [relative] */
	const char * text_status;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM)] */
	struct security_descriptor *secdesc;/* [relative] */
	uint32_t status;
	uint32_t priority;/* [range(0,99)] */
	uint32_t position;
	uint32_t start_time;
	uint32_t until_time;
	uint32_t total_pages;
	uint32_t size;
	struct spoolss_Time submitted;
	uint32_t time;
	uint32_t pages_printed;
	uint32_t size_high;
}/* [gensize,public] */;

union spoolss_JobInfo {
	struct spoolss_JobInfo1 info1;/* [case] */
	struct spoolss_JobInfo2 info2;/* [case(2)] */
	struct spoolss_JobInfo3 info3;/* [case(3)] */
	struct spoolss_JobInfo4 info4;/* [case(4)] */
}/* [relative_base,gensize,public,nodiscriminant] */;

struct spoolss_SetJobInfo1 {
	uint32_t job_id;
	const char *printer_name;/* [unique,charset(UTF16)] */
	const char *server_name;/* [unique,charset(UTF16)] */
	const char *user_name;/* [unique,charset(UTF16)] */
	const char *document_name;/* [unique,charset(UTF16)] */
	const char *data_type;/* [unique,charset(UTF16)] */
	const char *text_status;/* [unique,charset(UTF16)] */
	uint32_t status;
	uint32_t priority;/* [range(0,99)] */
	uint32_t position;
	uint32_t total_pages;
	uint32_t pages_printed;
	struct spoolss_Time submitted;
};

struct spoolss_SetJobInfo2 {
	uint32_t job_id;
	const char *printer_name;/* [unique,charset(UTF16)] */
	const char *server_name;/* [unique,charset(UTF16)] */
	const char *user_name;/* [unique,charset(UTF16)] */
	const char *document_name;/* [unique,charset(UTF16)] */
	const char *notify_name;/* [unique,charset(UTF16)] */
	const char *data_type;/* [unique,charset(UTF16)] */
	const char *print_processor;/* [unique,charset(UTF16)] */
	const char *parameters;/* [unique,charset(UTF16)] */
	const char *driver_name;/* [unique,charset(UTF16)] */
	uint32_t _devmode_ptr;
	const char *text_status;/* [unique,charset(UTF16)] */
	uint32_t _secdesc_ptr;
	uint32_t status;
	uint32_t priority;/* [range(0,99)] */
	uint32_t position;
	uint32_t start_time;
	uint32_t until_time;
	uint32_t total_pages;
	uint32_t size;
	struct spoolss_Time submitted;
	uint32_t time;
	uint32_t pages_printed;
};

struct spoolss_SetJobInfo4 {
	uint32_t job_id;
	const char *printer_name;/* [unique,charset(UTF16)] */
	const char *server_name;/* [unique,charset(UTF16)] */
	const char *user_name;/* [unique,charset(UTF16)] */
	const char *document_name;/* [unique,charset(UTF16)] */
	const char *notify_name;/* [unique,charset(UTF16)] */
	const char *data_type;/* [unique,charset(UTF16)] */
	const char *print_processor;/* [unique,charset(UTF16)] */
	const char *parameters;/* [unique,charset(UTF16)] */
	const char *driver_name;/* [unique,charset(UTF16)] */
	uint32_t _devmode_ptr;
	const char *text_status;/* [unique,charset(UTF16)] */
	uint32_t _secdesc_ptr;
	uint32_t status;
	uint32_t priority;/* [range(0,99)] */
	uint32_t position;
	uint32_t start_time;
	uint32_t until_time;
	uint32_t total_pages;
	uint32_t size;
	struct spoolss_Time submitted;
	uint32_t time;
	uint32_t pages_printed;
	uint32_t size_high;
};

union spoolss_SetJobInfo {
	struct spoolss_SetJobInfo1 *info1;/* [unique,case] */
	struct spoolss_SetJobInfo2 *info2;/* [unique,case(2)] */
	struct spoolss_JobInfo3 *info3;/* [unique,case(3)] */
	struct spoolss_SetJobInfo4 *info4;/* [unique,case(4)] */
}/* [public] */;

struct spoolss_JobInfoContainer {
	uint32_t level;
	union spoolss_SetJobInfo info;/* [switch_is(level)] */
};

enum spoolss_JobControl
#ifndef USE_UINT_ENUMS
 {
	SPOOLSS_JOB_CONTROL_PAUSE=1,
	SPOOLSS_JOB_CONTROL_RESUME=2,
	SPOOLSS_JOB_CONTROL_CANCEL=3,
	SPOOLSS_JOB_CONTROL_RESTART=4,
	SPOOLSS_JOB_CONTROL_DELETE=5,
	SPOOLSS_JOB_CONTROL_SEND_TO_PRINTER=6,
	SPOOLSS_JOB_CONTROL_LAST_PAGE_EJECTED=7,
	SPOOLSS_JOB_CONTROL_RETAIN=8,
	SPOOLSS_JOB_CONTROL_RELEASE=9
}
#else
 { __donnot_use_enum_spoolss_JobControl=0x7FFFFFFF}
#define SPOOLSS_JOB_CONTROL_PAUSE ( 1 )
#define SPOOLSS_JOB_CONTROL_RESUME ( 2 )
#define SPOOLSS_JOB_CONTROL_CANCEL ( 3 )
#define SPOOLSS_JOB_CONTROL_RESTART ( 4 )
#define SPOOLSS_JOB_CONTROL_DELETE ( 5 )
#define SPOOLSS_JOB_CONTROL_SEND_TO_PRINTER ( 6 )
#define SPOOLSS_JOB_CONTROL_LAST_PAGE_EJECTED ( 7 )
#define SPOOLSS_JOB_CONTROL_RETAIN ( 8 )
#define SPOOLSS_JOB_CONTROL_RELEASE ( 9 )
#endif
;

enum spoolss_PrinterControl
#ifndef USE_UINT_ENUMS
 {
	SPOOLSS_PRINTER_CONTROL_UNPAUSE=0,
	SPOOLSS_PRINTER_CONTROL_PAUSE=1,
	SPOOLSS_PRINTER_CONTROL_RESUME=2,
	SPOOLSS_PRINTER_CONTROL_PURGE=3,
	SPOOLSS_PRINTER_CONTROL_SET_STATUS=4
}
#else
 { __donnot_use_enum_spoolss_PrinterControl=0x7FFFFFFF}
#define SPOOLSS_PRINTER_CONTROL_UNPAUSE ( 0 )
#define SPOOLSS_PRINTER_CONTROL_PAUSE ( 1 )
#define SPOOLSS_PRINTER_CONTROL_RESUME ( 2 )
#define SPOOLSS_PRINTER_CONTROL_PURGE ( 3 )
#define SPOOLSS_PRINTER_CONTROL_SET_STATUS ( 4 )
#endif
;

struct spoolss_SetPrinterInfo0 {
	const char *servername;/* [unique,charset(UTF16)] */
	const char *printername;/* [unique,charset(UTF16)] */
	uint32_t cjobs;
	uint32_t total_jobs;
	uint32_t total_bytes;
	struct spoolss_Time time;
	uint32_t global_counter;
	uint32_t total_pages;
	uint32_t version;
	uint32_t free_build;
	uint32_t spooling;
	uint32_t max_spooling;
	uint32_t session_counter;
	uint32_t num_error_out_of_paper;
	uint32_t num_error_not_ready;
	uint32_t job_error;
	uint32_t number_of_processors;
	enum spoolss_ProcessorType processor_type;
	uint32_t high_part_total_bytes;
	uint32_t change_id;
	WERROR last_error;
	uint32_t status;
	uint32_t enumerate_network_printers;
	uint32_t c_setprinter;
	enum spoolss_ProcessorArchitecture processor_architecture;
	uint16_t processor_level;
	uint32_t ref_ic;
	uint32_t reserved2;
	uint32_t reserved3;
};

struct spoolss_SetPrinterInfo1 {
	uint32_t flags;
	const char *description;/* [unique,charset(UTF16)] */
	const char *name;/* [unique,charset(UTF16)] */
	const char *comment;/* [unique,charset(UTF16)] */
};

struct spoolss_SetPrinterInfo2 {
	const char *servername;/* [unique,charset(UTF16)] */
	const char *printername;/* [unique,charset(UTF16)] */
	const char *sharename;/* [unique,charset(UTF16)] */
	const char *portname;/* [unique,charset(UTF16)] */
	const char *drivername;/* [unique,charset(UTF16)] */
	const char *comment;/* [unique,charset(UTF16)] */
	const char *location;/* [unique,charset(UTF16)] */
	struct spoolss_DeviceMode *devmode;/* [unique,subcontext(0)] */
	const char *sepfile;/* [unique,charset(UTF16)] */
	const char *printprocessor;/* [unique,charset(UTF16)] */
	const char *datatype;/* [unique,charset(UTF16)] */
	const char *parameters;/* [unique,charset(UTF16)] */
	struct security_descriptor *secdesc;/* [unique,subcontext(0)] */
	uint32_t attributes;
	uint32_t priority;/* [range(0,99)] */
	uint32_t defaultpriority;
	uint32_t starttime;
	uint32_t untiltime;
	uint32_t status;
	uint32_t cjobs;
	uint32_t averageppm;
};

struct spoolss_SetPrinterInfo3 {
	uint32_t sec_desc_ptr;
};

struct spoolss_SetPrinterInfo4 {
	const char *printername;/* [unique,charset(UTF16)] */
	const char *servername;/* [unique,charset(UTF16)] */
	uint32_t attributes;
};

struct spoolss_SetPrinterInfo5 {
	const char *printername;/* [unique,charset(UTF16)] */
	const char *portname;/* [unique,charset(UTF16)] */
	uint32_t attributes;
	uint32_t device_not_selected_timeout;
	uint32_t transmission_retry_timeout;
};

struct spoolss_SetPrinterInfo6 {
	uint32_t status;
};

struct spoolss_SetPrinterInfo7 {
	const char *guid;/* [unique,charset(UTF16)] */
	uint32_t action;
};

union spoolss_SetPrinterInfo {
	struct spoolss_SetPrinterInfo0 *info0;/* [unique,case(0)] */
	struct spoolss_SetPrinterInfo1 *info1;/* [unique,case] */
	struct spoolss_SetPrinterInfo2 *info2;/* [unique,case(2)] */
	struct spoolss_SetPrinterInfo3 *info3;/* [unique,case(3)] */
	struct spoolss_SetPrinterInfo4 *info4;/* [unique,case(4)] */
	struct spoolss_SetPrinterInfo5 *info5;/* [unique,case(5)] */
	struct spoolss_SetPrinterInfo6 *info6;/* [unique,case(6)] */
	struct spoolss_SetPrinterInfo7 *info7;/* [unique,case(7)] */
	struct spoolss_DeviceModeInfo *info8;/* [unique,case(8)] */
	struct spoolss_DeviceModeInfo *info9;/* [unique,case(9)] */
}/* [switch_type(uint32)] */;

struct spoolss_SetPrinterInfoCtr {
	uint32_t level;
	union spoolss_SetPrinterInfo info;/* [switch_is(level)] */
};

struct spoolss_StringArray {
	uint32_t _ndr_size;/* [value((ndr_size_spoolss_StringArray(r,ndr->iconv_convenience,ndr->flags)-4)/2)] */
	const char ** string;/* [flag(LIBNDR_FLAG_STR_NULLTERM)] */
}/* [public] */;

struct spoolss_AddDriverInfo1 {
	const char *driver_name;/* [unique,charset(UTF16)] */
};

enum spoolss_DriverOSVersion
#ifndef USE_UINT_ENUMS
 {
	SPOOLSS_DRIVER_VERSION_9X=0,
	SPOOLSS_DRIVER_VERSION_NT35=1,
	SPOOLSS_DRIVER_VERSION_NT4=2,
	SPOOLSS_DRIVER_VERSION_200X=3
}
#else
 { __donnot_use_enum_spoolss_DriverOSVersion=0x7FFFFFFF}
#define SPOOLSS_DRIVER_VERSION_9X ( 0 )
#define SPOOLSS_DRIVER_VERSION_NT35 ( 1 )
#define SPOOLSS_DRIVER_VERSION_NT4 ( 2 )
#define SPOOLSS_DRIVER_VERSION_200X ( 3 )
#endif
;

struct spoolss_AddDriverInfo2 {
	enum spoolss_DriverOSVersion version;
	const char *driver_name;/* [unique,charset(UTF16)] */
	const char *architecture;/* [unique,charset(UTF16)] */
	const char *driver_path;/* [unique,charset(UTF16)] */
	const char *data_file;/* [unique,charset(UTF16)] */
	const char *config_file;/* [unique,charset(UTF16)] */
};

struct spoolss_AddDriverInfo3 {
	enum spoolss_DriverOSVersion version;
	const char *driver_name;/* [unique,charset(UTF16)] */
	const char *architecture;/* [unique,charset(UTF16)] */
	const char *driver_path;/* [unique,charset(UTF16)] */
	const char *data_file;/* [unique,charset(UTF16)] */
	const char *config_file;/* [unique,charset(UTF16)] */
	const char *help_file;/* [unique,charset(UTF16)] */
	const char *monitor_name;/* [unique,charset(UTF16)] */
	const char *default_datatype;/* [unique,charset(UTF16)] */
	uint32_t _ndr_size_dependent_files;/* [value(((ndr_size_spoolss_StringArray(dependent_files,ndr->iconv_convenience,ndr->flags)-4)/2))] */
	struct spoolss_StringArray *dependent_files;/* [unique] */
};

struct spoolss_AddDriverInfo4 {
	enum spoolss_DriverOSVersion version;
	const char *driver_name;/* [unique,charset(UTF16)] */
	const char *architecture;/* [unique,charset(UTF16)] */
	const char *driver_path;/* [unique,charset(UTF16)] */
	const char *data_file;/* [unique,charset(UTF16)] */
	const char *config_file;/* [unique,charset(UTF16)] */
	const char *help_file;/* [unique,charset(UTF16)] */
	const char *monitor_name;/* [unique,charset(UTF16)] */
	const char *default_datatype;/* [unique,charset(UTF16)] */
	uint32_t _ndr_size_dependent_files;/* [value(((ndr_size_spoolss_StringArray(dependent_files,ndr->iconv_convenience,ndr->flags)-4)/2))] */
	struct spoolss_StringArray *dependent_files;/* [unique] */
	uint32_t _ndr_size_previous_names;/* [value(((ndr_size_spoolss_StringArray(previous_names,ndr->iconv_convenience,ndr->flags)-4)/2))] */
	struct spoolss_StringArray *previous_names;/* [unique] */
};

/* bitmap spoolss_DriverAttributes */
#define PRINTER_DRIVER_PACKAGE_AWARE ( 0x00000002 )

struct spoolss_AddDriverInfo5 {
	enum spoolss_DriverOSVersion version;
	const char *driver_name;/* [unique,charset(UTF16)] */
	const char *architecture;/* [unique,charset(UTF16)] */
	const char *driver_path;/* [unique,charset(UTF16)] */
	const char *data_file;/* [unique,charset(UTF16)] */
	const char *config_file;/* [unique,charset(UTF16)] */
	uint32_t driver_attributes;
	uint32_t config_version;
	uint32_t driver_version;
};

struct spoolss_AddDriverInfo6 {
	enum spoolss_DriverOSVersion version;
	const char *driver_name;/* [unique,charset(UTF16)] */
	const char *architecture;/* [unique,charset(UTF16)] */
	const char *driver_path;/* [unique,charset(UTF16)] */
	const char *data_file;/* [unique,charset(UTF16)] */
	const char *config_file;/* [unique,charset(UTF16)] */
	const char *help_file;/* [unique,charset(UTF16)] */
	const char *monitor_name;/* [unique,charset(UTF16)] */
	const char *default_datatype;/* [unique,charset(UTF16)] */
	uint32_t _ndr_size_dependent_files;/* [value(((ndr_size_spoolss_StringArray(dependent_files,ndr->iconv_convenience,ndr->flags)-4)/2))] */
	struct spoolss_StringArray *dependent_files;/* [unique] */
	uint32_t _ndr_size_previous_names;/* [value(((ndr_size_spoolss_StringArray(previous_names,ndr->iconv_convenience,ndr->flags)-4)/2))] */
	struct spoolss_StringArray *previous_names;/* [unique] */
	NTTIME driver_date;
	uint64_t driver_version;
	const char *manufacturer_name;/* [unique,charset(UTF16)] */
	const char *manufacturer_url;/* [unique,charset(UTF16)] */
	const char *hardware_id;/* [unique,charset(UTF16)] */
	const char *provider;/* [unique,charset(UTF16)] */
};

struct spoolss_AddDriverInfo8 {
	enum spoolss_DriverOSVersion version;
	const char *driver_name;/* [unique,charset(UTF16)] */
	const char *architecture;/* [unique,charset(UTF16)] */
	const char *driver_path;/* [unique,charset(UTF16)] */
	const char *data_file;/* [unique,charset(UTF16)] */
	const char *config_file;/* [unique,charset(UTF16)] */
	const char *help_file;/* [unique,charset(UTF16)] */
	const char *monitor_name;/* [unique,charset(UTF16)] */
	const char *default_datatype;/* [unique,charset(UTF16)] */
	uint32_t _ndr_size_dependent_files;/* [value(((ndr_size_spoolss_StringArray(dependent_files,ndr->iconv_convenience,ndr->flags)-4)/2))] */
	struct spoolss_StringArray *dependent_files;/* [unique] */
	uint32_t _ndr_size_previous_names;/* [value(((ndr_size_spoolss_StringArray(previous_names,ndr->iconv_convenience,ndr->flags)-4)/2))] */
	struct spoolss_StringArray *previous_names;/* [unique] */
	NTTIME driver_date;
	uint64_t driver_version;
	const char *manufacturer_name;/* [unique,charset(UTF16)] */
	const char *manufacturer_url;/* [unique,charset(UTF16)] */
	const char *hardware_id;/* [unique,charset(UTF16)] */
	const char *provider;/* [unique,charset(UTF16)] */
	const char *print_processor;/* [unique,charset(UTF16)] */
	const char *vendor_setup;/* [unique,charset(UTF16)] */
	uint32_t _ndr_size_color_profiles;/* [value(((ndr_size_spoolss_StringArray(color_profiles,ndr->iconv_convenience,ndr->flags)-4)/2))] */
	struct spoolss_StringArray *color_profiles;/* [unique] */
	const char *inf_path;/* [unique,charset(UTF16)] */
	uint32_t printer_driver_attributes;
	uint32_t _ndr_size_core_driver_dependencies;/* [value(((ndr_size_spoolss_StringArray(core_driver_dependencies,ndr->iconv_convenience,ndr->flags)-4)/2))] */
	struct spoolss_StringArray *core_driver_dependencies;/* [unique] */
	NTTIME min_inbox_driver_ver_date;
	uint64_t min_inbox_driver_ver_version;
};

union spoolss_AddDriverInfo {
	struct spoolss_AddDriverInfo1 *info1;/* [unique,case] */
	struct spoolss_AddDriverInfo2 *info2;/* [unique,case(2)] */
	struct spoolss_AddDriverInfo3 *info3;/* [unique,case(3)] */
	struct spoolss_AddDriverInfo4 *info4;/* [unique,case(4)] */
	struct spoolss_AddDriverInfo6 *info6;/* [unique,case(6)] */
	struct spoolss_AddDriverInfo8 *info8;/* [unique,case(8)] */
}/* [switch_type(uint32)] */;

struct spoolss_AddDriverInfoCtr {
	uint32_t level;
	union spoolss_AddDriverInfo info;/* [switch_is(level)] */
};

struct spoolss_DriverInfo1 {
	const char * driver_name;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM)] */
}/* [gensize,public] */;

struct spoolss_DriverInfo2 {
	enum spoolss_DriverOSVersion version;
	const char * driver_name;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM)] */
	const char * architecture;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM)] */
	const char * driver_path;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM)] */
	const char * data_file;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM)] */
	const char * config_file;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM)] */
}/* [gensize,public] */;

struct spoolss_DriverInfo3 {
	enum spoolss_DriverOSVersion version;
	const char * driver_name;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM)] */
	const char * architecture;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM)] */
	const char * driver_path;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM)] */
	const char * data_file;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM)] */
	const char * config_file;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM)] */
	const char * help_file;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM)] */
	const char ** dependent_files;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM)] */
	const char * monitor_name;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM)] */
	const char * default_datatype;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM)] */
}/* [gensize,public] */;

struct spoolss_DriverInfo4 {
	enum spoolss_DriverOSVersion version;
	const char * driver_name;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM)] */
	const char * architecture;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM)] */
	const char * driver_path;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM)] */
	const char * data_file;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM)] */
	const char * config_file;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM)] */
	const char * help_file;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM)] */
	const char ** dependent_files;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM)] */
	const char * monitor_name;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM)] */
	const char * default_datatype;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM)] */
	const char ** previous_names;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM)] */
}/* [gensize,public] */;

struct spoolss_DriverInfo5 {
	enum spoolss_DriverOSVersion version;
	const char * driver_name;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM)] */
	const char * architecture;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM)] */
	const char * driver_path;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM)] */
	const char * data_file;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM)] */
	const char * config_file;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM)] */
	uint32_t driver_attributes;
	uint32_t config_version;
	uint32_t driver_version;
}/* [gensize,public] */;

struct spoolss_DriverInfo6 {
	enum spoolss_DriverOSVersion version;
	const char * driver_name;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM)] */
	const char * architecture;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM)] */
	const char * driver_path;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM)] */
	const char * data_file;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM)] */
	const char * config_file;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM)] */
	const char * help_file;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM)] */
	const char ** dependent_files;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM)] */
	const char * monitor_name;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM)] */
	const char * default_datatype;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM)] */
	const char ** previous_names;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM)] */
	NTTIME driver_date;
	uint64_t driver_version;
	const char * manufacturer_name;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM)] */
	const char * manufacturer_url;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM)] */
	const char * hardware_id;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM)] */
	const char * provider;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM)] */
}/* [gensize,public] */;

struct spoolss_DriverInfo8 {
	enum spoolss_DriverOSVersion version;
	const char * driver_name;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM)] */
	const char * architecture;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM)] */
	const char * driver_path;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM)] */
	const char * data_file;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM)] */
	const char * config_file;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM)] */
	const char * help_file;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM)] */
	const char * monitor_name;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM)] */
	const char * default_datatype;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM)] */
	const char ** dependent_files;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM)] */
	const char ** previous_names;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM)] */
	NTTIME driver_date;
	uint64_t driver_version;
	const char * manufacturer_name;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM)] */
	const char * manufacturer_url;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM)] */
	const char * hardware_id;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM)] */
	const char * provider;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM)] */
	const char * print_processor;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM)] */
	const char * vendor_setup;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM)] */
	const char ** color_profiles;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM)] */
	const char * inf_path;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM)] */
	uint32_t printer_driver_attributes;
	const char ** core_driver_dependencies;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM)] */
	NTTIME min_inbox_driver_ver_date;
	uint64_t min_inbox_driver_ver_version;
}/* [gensize,public] */;

enum spoolss_DriverFileType
#ifndef USE_UINT_ENUMS
 {
	SPOOLSS_DRIVER_FILE_TYPE_RENDERING=0x00000000,
	SPOOLSS_DRIVER_FILE_TYPE_CONFIGURATION=0x00000001,
	SPOOLSS_DRIVER_FILE_TYPE_DATA=0x00000002,
	SPOOLSS_DRIVER_FILE_TYPE_HELP=0x00000003,
	SPOOLSS_DRIVER_FILE_TYPE_OTHER=0x00000004
}
#else
 { __donnot_use_enum_spoolss_DriverFileType=0x7FFFFFFF}
#define SPOOLSS_DRIVER_FILE_TYPE_RENDERING ( 0x00000000 )
#define SPOOLSS_DRIVER_FILE_TYPE_CONFIGURATION ( 0x00000001 )
#define SPOOLSS_DRIVER_FILE_TYPE_DATA ( 0x00000002 )
#define SPOOLSS_DRIVER_FILE_TYPE_HELP ( 0x00000003 )
#define SPOOLSS_DRIVER_FILE_TYPE_OTHER ( 0x00000004 )
#endif
;

struct spoolss_DriverFileInfo {
	const char * file_name;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM)] */
	enum spoolss_DriverFileType file_type;
	uint32_t file_version;
}/* [public] */;

struct spoolss_DriverInfo101 {
	enum spoolss_DriverOSVersion version;
	const char * driver_name;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM)] */
	const char * architecture;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM)] */
	struct spoolss_DriverFileInfo *file_info;/* [relative,size_is(file_count)] */
	uint32_t file_count;
	const char * monitor_name;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM)] */
	const char * default_datatype;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM)] */
	const char ** previous_names;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM)] */
	NTTIME driver_date;
	uint64_t driver_version;
	const char * manufacturer_name;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM)] */
	const char * manufacturer_url;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM)] */
	const char * hardware_id;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM)] */
	const char * provider;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM)] */
}/* [gensize,nopush,public,nopull] */;

union spoolss_DriverInfo {
	struct spoolss_DriverInfo1 info1;/* [case] */
	struct spoolss_DriverInfo2 info2;/* [case(2)] */
	struct spoolss_DriverInfo3 info3;/* [case(3)] */
	struct spoolss_DriverInfo4 info4;/* [case(4)] */
	struct spoolss_DriverInfo5 info5;/* [case(5)] */
	struct spoolss_DriverInfo6 info6;/* [case(6)] */
	struct spoolss_DriverInfo8 info8;/* [case(8)] */
	struct spoolss_DriverInfo101 info101;/* [case(101)] */
}/* [relative_base,gensize,public,nodiscriminant] */;

struct spoolss_DriverDirectoryInfo1 {
	const char * directory_name;/* [flag(LIBNDR_FLAG_STR_NULLTERM)] */
}/* [gensize,public] */;

union spoolss_DriverDirectoryInfo {
	struct spoolss_DriverDirectoryInfo1 info1;/* [case] */
}/* [gensize,relative_base,nodiscriminant,public] */;

struct spoolss_PrintProcessorInfo1 {
	const char * print_processor_name;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM)] */
}/* [gensize,public] */;

union spoolss_PrintProcessorInfo {
	struct spoolss_PrintProcessorInfo1 info1;/* [case] */
}/* [relative_base,nodiscriminant,public] */;

struct spoolss_PrintProcessorDirectoryInfo1 {
	const char * directory_name;/* [flag(LIBNDR_FLAG_STR_NULLTERM)] */
}/* [gensize,public] */;

union spoolss_PrintProcessorDirectoryInfo {
	struct spoolss_PrintProcessorDirectoryInfo1 info1;/* [case] */
}/* [gensize,relative_base,nodiscriminant,public] */;

struct spoolss_DocumentInfo1 {
	const char *document_name;/* [unique,charset(UTF16)] */
	const char *output_file;/* [unique,charset(UTF16)] */
	const char *datatype;/* [unique,charset(UTF16)] */
};

union spoolss_DocumentInfo {
	struct spoolss_DocumentInfo1 *info1;/* [unique,case] */
}/* [switch_type(uint32)] */;

struct spoolss_OSVersion {
	uint32_t _ndr_size;/* [value(ndr_size_spoolss_OSVersion(r,ndr->iconv_convenience,ndr->flags))] */
	uint32_t major;
	uint32_t minor;
	uint32_t build;
	uint32_t unknown;/* [value(2)] */
	const char * extra_string;/* [subcontext_size(256),subcontext(0),flag(LIBNDR_FLAG_STR_NULLTERM)] */
}/* [gensize,public] */;

struct spoolss_OSVersionEx {
	uint32_t _ndr_size;/* [value(ndr_size_spoolss_OSVersionEx(r,ndr->iconv_convenience,ndr->flags))] */
	uint32_t major;
	uint32_t minor;
	uint32_t build;
	uint32_t unknown1;/* [value(2)] */
	const char * extra_string;/* [subcontext_size(256),subcontext(0),flag(LIBNDR_FLAG_STR_NULLTERM)] */
	uint32_t unknown2;
	uint32_t unknown3;
}/* [gensize,public] */;

union spoolss_PrinterData {
	const char * string;/* [flag(LIBNDR_FLAG_STR_NULLTERM),case(REG_SZ)] */
	DATA_BLOB binary;/* [flag(LIBNDR_FLAG_REMAINING),case(REG_BINARY)] */
	uint32_t value;/* [case(REG_DWORD)] */
	const char ** string_array;/* [flag(LIBNDR_FLAG_STR_NULLTERM),case(REG_MULTI_SZ)] */
	DATA_BLOB data;/* [flag(LIBNDR_FLAG_REMAINING),default] */
}/* [gensize,public,nodiscriminant] */;

enum spoolss_FormFlags
#ifndef USE_UINT_ENUMS
 {
	SPOOLSS_FORM_USER=0,
	SPOOLSS_FORM_BUILTIN=1,
	SPOOLSS_FORM_PRINTER=2
}
#else
 { __donnot_use_enum_spoolss_FormFlags=0x7FFFFFFF}
#define SPOOLSS_FORM_USER ( 0 )
#define SPOOLSS_FORM_BUILTIN ( 1 )
#define SPOOLSS_FORM_PRINTER ( 2 )
#endif
;

struct spoolss_FormSize {
	uint32_t width;
	uint32_t height;
};

struct spoolss_FormArea {
	uint32_t left;
	uint32_t top;
	uint32_t right;
	uint32_t bottom;
};

struct spoolss_FormInfo1 {
	enum spoolss_FormFlags flags;
	const char * form_name;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM)] */
	struct spoolss_FormSize size;
	struct spoolss_FormArea area;
}/* [gensize,public] */;

/* bitmap spoolss_FormStringType */
#define SPOOLSS_FORM_STRING_TYPE_NONE ( 0x00000001 )
#define SPOOLSS_FORM_STRING_TYPE_MUI_DLL ( 0x00000002 )
#define SPOOLSS_FORM_STRING_TYPE_LANG_PAIR ( 0x00000004 )

struct spoolss_FormInfo2 {
	enum spoolss_FormFlags flags;
	const char * form_name;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM)] */
	struct spoolss_FormSize size;
	struct spoolss_FormArea area;
	const char * keyword;/* [relative,flag(LIBNDR_FLAG_STR_ASCII|LIBNDR_FLAG_STR_NULLTERM)] */
	uint32_t string_type;
	const char * mui_dll;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM)] */
	uint32_t ressource_id;
	const char * display_name;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM)] */
	uint32_t lang_id;
}/* [gensize,public] */;

union spoolss_FormInfo {
	struct spoolss_FormInfo1 info1;/* [case] */
	struct spoolss_FormInfo2 info2;/* [case(2)] */
}/* [relative_base,gensize,public,nodiscriminant] */;

struct spoolss_AddFormInfo1 {
	enum spoolss_FormFlags flags;
	const char *form_name;/* [unique,charset(UTF16)] */
	struct spoolss_FormSize size;
	struct spoolss_FormArea area;
};

struct spoolss_AddFormInfo2 {
	enum spoolss_FormFlags flags;
	const char *form_name;/* [unique,charset(UTF16)] */
	struct spoolss_FormSize size;
	struct spoolss_FormArea area;
	const char *keyword;/* [unique,charset(DOS)] */
	uint32_t string_type;
	const char *mui_dll;/* [unique,charset(UTF16)] */
	uint32_t ressource_id;
	const char *display_name;/* [unique,charset(UTF16)] */
	uint32_t lang_id;
};

union spoolss_AddFormInfo {
	struct spoolss_AddFormInfo1 *info1;/* [unique,case] */
	struct spoolss_AddFormInfo2 *info2;/* [unique,case(2)] */
}/* [switch_type(uint32)] */;

struct spoolss_PortInfo1 {
	const char * port_name;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM)] */
}/* [gensize,public] */;

/* bitmap spoolss_PortType */
#define SPOOLSS_PORT_TYPE_WRITE ( 0x00000001 )
#define SPOOLSS_PORT_TYPE_READ ( 0x00000002 )
#define SPOOLSS_PORT_TYPE_REDIRECTED ( 0x00000004 )
#define SPOOLSS_PORT_TYPE_NET_ATTACHED ( 0x00000008 )

struct spoolss_PortInfo2 {
	const char * port_name;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM)] */
	const char * monitor_name;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM)] */
	const char * description;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM)] */
	uint32_t port_type;
	uint32_t reserved;
}/* [gensize,public] */;

enum spoolss_PortStatus
#ifndef USE_UINT_ENUMS
 {
	PORT_STATUS_CLEAR=0x00000000,
	PORT_STATUS_OFFLINE=0x00000001,
	PORT_STATUS_PAPER_JAM=0x00000002,
	PORT_STATUS_PAPER_OUT=0x00000003,
	PORT_STATUS_OUTPUT_BIN_FULL=0x00000004,
	PORT_STATUS_PAPER_PROBLEM=0x00000005,
	PORT_STATUS_NO_TONER=0x00000006,
	PORT_STATUS_DOOR_OPEN=0x00000007,
	PORT_STATUS_USER_INTERVENTION=0x00000008,
	PORT_STATUS_OUT_OF_MEMORY=0x00000009,
	PORT_STATUS_TONER_LOW=0x0000000A,
	PORT_STATUS_WARMING_UP=0x0000000B,
	PORT_STATUS_POWER_SAVE=0x0000000C
}
#else
 { __donnot_use_enum_spoolss_PortStatus=0x7FFFFFFF}
#define PORT_STATUS_CLEAR ( 0x00000000 )
#define PORT_STATUS_OFFLINE ( 0x00000001 )
#define PORT_STATUS_PAPER_JAM ( 0x00000002 )
#define PORT_STATUS_PAPER_OUT ( 0x00000003 )
#define PORT_STATUS_OUTPUT_BIN_FULL ( 0x00000004 )
#define PORT_STATUS_PAPER_PROBLEM ( 0x00000005 )
#define PORT_STATUS_NO_TONER ( 0x00000006 )
#define PORT_STATUS_DOOR_OPEN ( 0x00000007 )
#define PORT_STATUS_USER_INTERVENTION ( 0x00000008 )
#define PORT_STATUS_OUT_OF_MEMORY ( 0x00000009 )
#define PORT_STATUS_TONER_LOW ( 0x0000000A )
#define PORT_STATUS_WARMING_UP ( 0x0000000B )
#define PORT_STATUS_POWER_SAVE ( 0x0000000C )
#endif
;

enum spoolss_PortSeverity
#ifndef USE_UINT_ENUMS
 {
	PORT_STATUS_TYPE_ERROR=0x00000001,
	PORT_STATUS_TYPE_WARNING=0x00000002,
	PORT_STATUS_TYPE_INFO=0x00000003
}
#else
 { __donnot_use_enum_spoolss_PortSeverity=0x7FFFFFFF}
#define PORT_STATUS_TYPE_ERROR ( 0x00000001 )
#define PORT_STATUS_TYPE_WARNING ( 0x00000002 )
#define PORT_STATUS_TYPE_INFO ( 0x00000003 )
#endif
;

struct spoolss_PortInfo3 {
	enum spoolss_PortStatus status;
	const char * status_string;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM)] */
	enum spoolss_PortSeverity severity;
}/* [gensize,public] */;

struct spoolss_PortInfoFF {
	const char * port_name;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM)] */
	DATA_BLOB monitor_data;
}/* [gensize,public] */;

union spoolss_PortInfo {
	struct spoolss_PortInfo1 info1;/* [case] */
	struct spoolss_PortInfo2 info2;/* [case(2)] */
	struct spoolss_PortInfo3 info3;/* [case(3)] */
	struct spoolss_PortInfoFF infoFF;/* [case(0xff)] */
}/* [relative_base,nodiscriminant,public] */;

struct spoolss_MonitorInfo1 {
	const char * monitor_name;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM)] */
}/* [gensize,public] */;

struct spoolss_MonitorInfo2 {
	const char * monitor_name;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM)] */
	const char * environment;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM)] */
	const char * dll_name;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM)] */
}/* [gensize,public] */;

union spoolss_MonitorInfo {
	struct spoolss_MonitorInfo1 info1;/* [case] */
	struct spoolss_MonitorInfo2 info2;/* [case(2)] */
}/* [relative_base,nodiscriminant,public] */;

struct spoolss_PrintProcDataTypesInfo1 {
	const char * name_array;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM)] */
}/* [gensize,public] */;

union spoolss_PrintProcDataTypesInfo {
	struct spoolss_PrintProcDataTypesInfo1 info1;/* [case] */
}/* [relative_base,nodiscriminant,public] */;

/* bitmap spoolss_PrinterChangeFlags */
#define PRINTER_CHANGE_ADD_PRINTER ( 0x00000001 )
#define PRINTER_CHANGE_SET_PRINTER ( 0x00000002 )
#define PRINTER_CHANGE_DELETE_PRINTER ( 0x00000004 )
#define PRINTER_CHANGE_FAILED_CONNECTION_PRINTER ( 0x00000008 )
#define PRINTER_CHANGE_ADD_JOB ( 0x00000100 )
#define PRINTER_CHANGE_SET_JOB ( 0x00000200 )
#define PRINTER_CHANGE_DELETE_JOB ( 0x00000400 )
#define PRINTER_CHANGE_WRITE_JOB ( 0x00000800 )
#define PRINTER_CHANGE_ADD_FORM ( 0x00010000 )
#define PRINTER_CHANGE_SET_FORM ( 0x00020000 )
#define PRINTER_CHANGE_DELETE_FORM ( 0x00040000 )
#define PRINTER_CHANGE_ADD_PORT ( 0x00100000 )
#define PRINTER_CHANGE_CONFIGURE_PORT ( 0x00200000 )
#define PRINTER_CHANGE_DELETE_PORT ( 0x00400000 )
#define PRINTER_CHANGE_ADD_PRINT_PROCESSOR ( 0x01000000 )
#define PRINTER_CHANGE_DELETE_PRINT_PROCESSOR ( 0x04000000 )
#define PRINTER_CHANGE_SERVER ( 0x08000000 )
#define PRINTER_CHANGE_ADD_PRINTER_DRIVER ( 0x10000000 )
#define PRINTER_CHANGE_SET_PRINTER_DRIVER ( 0x20000000 )
#define PRINTER_CHANGE_DELETE_PRINTER_DRIVER ( 0x40000000 )
#define PRINTER_CHANGE_TIMEOUT ( 0x80000000 )

enum spoolss_JobNotifyField
#ifndef USE_UINT_ENUMS
 {
	JOB_NOTIFY_FIELD_PRINTER_NAME=0x00,
	JOB_NOTIFY_FIELD_MACHINE_NAME=0x01,
	JOB_NOTIFY_FIELD_PORT_NAME=0x02,
	JOB_NOTIFY_FIELD_USER_NAME=0x03,
	JOB_NOTIFY_FIELD_NOTIFY_NAME=0x04,
	JOB_NOTIFY_FIELD_DATATYPE=0x05,
	JOB_NOTIFY_FIELD_PRINT_PROCESSOR=0x06,
	JOB_NOTIFY_FIELD_PARAMETERS=0x07,
	JOB_NOTIFY_FIELD_DRIVER_NAME=0x08,
	JOB_NOTIFY_FIELD_DEVMODE=0x09,
	JOB_NOTIFY_FIELD_STATUS=0x0a,
	JOB_NOTIFY_FIELD_STATUS_STRING=0x0b,
	JOB_NOTIFY_FIELD_SECURITY_DESCRIPTOR=0x0c,
	JOB_NOTIFY_FIELD_DOCUMENT=0x0d,
	JOB_NOTIFY_FIELD_PRIORITY=0x0e,
	JOB_NOTIFY_FIELD_POSITION=0x0f,
	JOB_NOTIFY_FIELD_SUBMITTED=0x10,
	JOB_NOTIFY_FIELD_START_TIME=0x11,
	JOB_NOTIFY_FIELD_UNTIL_TIME=0x12,
	JOB_NOTIFY_FIELD_TIME=0x13,
	JOB_NOTIFY_FIELD_TOTAL_PAGES=0x14,
	JOB_NOTIFY_FIELD_PAGES_PRINTED=0x15,
	JOB_NOTIFY_FIELD_TOTAL_BYTES=0x16,
	JOB_NOTIFY_FIELD_BYTES_PRINTED=0x17
}
#else
 { __donnot_use_enum_spoolss_JobNotifyField=0x7FFFFFFF}
#define JOB_NOTIFY_FIELD_PRINTER_NAME ( 0x00 )
#define JOB_NOTIFY_FIELD_MACHINE_NAME ( 0x01 )
#define JOB_NOTIFY_FIELD_PORT_NAME ( 0x02 )
#define JOB_NOTIFY_FIELD_USER_NAME ( 0x03 )
#define JOB_NOTIFY_FIELD_NOTIFY_NAME ( 0x04 )
#define JOB_NOTIFY_FIELD_DATATYPE ( 0x05 )
#define JOB_NOTIFY_FIELD_PRINT_PROCESSOR ( 0x06 )
#define JOB_NOTIFY_FIELD_PARAMETERS ( 0x07 )
#define JOB_NOTIFY_FIELD_DRIVER_NAME ( 0x08 )
#define JOB_NOTIFY_FIELD_DEVMODE ( 0x09 )
#define JOB_NOTIFY_FIELD_STATUS ( 0x0a )
#define JOB_NOTIFY_FIELD_STATUS_STRING ( 0x0b )
#define JOB_NOTIFY_FIELD_SECURITY_DESCRIPTOR ( 0x0c )
#define JOB_NOTIFY_FIELD_DOCUMENT ( 0x0d )
#define JOB_NOTIFY_FIELD_PRIORITY ( 0x0e )
#define JOB_NOTIFY_FIELD_POSITION ( 0x0f )
#define JOB_NOTIFY_FIELD_SUBMITTED ( 0x10 )
#define JOB_NOTIFY_FIELD_START_TIME ( 0x11 )
#define JOB_NOTIFY_FIELD_UNTIL_TIME ( 0x12 )
#define JOB_NOTIFY_FIELD_TIME ( 0x13 )
#define JOB_NOTIFY_FIELD_TOTAL_PAGES ( 0x14 )
#define JOB_NOTIFY_FIELD_PAGES_PRINTED ( 0x15 )
#define JOB_NOTIFY_FIELD_TOTAL_BYTES ( 0x16 )
#define JOB_NOTIFY_FIELD_BYTES_PRINTED ( 0x17 )
#endif
;

enum spoolss_PrintNotifyField
#ifndef USE_UINT_ENUMS
 {
	PRINTER_NOTIFY_FIELD_SERVER_NAME=0x00,
	PRINTER_NOTIFY_FIELD_PRINTER_NAME=0x01,
	PRINTER_NOTIFY_FIELD_SHARE_NAME=0x02,
	PRINTER_NOTIFY_FIELD_PORT_NAME=0x03,
	PRINTER_NOTIFY_FIELD_DRIVER_NAME=0x04,
	PRINTER_NOTIFY_FIELD_COMMENT=0x05,
	PRINTER_NOTIFY_FIELD_LOCATION=0x06,
	PRINTER_NOTIFY_FIELD_DEVMODE=0x07,
	PRINTER_NOTIFY_FIELD_SEPFILE=0x08,
	PRINTER_NOTIFY_FIELD_PRINT_PROCESSOR=0x09,
	PRINTER_NOTIFY_FIELD_PARAMETERS=0x0a,
	PRINTER_NOTIFY_FIELD_DATATYPE=0x0b,
	PRINTER_NOTIFY_FIELD_SECURITY_DESCRIPTOR=0x0c,
	PRINTER_NOTIFY_FIELD_ATTRIBUTES=0x0d,
	PRINTER_NOTIFY_FIELD_PRIORITY=0x0e,
	PRINTER_NOTIFY_FIELD_DEFAULT_PRIORITY=0x0f,
	PRINTER_NOTIFY_FIELD_START_TIME=0x10,
	PRINTER_NOTIFY_FIELD_UNTIL_TIME=0x11,
	PRINTER_NOTIFY_FIELD_STATUS=0x12,
	PRINTER_NOTIFY_FIELD_STATUS_STRING=0x13,
	PRINTER_NOTIFY_FIELD_CJOBS=0x14,
	PRINTER_NOTIFY_FIELD_AVERAGE_PPM=0x15,
	PRINTER_NOTIFY_FIELD_TOTAL_PAGES=0x16,
	PRINTER_NOTIFY_FIELD_PAGES_PRINTED=0x17,
	PRINTER_NOTIFY_FIELD_TOTAL_BYTES=0x18,
	PRINTER_NOTIFY_FIELD_BYTES_PRINTED=0x19,
	PRINTER_NOTIFY_FIELD_OBJECT_GUID=0x1a,
	PRINTER_NOTIFY_FIELD_FRIENDLY_NAME=0x1b
}
#else
 { __donnot_use_enum_spoolss_PrintNotifyField=0x7FFFFFFF}
#define PRINTER_NOTIFY_FIELD_SERVER_NAME ( 0x00 )
#define PRINTER_NOTIFY_FIELD_PRINTER_NAME ( 0x01 )
#define PRINTER_NOTIFY_FIELD_SHARE_NAME ( 0x02 )
#define PRINTER_NOTIFY_FIELD_PORT_NAME ( 0x03 )
#define PRINTER_NOTIFY_FIELD_DRIVER_NAME ( 0x04 )
#define PRINTER_NOTIFY_FIELD_COMMENT ( 0x05 )
#define PRINTER_NOTIFY_FIELD_LOCATION ( 0x06 )
#define PRINTER_NOTIFY_FIELD_DEVMODE ( 0x07 )
#define PRINTER_NOTIFY_FIELD_SEPFILE ( 0x08 )
#define PRINTER_NOTIFY_FIELD_PRINT_PROCESSOR ( 0x09 )
#define PRINTER_NOTIFY_FIELD_PARAMETERS ( 0x0a )
#define PRINTER_NOTIFY_FIELD_DATATYPE ( 0x0b )
#define PRINTER_NOTIFY_FIELD_SECURITY_DESCRIPTOR ( 0x0c )
#define PRINTER_NOTIFY_FIELD_ATTRIBUTES ( 0x0d )
#define PRINTER_NOTIFY_FIELD_PRIORITY ( 0x0e )
#define PRINTER_NOTIFY_FIELD_DEFAULT_PRIORITY ( 0x0f )
#define PRINTER_NOTIFY_FIELD_START_TIME ( 0x10 )
#define PRINTER_NOTIFY_FIELD_UNTIL_TIME ( 0x11 )
#define PRINTER_NOTIFY_FIELD_STATUS ( 0x12 )
#define PRINTER_NOTIFY_FIELD_STATUS_STRING ( 0x13 )
#define PRINTER_NOTIFY_FIELD_CJOBS ( 0x14 )
#define PRINTER_NOTIFY_FIELD_AVERAGE_PPM ( 0x15 )
#define PRINTER_NOTIFY_FIELD_TOTAL_PAGES ( 0x16 )
#define PRINTER_NOTIFY_FIELD_PAGES_PRINTED ( 0x17 )
#define PRINTER_NOTIFY_FIELD_TOTAL_BYTES ( 0x18 )
#define PRINTER_NOTIFY_FIELD_BYTES_PRINTED ( 0x19 )
#define PRINTER_NOTIFY_FIELD_OBJECT_GUID ( 0x1a )
#define PRINTER_NOTIFY_FIELD_FRIENDLY_NAME ( 0x1b )
#endif
;

enum spoolss_NotifyType
#ifndef USE_UINT_ENUMS
 {
	PRINTER_NOTIFY_TYPE=0x00,
	JOB_NOTIFY_TYPE=0x01
}
#else
 { __donnot_use_enum_spoolss_NotifyType=0x7FFFFFFF}
#define PRINTER_NOTIFY_TYPE ( 0x00 )
#define JOB_NOTIFY_TYPE ( 0x01 )
#endif
;

union spoolss_Field {
	uint16_t field;/* [case(PRINTER_NOTIFY_TYPE)] */
}/* [noprint,nodiscriminant] */;

struct spoolss_NotifyOptionType {
	enum spoolss_NotifyType type;
	uint16_t u1;
	uint32_t u2;
	uint32_t u3;
	uint32_t count;
	union spoolss_Field *fields;/* [unique,switch_is(type),size_is(count)] */
};

/* bitmap spoolssNotifyOptionFlags */
#define PRINTER_NOTIFY_OPTIONS_REFRESH ( 0x00000001 )

struct spoolss_NotifyOption {
	uint32_t version;/* [value(2)] */
	uint32_t flags;
	uint32_t count;
	struct spoolss_NotifyOptionType *types;/* [unique,size_is(count)] */
};

struct spoolss_NotifyString {
	uint32_t size;
	const char *string;/* [unique,charset(UTF16),size_is(size/2)] */
};

enum spoolss_NotifyTable
#ifndef USE_UINT_ENUMS
 {
	NOTIFY_TABLE_DWORD=0x0001,
	NOTIFY_TABLE_STRING=0x0002,
	NOTIFY_TABLE_DEVMODE=0x0003,
	NOTIFY_TABLE_TIME=0x0004,
	NOTIFY_TABLE_SECURITYDESCRIPTOR=0x0005
}
#else
 { __donnot_use_enum_spoolss_NotifyTable=0x7FFFFFFF}
#define NOTIFY_TABLE_DWORD ( 0x0001 )
#define NOTIFY_TABLE_STRING ( 0x0002 )
#define NOTIFY_TABLE_DEVMODE ( 0x0003 )
#define NOTIFY_TABLE_TIME ( 0x0004 )
#define NOTIFY_TABLE_SECURITYDESCRIPTOR ( 0x0005 )
#endif
;

union spoolss_NotifyData {
	uint32_t integer[2];/* [case] */
	struct spoolss_NotifyString string;/* [case(2)] */
	struct spoolss_DevmodeContainer devmode;/* [case(3)] */
	struct spoolss_TimeCtr time;/* [case(4)] */
	struct sec_desc_buf sd;/* [case(5)] */
}/* [switch_type(uint32)] */;

struct spoolss_Notify {
	enum spoolss_NotifyType type;
	union spoolss_Field field;/* [switch_is(type)] */
	enum spoolss_NotifyTable variable_type;
	uint32_t job_id;
	union spoolss_NotifyData data;/* [switch_is(variable_type)] */
};

struct spoolss_NotifyInfo {
	uint32_t version;/* [value(2)] */
	uint32_t flags;
	uint32_t count;
	struct spoolss_Notify *notifies;/* [size_is(count)] */
};

union spoolss_ReplyPrinterInfo {
	struct spoolss_NotifyInfo *info0;/* [unique,case(0)] */
}/* [switch_type(uint32)] */;

/* bitmap spoolss_PrinterNotifyFlags */
#define PRINTER_NOTIFY_INFO_DISCARDED ( 0x00000001 )
#define PRINTER_NOTIFY_INFO_DISCARDNOTED ( 0x00010000 )
#define PRINTER_NOTIFY_INFO_COLOR_MISMATCH ( 0x00080000 )

struct spoolss_UserLevel1 {
	uint32_t size;
	const char *client;/* [unique,charset(UTF16)] */
	const char *user;/* [unique,charset(UTF16)] */
	uint32_t build;
	enum spoolss_MajorVersion major;
	enum spoolss_MinorVersion minor;
	enum spoolss_ProcessorArchitecture processor;
};

struct spoolss_UserLevel2 {
	uint32_t not_used;
};

struct spoolss_UserLevel3 {
	uint32_t size;
	uint32_t flags;
	uint32_t size2;
	const char *client;/* [unique,charset(UTF16)] */
	const char *user;/* [unique,charset(UTF16)] */
	uint32_t build;
	enum spoolss_MajorVersion major;
	enum spoolss_MinorVersion minor;
	enum spoolss_ProcessorArchitecture processor;
	uint64_t reserved;
};

union spoolss_UserLevel {
	struct spoolss_UserLevel1 *level1;/* [unique,case] */
	struct spoolss_UserLevel2 *level2;/* [unique,case(2)] */
	struct spoolss_UserLevel3 *level3;/* [unique,case(3)] */
}/* [switch_type(uint32)] */;

struct spoolss_UserLevelCtr {
	uint32_t level;
	union spoolss_UserLevel user_info;/* [switch_is(level)] */
};

/* bitmap spoolss_AccessRights */
#define SERVER_ACCESS_ADMINISTER ( 0x00000001 )
#define SERVER_ACCESS_ENUMERATE ( 0x00000002 )
#define PRINTER_ACCESS_ADMINISTER ( 0x00000004 )
#define PRINTER_ACCESS_USE ( 0x00000008 )
#define JOB_ACCESS_ADMINISTER ( 0x00000010 )
#define JOB_ACCESS_READ ( 0x00000020 )

struct spoolss_PrinterEnumValues {
	const char * value_name;/* [relative,flag(LIBNDR_FLAG_STR_NULLTERM)] */
	uint32_t value_name_len;/* [value(2*strlen_m_term(value_name))] */
	enum winreg_Type type;
	union spoolss_PrinterData *data;/* [relative,subcontext_size(r->data_length),subcontext(0),switch_is(type)] */
	uint32_t data_length;/* [value(ndr_size_spoolss_PrinterData(data,type,ndr->iconv_convenience,ndr->flags))] */
}/* [relative_base,gensize,public] */;

/* bitmap spoolss_DeleteDriverFlags */
#define DPD_DELETE_UNUSED_FILES ( 0x00000001 )
#define DPD_DELETE_SPECIFIC_VERSION ( 0x00000002 )
#define DPD_DELETE_ALL_FILES ( 0x00000004 )

enum spoolss_PortProtocol
#ifndef USE_UINT_ENUMS
 {
	PROTOCOL_RAWTCP_TYPE=1,
	PROTOCOL_LPR_TYPE=2
}
#else
 { __donnot_use_enum_spoolss_PortProtocol=0x7FFFFFFF}
#define PROTOCOL_RAWTCP_TYPE ( 1 )
#define PROTOCOL_LPR_TYPE ( 2 )
#endif
;

struct spoolss_PortData1 {
	const char *portname;/* [charset(UTF16)] */
	uint32_t version;/* [value(0x00000001)] */
	enum spoolss_PortProtocol protocol;
	uint32_t size;/* [value(sizeof(r))] */
	uint32_t reserved;
	const char *hostaddress;/* [charset(UTF16)] */
	const char *snmpcommunity;/* [charset(UTF16)] */
	uint32_t dblspool;
	const char *queue;/* [charset(UTF16)] */
	const char *ip_address;/* [charset(UTF16)] */
	const char *hardware_address;/* [charset(UTF16)] */
	const char *device_type;/* [charset(UTF16)] */
	uint32_t port_number;
	uint32_t snmp_enabled;
	uint32_t snmp_dev_index;
}/* [public] */;

struct spoolss_PortData2 {
	const char *portname;/* [charset(UTF16)] */
	uint32_t version;/* [value(0x00000002)] */
	enum spoolss_PortProtocol protocol;
	uint32_t size;/* [value(sizeof(r))] */
	uint32_t reserved;
	const char *hostaddress;/* [charset(UTF16)] */
	const char *snmpcommunity;/* [charset(UTF16)] */
	uint32_t dblspool;
	const char *queue;/* [charset(UTF16)] */
	const char *device_type;/* [charset(UTF16)] */
	uint32_t port_number;
	uint32_t snmp_enabled;
	uint32_t snmp_dev_index;
	uint32_t port_monitor_mib_index;
}/* [public] */;

struct spoolss_MonitorUi {
	const char * dll_name;/* [flag(LIBNDR_FLAG_STR_NULLTERM)] */
}/* [public] */;

/* bitmap spoolss_AddPrinterDriverExFlags */
#define APD_STRICT_UPGRADE ( 0x00000001 )
#define APD_STRICT_DOWNGRADE ( 0x00000002 )
#define APD_COPY_ALL_FILES ( 0x00000004 )
#define APD_COPY_NEW_FILES ( 0x00000008 )
#define APD_COPY_FROM_DIRECTORY ( 0x00000010 )
#define APD_DONT_COPY_FILES_TO_CLUSTER ( 0x00001000 )
#define APD_COPY_TO_ALL_SPOOLERS ( 0x00002000 )
#define APD_RETURN_BLOCKING_STATUS_CODE ( 0x00010000 )


struct _spoolss_EnumPrinters {
	struct {
		uint32_t flags;
		const char *server;/* [unique,charset(UTF16)] */
		uint32_t level;
		DATA_BLOB *buffer;/* [unique] */
		uint32_t offered;
	} in;

	struct {
		DATA_BLOB *info;/* [unique] */
		uint32_t *needed;/* [ref] */
		uint32_t *count;/* [ref] */
		WERROR result;
	} out;

};


struct __spoolss_EnumPrinters {
	struct {
		uint32_t level;
		uint32_t count;
	} in;

	struct {
		union spoolss_PrinterInfo *info;/* [switch_is(level)] */
	} out;

};


struct spoolss_EnumPrinters {
	struct {
		uint32_t flags;
		const char *server;/* [unique,charset(UTF16)] */
		uint32_t level;
		DATA_BLOB *buffer;/* [unique] */
		uint32_t offered;
	} in;

	struct {
		uint32_t *count;/* [ref] */
		union spoolss_PrinterInfo **info;/* [ref,switch_is(level),size_is(,*count)] */
		uint32_t *needed;/* [ref] */
		WERROR result;
	} out;

};


struct spoolss_OpenPrinter {
	struct {
		const char *printername;/* [unique,charset(UTF16)] */
		const char *datatype;/* [unique,charset(UTF16)] */
		struct spoolss_DevmodeContainer devmode_ctr;
		uint32_t access_mask;
	} in;

	struct {
		struct policy_handle *handle;/* [ref] */
		WERROR result;
	} out;

};


struct spoolss_SetJob {
	struct {
		struct policy_handle *handle;/* [ref] */
		uint32_t job_id;
		struct spoolss_JobInfoContainer *ctr;/* [unique] */
		enum spoolss_JobControl command;
	} in;

	struct {
		WERROR result;
	} out;

};


struct spoolss_GetJob {
	struct {
		struct policy_handle *handle;/* [ref] */
		uint32_t job_id;
		uint32_t level;
		DATA_BLOB *buffer;/* [unique] */
		uint32_t offered;
	} in;

	struct {
		union spoolss_JobInfo *info;/* [unique,subcontext_size(offered),subcontext(4),switch_is(level)] */
		uint32_t *needed;/* [ref] */
		WERROR result;
	} out;

};


struct _spoolss_EnumJobs {
	struct {
		struct policy_handle *handle;/* [ref] */
		uint32_t firstjob;
		uint32_t numjobs;
		uint32_t level;
		DATA_BLOB *buffer;/* [unique] */
		uint32_t offered;
	} in;

	struct {
		DATA_BLOB *info;/* [unique] */
		uint32_t *needed;/* [ref] */
		uint32_t *count;/* [ref] */
		WERROR result;
	} out;

};


struct __spoolss_EnumJobs {
	struct {
		uint32_t level;
		uint32_t count;
	} in;

	struct {
		union spoolss_JobInfo *info;/* [switch_is(level)] */
	} out;

};


struct spoolss_EnumJobs {
	struct {
		struct policy_handle *handle;/* [ref] */
		uint32_t firstjob;
		uint32_t numjobs;
		uint32_t level;
		DATA_BLOB *buffer;/* [unique] */
		uint32_t offered;
	} in;

	struct {
		uint32_t *count;/* [ref] */
		union spoolss_JobInfo **info;/* [ref,switch_is(level),size_is(,*count)] */
		uint32_t *needed;/* [ref] */
		WERROR result;
	} out;

};


struct spoolss_AddPrinter {
	struct {
		WERROR result;
	} out;

};


struct spoolss_DeletePrinter {
	struct {
		struct policy_handle *handle;/* [ref] */
	} in;

	struct {
		WERROR result;
	} out;

};


struct spoolss_SetPrinter {
	struct {
		struct policy_handle *handle;/* [ref] */
		struct spoolss_SetPrinterInfoCtr *info_ctr;/* [ref] */
		struct spoolss_DevmodeContainer *devmode_ctr;/* [ref] */
		struct sec_desc_buf *secdesc_ctr;/* [ref] */
		enum spoolss_PrinterControl command;
	} in;

	struct {
		WERROR result;
	} out;

};


struct spoolss_GetPrinter {
	struct {
		struct policy_handle *handle;/* [ref] */
		uint32_t level;
		DATA_BLOB *buffer;/* [unique] */
		uint32_t offered;
	} in;

	struct {
		union spoolss_PrinterInfo *info;/* [unique,subcontext_size(offered),subcontext(4),switch_is(level)] */
		uint32_t *needed;/* [ref] */
		WERROR result;
	} out;

};


struct spoolss_AddPrinterDriver {
	struct {
		const char *servername;/* [unique,charset(UTF16)] */
		struct spoolss_AddDriverInfoCtr *info_ctr;/* [ref] */
	} in;

	struct {
		WERROR result;
	} out;

};


struct _spoolss_EnumPrinterDrivers {
	struct {
		const char *server;/* [unique,charset(UTF16)] */
		const char *environment;/* [unique,charset(UTF16)] */
		uint32_t level;
		DATA_BLOB *buffer;/* [unique] */
		uint32_t offered;
	} in;

	struct {
		DATA_BLOB *info;/* [unique] */
		uint32_t *needed;/* [ref] */
		uint32_t *count;/* [ref] */
		WERROR result;
	} out;

};


struct __spoolss_EnumPrinterDrivers {
	struct {
		uint32_t level;
		uint32_t count;
	} in;

	struct {
		union spoolss_DriverInfo *info;/* [switch_is(level)] */
	} out;

};


struct spoolss_EnumPrinterDrivers {
	struct {
		const char *server;/* [unique,charset(UTF16)] */
		const char *environment;/* [unique,charset(UTF16)] */
		uint32_t level;
		DATA_BLOB *buffer;/* [unique] */
		uint32_t offered;
	} in;

	struct {
		uint32_t *count;/* [ref] */
		union spoolss_DriverInfo **info;/* [ref,switch_is(level),size_is(,*count)] */
		uint32_t *needed;/* [ref] */
		WERROR result;
	} out;

};


struct spoolss_GetPrinterDriver {
	struct {
		WERROR result;
	} out;

};


struct spoolss_GetPrinterDriverDirectory {
	struct {
		const char *server;/* [unique,charset(UTF16)] */
		const char *environment;/* [unique,charset(UTF16)] */
		uint32_t level;
		DATA_BLOB *buffer;/* [unique] */
		uint32_t offered;
	} in;

	struct {
		union spoolss_DriverDirectoryInfo *info;/* [unique,subcontext_size(offered),subcontext(4),switch_is(level)] */
		uint32_t *needed;/* [ref] */
		WERROR result;
	} out;

};


struct spoolss_DeletePrinterDriver {
	struct {
		const char *server;/* [unique,charset(UTF16)] */
		const char *architecture;/* [charset(UTF16)] */
		const char *driver;/* [charset(UTF16)] */
	} in;

	struct {
		WERROR result;
	} out;

};


struct spoolss_AddPrintProcessor {
	struct {
		const char *server;/* [unique,charset(UTF16)] */
		const char *architecture;/* [charset(UTF16)] */
		const char *path_name;/* [charset(UTF16)] */
		const char *print_processor_name;/* [charset(UTF16)] */
	} in;

	struct {
		WERROR result;
	} out;

};


struct _spoolss_EnumPrintProcessors {
	struct {
		const char *servername;/* [unique,charset(UTF16)] */
		const char *environment;/* [unique,charset(UTF16)] */
		uint32_t level;
		DATA_BLOB *buffer;/* [unique] */
		uint32_t offered;
	} in;

	struct {
		DATA_BLOB *info;/* [unique] */
		uint32_t *needed;/* [ref] */
		uint32_t *count;/* [ref] */
		WERROR result;
	} out;

};


struct __spoolss_EnumPrintProcessors {
	struct {
		uint32_t level;
		uint32_t count;
	} in;

	struct {
		union spoolss_PrintProcessorInfo *info;/* [switch_is(level)] */
	} out;

};


struct spoolss_EnumPrintProcessors {
	struct {
		const char *servername;/* [unique,charset(UTF16)] */
		const char *environment;/* [unique,charset(UTF16)] */
		uint32_t level;
		DATA_BLOB *buffer;/* [unique] */
		uint32_t offered;
	} in;

	struct {
		uint32_t *count;/* [ref] */
		union spoolss_PrintProcessorInfo **info;/* [ref,switch_is(level),size_is(,*count)] */
		uint32_t *needed;/* [ref] */
		WERROR result;
	} out;

};


struct spoolss_GetPrintProcessorDirectory {
	struct {
		const char *server;/* [unique,charset(UTF16)] */
		const char *environment;/* [unique,charset(UTF16)] */
		uint32_t level;
		DATA_BLOB *buffer;/* [unique] */
		uint32_t offered;
	} in;

	struct {
		union spoolss_PrintProcessorDirectoryInfo *info;/* [unique,subcontext_size(offered),subcontext(4),switch_is(level)] */
		uint32_t *needed;/* [ref] */
		WERROR result;
	} out;

};


struct spoolss_StartDocPrinter {
	struct {
		struct policy_handle *handle;/* [ref] */
		uint32_t level;
		union spoolss_DocumentInfo info;/* [switch_is(level)] */
	} in;

	struct {
		uint32_t *job_id;/* [ref] */
		WERROR result;
	} out;

};


struct spoolss_StartPagePrinter {
	struct {
		struct policy_handle *handle;/* [ref] */
	} in;

	struct {
		WERROR result;
	} out;

};


struct spoolss_WritePrinter {
	struct {
		struct policy_handle *handle;/* [ref] */
		DATA_BLOB data;
		uint32_t _data_size;/* [value(r->in.data.length)] */
	} in;

	struct {
		uint32_t *num_written;/* [ref] */
		WERROR result;
	} out;

};


struct spoolss_EndPagePrinter {
	struct {
		struct policy_handle *handle;/* [ref] */
	} in;

	struct {
		WERROR result;
	} out;

};


struct spoolss_AbortPrinter {
	struct {
		struct policy_handle *handle;/* [ref] */
	} in;

	struct {
		WERROR result;
	} out;

};


struct spoolss_ReadPrinter {
	struct {
		struct policy_handle *handle;/* [ref] */
		uint32_t data_size;
	} in;

	struct {
		uint8_t *data;/* [ref,size_is(data_size)] */
		uint32_t *_data_size;/* [ref] */
		WERROR result;
	} out;

};


struct spoolss_EndDocPrinter {
	struct {
		struct policy_handle *handle;/* [ref] */
	} in;

	struct {
		WERROR result;
	} out;

};


struct spoolss_AddJob {
	struct {
		struct policy_handle *handle;/* [ref] */
		uint32_t level;
		uint32_t offered;
		uint8_t *buffer;/* [unique,size_is(offered)] */
	} in;

	struct {
		uint32_t *needed;/* [ref] */
		uint8_t *buffer;/* [unique,size_is(offered)] */
		WERROR result;
	} out;

};


struct spoolss_ScheduleJob {
	struct {
		struct policy_handle *handle;/* [ref] */
		uint32_t jobid;
	} in;

	struct {
		WERROR result;
	} out;

};


struct _spoolss_GetPrinterData {
	struct {
		struct policy_handle *handle;/* [ref] */
		const char *value_name;/* [charset(UTF16)] */
		uint32_t offered;
	} in;

	struct {
		enum winreg_Type *type;/* [ref] */
		DATA_BLOB *data;/* [ref] */
		uint32_t *needed;/* [ref] */
		WERROR result;
	} out;

};


struct __spoolss_GetPrinterData {
	struct {
		enum winreg_Type type;
	} in;

	struct {
		union spoolss_PrinterData *data;/* [ref,switch_is(type)] */
	} out;

};


struct spoolss_GetPrinterData {
	struct {
		struct policy_handle *handle;/* [ref] */
		const char *value_name;/* [charset(UTF16)] */
		uint32_t offered;
	} in;

	struct {
		enum winreg_Type *type;/* [ref] */
		union spoolss_PrinterData *data;/* [subcontext_size(offered),ref,subcontext(4),switch_is(*type)] */
		uint32_t *needed;/* [ref] */
		WERROR result;
	} out;

};


struct _spoolss_SetPrinterData {
	struct {
		struct policy_handle *handle;/* [ref] */
		const char *value_name;/* [charset(UTF16)] */
		enum winreg_Type type;
		DATA_BLOB data;
		uint32_t _offered;
	} in;

	struct {
		WERROR result;
	} out;

};


struct __spoolss_SetPrinterData {
	struct {
		enum winreg_Type type;
	} in;

	struct {
		union spoolss_PrinterData *data;/* [ref,switch_is(type)] */
	} out;

};


struct spoolss_SetPrinterData {
	struct {
		struct policy_handle *handle;/* [ref] */
		const char *value_name;/* [charset(UTF16)] */
		enum winreg_Type type;
		union spoolss_PrinterData data;/* [subcontext(4),switch_is(type)] */
		uint32_t _offered;/* [value(ndr_size_spoolss_PrinterData(&data,type,ndr->iconv_convenience,flags))] */
	} in;

	struct {
		WERROR result;
	} out;

};


struct spoolss_WaitForPrinterChange {
	struct {
		WERROR result;
	} out;

};


struct spoolss_ClosePrinter {
	struct {
		struct policy_handle *handle;/* [ref] */
	} in;

	struct {
		struct policy_handle *handle;/* [ref] */
		WERROR result;
	} out;

};


struct spoolss_AddForm {
	struct {
		struct policy_handle *handle;/* [ref] */
		uint32_t level;
		union spoolss_AddFormInfo info;/* [switch_is(level)] */
	} in;

	struct {
		WERROR result;
	} out;

};


struct spoolss_DeleteForm {
	struct {
		struct policy_handle *handle;/* [ref] */
		const char *form_name;/* [charset(UTF16)] */
	} in;

	struct {
		WERROR result;
	} out;

};


struct spoolss_GetForm {
	struct {
		struct policy_handle *handle;/* [ref] */
		const char *form_name;/* [charset(UTF16)] */
		uint32_t level;
		DATA_BLOB *buffer;/* [unique] */
		uint32_t offered;
	} in;

	struct {
		union spoolss_FormInfo *info;/* [unique,subcontext_size(offered),subcontext(4),switch_is(level)] */
		uint32_t *needed;/* [ref] */
		WERROR result;
	} out;

};


struct spoolss_SetForm {
	struct {
		struct policy_handle *handle;/* [ref] */
		const char *form_name;/* [charset(UTF16)] */
		uint32_t level;
		union spoolss_AddFormInfo info;/* [switch_is(level)] */
	} in;

	struct {
		WERROR result;
	} out;

};


struct _spoolss_EnumForms {
	struct {
		struct policy_handle *handle;/* [ref] */
		uint32_t level;
		DATA_BLOB *buffer;/* [unique] */
		uint32_t offered;
	} in;

	struct {
		DATA_BLOB *info;/* [unique] */
		uint32_t *needed;/* [ref] */
		uint32_t *count;/* [ref] */
		WERROR result;
	} out;

};


struct __spoolss_EnumForms {
	struct {
		uint32_t level;
		uint32_t count;
	} in;

	struct {
		union spoolss_FormInfo *info;/* [switch_is(level)] */
	} out;

};


struct spoolss_EnumForms {
	struct {
		struct policy_handle *handle;/* [ref] */
		uint32_t level;
		DATA_BLOB *buffer;/* [unique] */
		uint32_t offered;
	} in;

	struct {
		uint32_t *count;/* [ref] */
		union spoolss_FormInfo **info;/* [ref,switch_is(level),size_is(,*count)] */
		uint32_t *needed;/* [ref] */
		WERROR result;
	} out;

};


struct _spoolss_EnumPorts {
	struct {
		const char *servername;/* [unique,charset(UTF16)] */
		uint32_t level;
		DATA_BLOB *buffer;/* [unique] */
		uint32_t offered;
	} in;

	struct {
		DATA_BLOB *info;/* [unique] */
		uint32_t *needed;/* [ref] */
		uint32_t *count;/* [ref] */
		WERROR result;
	} out;

};


struct __spoolss_EnumPorts {
	struct {
		uint32_t level;
		uint32_t count;
	} in;

	struct {
		union spoolss_PortInfo *info;/* [switch_is(level)] */
	} out;

};


struct spoolss_EnumPorts {
	struct {
		const char *servername;/* [unique,charset(UTF16)] */
		uint32_t level;
		DATA_BLOB *buffer;/* [unique] */
		uint32_t offered;
	} in;

	struct {
		uint32_t *count;/* [ref] */
		union spoolss_PortInfo **info;/* [ref,switch_is(level),size_is(,*count)] */
		uint32_t *needed;/* [ref] */
		WERROR result;
	} out;

};


struct _spoolss_EnumMonitors {
	struct {
		const char *servername;/* [unique,charset(UTF16)] */
		uint32_t level;
		DATA_BLOB *buffer;/* [unique] */
		uint32_t offered;
	} in;

	struct {
		DATA_BLOB *info;/* [unique] */
		uint32_t *needed;/* [ref] */
		uint32_t *count;/* [ref] */
		WERROR result;
	} out;

};


struct __spoolss_EnumMonitors {
	struct {
		uint32_t level;
		uint32_t count;
	} in;

	struct {
		union spoolss_MonitorInfo *info;/* [switch_is(level)] */
	} out;

};


struct spoolss_EnumMonitors {
	struct {
		const char *servername;/* [unique,charset(UTF16)] */
		uint32_t level;
		DATA_BLOB *buffer;/* [unique] */
		uint32_t offered;
	} in;

	struct {
		uint32_t *count;/* [ref] */
		union spoolss_MonitorInfo **info;/* [ref,switch_is(level),size_is(,*count)] */
		uint32_t *needed;/* [ref] */
		WERROR result;
	} out;

};


struct spoolss_AddPort {
	struct {
		const char *server_name;/* [unique,charset(UTF16)] */
		uint32_t unknown;
		const char *monitor_name;/* [charset(UTF16)] */
	} in;

	struct {
		WERROR result;
	} out;

};


struct spoolss_ConfigurePort {
	struct {
		WERROR result;
	} out;

};


struct spoolss_DeletePort {
	struct {
		WERROR result;
	} out;

};


struct spoolss_CreatePrinterIC {
	struct {
		WERROR result;
	} out;

};


struct spoolss_PlayGDIScriptOnPrinterIC {
	struct {
		WERROR result;
	} out;

};


struct spoolss_DeletePrinterIC {
	struct {
		WERROR result;
	} out;

};


struct spoolss_AddPrinterConnection {
	struct {
		WERROR result;
	} out;

};


struct spoolss_DeletePrinterConnection {
	struct {
		WERROR result;
	} out;

};


struct spoolss_PrinterMessageBox {
	struct {
		WERROR result;
	} out;

};


struct spoolss_AddMonitor {
	struct {
		WERROR result;
	} out;

};


struct spoolss_DeleteMonitor {
	struct {
		WERROR result;
	} out;

};


struct spoolss_DeletePrintProcessor {
	struct {
		WERROR result;
	} out;

};


struct spoolss_AddPrintProvidor {
	struct {
		WERROR result;
	} out;

};


struct spoolss_DeletePrintProvidor {
	struct {
		WERROR result;
	} out;

};


struct _spoolss_EnumPrintProcDataTypes {
	struct {
		const char *servername;/* [unique,charset(UTF16)] */
		const char *print_processor_name;/* [unique,charset(UTF16)] */
		uint32_t level;
		DATA_BLOB *buffer;/* [unique] */
		uint32_t offered;
	} in;

	struct {
		DATA_BLOB *info;/* [unique] */
		uint32_t *needed;/* [ref] */
		uint32_t *count;/* [ref] */
		WERROR result;
	} out;

};


struct __spoolss_EnumPrintProcDataTypes {
	struct {
		uint32_t level;
		uint32_t count;
	} in;

	struct {
		union spoolss_PrintProcDataTypesInfo *info;/* [switch_is(level)] */
	} out;

};


struct spoolss_EnumPrintProcDataTypes {
	struct {
		const char *servername;/* [unique,charset(UTF16)] */
		const char *print_processor_name;/* [unique,charset(UTF16)] */
		uint32_t level;
		DATA_BLOB *buffer;/* [unique] */
		uint32_t offered;
	} in;

	struct {
		uint32_t *count;/* [ref] */
		union spoolss_PrintProcDataTypesInfo **info;/* [ref,switch_is(level),size_is(,*count)] */
		uint32_t *needed;/* [ref] */
		WERROR result;
	} out;

};


struct spoolss_ResetPrinter {
	struct {
		struct policy_handle *handle;/* [ref] */
		const char *data_type;/* [unique,charset(UTF16)] */
		struct spoolss_DevmodeContainer *devmode_ctr;/* [ref] */
	} in;

	struct {
		WERROR result;
	} out;

};


struct spoolss_GetPrinterDriver2 {
	struct {
		struct policy_handle *handle;/* [ref] */
		const char *architecture;/* [unique,charset(UTF16)] */
		uint32_t level;
		DATA_BLOB *buffer;/* [unique] */
		uint32_t offered;
		uint32_t client_major_version;
		uint32_t client_minor_version;
	} in;

	struct {
		union spoolss_DriverInfo *info;/* [unique,subcontext_size(offered),subcontext(4),switch_is(level)] */
		uint32_t *needed;/* [ref] */
		uint32_t *server_major_version;/* [ref] */
		uint32_t *server_minor_version;/* [ref] */
		WERROR result;
	} out;

};


struct spoolss_FindFirstPrinterChangeNotification {
	struct {
		WERROR result;
	} out;

};


struct spoolss_FindNextPrinterChangeNotification {
	struct {
		WERROR result;
	} out;

};


struct spoolss_FindClosePrinterNotify {
	struct {
		struct policy_handle *handle;/* [ref] */
	} in;

	struct {
		WERROR result;
	} out;

};


struct spoolss_RouterFindFirstPrinterChangeNotificationOld {
	struct {
		WERROR result;
	} out;

};


struct spoolss_ReplyOpenPrinter {
	struct {
		const char *server_name;/* [charset(UTF16)] */
		uint32_t printer_local;
		enum winreg_Type type;
		uint32_t bufsize;/* [range(0,512)] */
		uint8_t *buffer;/* [unique,size_is(bufsize)] */
	} in;

	struct {
		struct policy_handle *handle;/* [ref] */
		WERROR result;
	} out;

};


struct spoolss_RouterReplyPrinter {
	struct {
		struct policy_handle *handle;/* [ref] */
		uint32_t flags;
		uint32_t bufsize;/* [range(0,512)] */
		uint8_t *buffer;/* [unique,size_is(bufsize)] */
	} in;

	struct {
		WERROR result;
	} out;

};


struct spoolss_ReplyClosePrinter {
	struct {
		struct policy_handle *handle;/* [ref] */
	} in;

	struct {
		struct policy_handle *handle;/* [ref] */
		WERROR result;
	} out;

};


struct spoolss_AddPortEx {
	struct {
		WERROR result;
	} out;

};


struct spoolss_RouterFindFirstPrinterChangeNotification {
	struct {
		WERROR result;
	} out;

};


struct spoolss_SpoolerInit {
	struct {
		WERROR result;
	} out;

};


struct spoolss_ResetPrinterEx {
	struct {
		WERROR result;
	} out;

};


struct spoolss_RemoteFindFirstPrinterChangeNotifyEx {
	struct {
		struct policy_handle *handle;/* [ref] */
		uint32_t flags;
		uint32_t options;
		const char *local_machine;/* [unique,charset(UTF16)] */
		uint32_t printer_local;
		struct spoolss_NotifyOption *notify_options;/* [unique] */
	} in;

	struct {
		WERROR result;
	} out;

};


struct spoolss_RouterReplyPrinterEx {
	struct {
		struct policy_handle *handle;/* [ref] */
		uint32_t color;
		uint32_t flags;
		uint32_t reply_type;
		union spoolss_ReplyPrinterInfo info;/* [switch_is(reply_type)] */
	} in;

	struct {
		uint32_t *reply_result;/* [ref] */
		WERROR result;
	} out;

};


struct spoolss_RouterRefreshPrinterChangeNotify {
	struct {
		struct policy_handle *handle;/* [ref] */
		uint32_t change_low;
		struct spoolss_NotifyOption *options;/* [unique] */
	} in;

	struct {
		struct spoolss_NotifyInfo **info;/* [ref] */
		WERROR result;
	} out;

};


struct spoolss_44 {
	struct {
		WERROR result;
	} out;

};


struct spoolss_OpenPrinterEx {
	struct {
		const char *printername;/* [unique,charset(UTF16)] */
		const char *datatype;/* [unique,charset(UTF16)] */
		struct spoolss_DevmodeContainer devmode_ctr;
		uint32_t access_mask;
		uint32_t level;
		union spoolss_UserLevel userlevel;/* [switch_is(level)] */
	} in;

	struct {
		struct policy_handle *handle;/* [ref] */
		WERROR result;
	} out;

};


struct spoolss_AddPrinterEx {
	struct {
		const char *server;/* [unique,charset(UTF16)] */
		struct spoolss_SetPrinterInfoCtr *info_ctr;/* [ref] */
		struct spoolss_DevmodeContainer *devmode_ctr;/* [ref] */
		struct sec_desc_buf *secdesc_ctr;/* [ref] */
		struct spoolss_UserLevelCtr *userlevel_ctr;/* [ref] */
	} in;

	struct {
		struct policy_handle *handle;/* [ref] */
		WERROR result;
	} out;

};


struct spoolss_47 {
	struct {
		WERROR result;
	} out;

};


struct spoolss_EnumPrinterData {
	struct {
		struct policy_handle *handle;/* [ref] */
		uint32_t enum_index;
		uint32_t value_offered;
		uint32_t data_offered;
	} in;

	struct {
		const char *value_name;/* [charset(UTF16),size_is(value_offered/2)] */
		uint32_t *value_needed;/* [ref] */
		enum winreg_Type *type;/* [ref] */
		uint8_t *data;/* [ref,flag(LIBNDR_PRINT_ARRAY_HEX),size_is(data_offered)] */
		uint32_t *data_needed;/* [ref] */
		WERROR result;
	} out;

};


struct spoolss_DeletePrinterData {
	struct {
		struct policy_handle *handle;/* [ref] */
		const char *value_name;/* [charset(UTF16)] */
	} in;

	struct {
		WERROR result;
	} out;

};


struct spoolss_4a {
	struct {
		WERROR result;
	} out;

};


struct spoolss_4b {
	struct {
		WERROR result;
	} out;

};


struct spoolss_4c {
	struct {
		WERROR result;
	} out;

};


struct spoolss_SetPrinterDataEx {
	struct {
		struct policy_handle *handle;/* [ref] */
		const char *key_name;/* [charset(UTF16)] */
		const char *value_name;/* [charset(UTF16)] */
		enum winreg_Type type;
		uint8_t *buffer;/* [ref,size_is(offered)] */
		uint32_t offered;
	} in;

	struct {
		WERROR result;
	} out;

};


struct spoolss_GetPrinterDataEx {
	struct {
		struct policy_handle *handle;/* [ref] */
		const char *key_name;/* [charset(UTF16)] */
		const char *value_name;/* [charset(UTF16)] */
		uint32_t offered;
	} in;

	struct {
		enum winreg_Type *type;/* [ref] */
		uint8_t *buffer;/* [ref,size_is(offered)] */
		uint32_t *needed;/* [ref] */
		WERROR result;
	} out;

};


struct _spoolss_EnumPrinterDataEx {
	struct {
		struct policy_handle *handle;/* [ref] */
		const char *key_name;/* [charset(UTF16)] */
		uint32_t offered;
	} in;

	struct {
		DATA_BLOB info;
		uint32_t *needed;/* [ref] */
		uint32_t *count;/* [ref] */
		WERROR result;
	} out;

};


struct __spoolss_EnumPrinterDataEx {
	struct {
		uint32_t count;
	} in;

	struct {
		struct spoolss_PrinterEnumValues *info;
	} out;

};


struct spoolss_EnumPrinterDataEx {
	struct {
		struct policy_handle *handle;/* [ref] */
		const char *key_name;/* [charset(UTF16)] */
		uint32_t offered;
	} in;

	struct {
		uint32_t *count;/* [ref] */
		struct spoolss_PrinterEnumValues **info;/* [ref,size_is(,*count)] */
		uint32_t *needed;/* [ref] */
		WERROR result;
	} out;

};


struct spoolss_EnumPrinterKey {
	struct {
		struct policy_handle *handle;/* [ref] */
		const char *key_name;/* [charset(UTF16)] */
		uint32_t offered;
	} in;

	struct {
		const char ** *key_buffer;/* [subcontext_size(offered),ref,subcontext(0),flag(LIBNDR_FLAG_STR_NULLTERM)] */
		uint32_t *needed;/* [ref] */
		WERROR result;
	} out;

};


struct spoolss_DeletePrinterDataEx {
	struct {
		struct policy_handle *handle;/* [ref] */
		const char *key_name;/* [charset(UTF16)] */
		const char *value_name;/* [charset(UTF16)] */
	} in;

	struct {
		WERROR result;
	} out;

};


struct spoolss_DeletePrinterKey {
	struct {
		struct policy_handle *handle;/* [ref] */
		const char *key_name;/* [charset(UTF16)] */
	} in;

	struct {
		WERROR result;
	} out;

};


struct spoolss_53 {
	struct {
		WERROR result;
	} out;

};


struct spoolss_DeletePrinterDriverEx {
	struct {
		const char *server;/* [unique,charset(UTF16)] */
		const char *architecture;/* [charset(UTF16)] */
		const char *driver;/* [charset(UTF16)] */
		uint32_t delete_flags;
		uint32_t version;
	} in;

	struct {
		WERROR result;
	} out;

};


struct spoolss_55 {
	struct {
		WERROR result;
	} out;

};


struct spoolss_56 {
	struct {
		WERROR result;
	} out;

};


struct spoolss_57 {
	struct {
		WERROR result;
	} out;

};


struct spoolss_XcvData {
	struct {
		struct policy_handle *handle;/* [ref] */
		const char *function_name;/* [charset(UTF16)] */
		DATA_BLOB in_data;
		uint32_t _in_data_length;/* [value(r->in.in_data.length)] */
		uint32_t out_data_size;
		uint32_t *status_code;/* [ref] */
	} in;

	struct {
		uint8_t *out_data;/* [ref,size_is(out_data_size)] */
		uint32_t *needed;/* [ref] */
		uint32_t *status_code;/* [ref] */
		WERROR result;
	} out;

};


struct spoolss_AddPrinterDriverEx {
	struct {
		const char *servername;/* [unique,charset(UTF16)] */
		struct spoolss_AddDriverInfoCtr *info_ctr;/* [ref] */
		uint32_t flags;
	} in;

	struct {
		WERROR result;
	} out;

};


struct spoolss_5a {
	struct {
		WERROR result;
	} out;

};


struct spoolss_5b {
	struct {
		WERROR result;
	} out;

};


struct spoolss_5c {
	struct {
		WERROR result;
	} out;

};


struct spoolss_5d {
	struct {
		WERROR result;
	} out;

};


struct spoolss_5e {
	struct {
		WERROR result;
	} out;

};


struct spoolss_5f {
	struct {
		WERROR result;
	} out;

};

#endif /* _HEADER_spoolss */
