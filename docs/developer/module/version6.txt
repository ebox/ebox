==============================
Version 0.6: adding a submodel
==============================

In this version we will add support for *Server Aliases*. These aliases allow the user to configure the same virtual host with more than one name.This way we can have the same virtual host for  *foo.com* and *www.foo.com*.

To support this feature we will introduce the concept of *submodel*. A *submodel* is just a normal model whose data is related to a parent model. For example, we will be creating a new model called *serverAliases*, this model will behave as a *submodel*. For every virtual host, that is, for every row in the *VirtualHosts* model we will associate another model of *serverAliases*. Or to put it another way, every row of *VirtualHosts* has many *serverAliases*. In practice this means a few things, amongst them: configuration data is stored in a tree or directory structure, so submodel data will live under its parent model directory.

* VirtualHost: foo.com

    * serverAliases: www.foo.com
    * serverAliases: www1.foo.com

* VirtualHost: bar.com

    * serverAliases: www.bar.com
    * serverAliases: www1.bar.com

Data model
==========

Our new model is going to be pretty simple: *ServerAliases* will just be a list of domains. As usual, *emoddev* will allow us to create this model easily::

    ebox-moddev-model --main-class Apache2 --name ServerAliases --field name:DomainName --model table

The above command will create our model in *src/EBox/Model/ServerAliases*. We will just make a minor change to the file, changing the *printableTableName* from *ServerAliases* to *Aliases*. The code should look like this::

    #!perl
    # Copyright
    #
    # This program is free software; you can redistribute it and/or modify
    # it under the terms of the GNU General Public License, version 2, as
    # published by the Free Software Foundation.
    #
    # This program is distributed in the hope that it will be useful,
    # but WITHOUT ANY WARRANTY; without even the implied warranty of
    # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    # GNU General Public License for more details.
    #
    # You should have received a copy of the GNU General Public License
    # along with this program; if not, write to the Free Software
    # Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

    # Class: EBox::Apache2::Model::ServerAliases
    #   
    #   TODO: Document class
    #

    package EBox::Apache2::Model::ServerAliases;

    use EBox::Gettext;
    use EBox::Validate qw(:all);

    use EBox::Types::DomainName;

    use strict;
    use warnings;

    use base 'EBox::Model::DataTable';

    sub new 
    {
            my $class = shift;
            my %parms = @_;

            my $self = $class->SUPER::new(@_);
            bless($self, $class);

            return $self;
    }


    sub _table
    {

        my @tableHead = 
        ( 
            new EBox::Types::DomainName(
                'fieldName' => 'name',
                'printableName' => __('name'),
                'size' => '8',
                'unique' => 1,
                'editable' => 1
            ),
        );
        my $dataTable = 
        { 
            'tableName' => 'ServerAliases',
            'printableTableName' => __('Aliases'),
            'modelDomain' => 'Apache2',
            'defaultActions' => ['add', 'del', 'editField', 'changeView' ],
            'tableDescription' => \@tableHead,
            'help' => *, # FIXME
        };

        return $dataTable;
    }

    1;

The next step is making the *VirtualHosts* model use our recently created *ServerAliases*. To do so we will have to modify *src/EBox/Model/VirtualHosts.pm*. First of all, we will have to use a new type *EBox::Types::HasMany* which is used to store *submodels*::

    #!perl
    use EBox::Types::HasMany;

Now we will have to modify the model to actually use this new type and the *ServerAliases* model::

    #!perl
            new EBox::Types::HasMany(
                 'fieldName' => 'aliases',
                 'printableName' => __('Aliases'),
                 'foreignModel' => 'ServerAliases',
                 'view' => '/ebox/Apache2/View/ServerAliases',
            ),

Pay attention to the attribute *foreignModel* that is used to set our *EBox::Types::HasMany* type to use our model, and *view* to set the URL to access the model view.

The whole file should be::

    #!perl

    package EBox::Apache2::Model::VirtualHosts;

    use EBox::Gettext;
    use EBox::Validate qw(:all);

    use EBox::Types::DomainName;
    use EBox::Types::HasMany;

    use strict;
    use warnings;

    use base 'EBox::Model::DataTable';

    sub new 
    {
            my $class = shift;
            my %parms = @_;

            my $self = $class->SUPER::new(@_);
            bless($self, $class);

            return $self;
    }


    sub _table
    {

        my @tableHead = 
        ( 
            new EBox::Types::DomainName(
                'fieldName' => 'name',
                'printableName' => __('Virtual Host'),
                'size' => '8',
                'unique' => 1,
                'editable' => 1
            ),
        new EBox::Types::HasMany(
             'fieldName' => 'aliases',
             'printableName' => __('Aliases'),
             'foreignModel' => 'ServerAliases',
             'view' => '/ebox/Apache2/View/ServerAliases',
        ),
        );
        my $dataTable = 
        { 
            'tableName' => 'VirtualHosts',
            'printableTableName' => __('Virtual Hosts'),
            'modelDomain' => 'Apache2',
            'defaultActions' => ['add', 'del', 'editField', 'changeView' ],
            'tableDescription' => \@tableHead,
            'help' => *, # FIXME
        'orderedBy' => 'name',
        'enableProperty' => 1,
        };

        return $dataTable;
    }

    1;

Build and install the package. Click on *Apache2->Virtual Hosts* and you will see a new field called *Aliases* where you can click on.

.. image:: images/virtual-host-3.png

Fetching the stored values
==========================

Let's make a simple script to retrieve the stored values. Note that there is something important to learn here: the way we deal with *submodels* when it comes to fetching data.

Here is the script::

    #!perl
    use EBox;
    use EBox::Model::ModelManager;
    use EBox::Global;

    # This is the very first thing we always have to do from external scripts
    EBox::init();

    #EBox::Global->modInstance('apache2')->_setVirtualHosts();
    # Instance ModelManager
    my $manager = EBox::Model::ModelManager->instance();

    # Gently ask for the model called apache2/VirtualHosts
    my $modules= $manager->model('apache2/VirtualHosts');

    # Iterates over the rows and print info
    for my $row (@{$modules->rows()}) {
            my $name = $row->valueByName('name');
            my $enabled = $row->valueByName('enabled');
            print "Module: $name enabled $enabled\n";
            print "\tAliases:\n";
            for my $aliasRow (@{$row->subModel('aliases')->rows()}) {
                    print "\t\t" . $aliasRow->valueByName('name') . "\n";
            }

    }

Note that within the first loop we iterate over the virtual hosts, and the inner loop is used to iterate over each alias of the virtual host. To be able to fetch the *aliases* rows we call the method *subModel('aliases')* from the a virtual host row, *subModel* receives the name of a *EBox::Types::HasMany* field which exists in a given model and does the magic to return a submodel which can be used just like you were using a normal model; that's why we call *rows()*.

Setting the Apache configuration
================================

We will have to slightly modify the template used to generate the virtual host configuration to write the server aliases. Our template *stubs/virtual-host.conf.mas* should look like this now::

    <%args>
    $name
    @alias
    </%args>
    <VirtualHost *:80>
            ServerAdmin webmaster@localhost

            ServerName <% $name %>

    %  for my $aliasName (@alias) {
            ServerAlias <% $aliasName %>
    %  }

            DocumentRoot /var/www/<% $name %>
            <Directory />
                    Options FollowSymLinks
                    AllowOverride None
            </Directory>
            <Directory /var/www/<% $name %>>
                    Options Indexes FollowSymLinks MultiViews
                    AllowOverride None
                    Order allow,deny
                    allow from all
            </Directory>

            ErrorLog /var/log/apache2/error.log

            # Possible values include: debug, info, notice, warn, error, crit,
            # alert, emerg.
            LogLevel warn

            CustomLog /var/log/apache2/access.log combined
    </VirtualHost>

Note the changes: we have added a new parameter *@alias*, an array used to receive all the aliases for this virtual host, and a loop to iterate over them and write *ServerAlias name*.

If we add a new parameter to the template, we need to modify *src/EBox/Apache2.pm* to set and pass the *@alias* parameter properly. We modify the *_setVirtualHosts* method to do this, using the *subModel* method to iterate over the aliases and set each position in the array::

    #!perl
    # Method: _setVirtualHosts
    #
    #       This method is used to set the virtual hosts
    #
    sub _setVirtualHosts
    {
            my ($self) = @_;

            my $mgr = EBox::Model::ModelManager->instance();
            my $model = $mgr->model('apache2/VirtualHosts');

            # Iterate over the virtual host table
            for my $row (@{$model->rows()}) {
                    my $name = $row->valueByName('name');
                    my $enabled = $row->valueByName('enabled');
                    my @alias;
                    for my $aliasRow (@{$row->subModel('aliases')->rows()}) {
                            my $aliasName = $aliasRow->valueByName('name');
                            push (@alias, $aliasName);
                    }
                    my @params = (name => $name, alias => \@alias);
                    my $outputFile = "/etc/apache2/sites-available/ebox-$name";
                    # Write virtual host configuration file
                    $self->writeConfFile($outputFile, 'apache2/virtual-host.conf.mas', \@params);

                    # Create the document root directory if it does not exist
                    my $docRoot = "/var/www/$name";
                    unless ( -d $docRoot ) {
                            EBox::Sudo::root("mkdir $docRoot");
                    }
                    # Enable or disable the virtual host depending on the user configuration
                    if ($enabled) {
                            EBox::Sudo::root("a2ensite ebox-$name");
                    } else {
                            EBox::Sudo::root("a2dissite ebox-$name");
                    }
            }
    }
