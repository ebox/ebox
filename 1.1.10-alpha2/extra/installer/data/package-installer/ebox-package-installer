#!/usr/bin/perl
# Copyright (C) 2009 eBox Technologies S.L.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License, version 2, as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

use warnings;
use strict;

use EBox::Gettext;

EBox::Gettext::settextdomain('ebox-package-installer');

#########################
# -- eBox package data --
#########################

my @TASKS = (
    ['ebox-gateway', __('Firewall, proxy, traffic shaping..')],
    ['ebox-security', __('Firewall, mail and content filter, VPN, IDS')],
    ['ebox-infrastructure', __('DHCP, DNS, NTP, web server')],
    ['ebox-office', __('File sharing, printers, groupware')],
    ['ebox-communication', __('Mail, mailfiler, VoIP, instant messaging')],
);

my @PACKAGES = (
    ['ebox-network', __('Networking')],
    ['ebox-firewall', __('Firewall and redirections')],
    ['ebox-trafficshaping', __('Traffic shaping')],
    ['ebox-samba', __('File sharing, PDC')],
    ['ebox-dns', __('Domain Name Service')],
    ['ebox-dhcp', __('DHCP server')],
    ['ebox-squid', __('HTTP Proxy and content filter')],
    ['ebox-usersandgroups', __('LDAP users and groups management')],
    ['ebox-software', __('System and eBox package managmenet')],
    ['ebox-ntp', __('Network Time Protocol server')],
    ['ebox-printers', __('Printing service')],
    ['ebox-jabber', __('XMPP server')],
    ['ebox-openvpn', __('VPN server')],
    ['ebox-webserver', __('Web Server')],
    ['ebox-mail', __('Mail system: SMTP, POP3, IMAP')],
    ['ebox-mailfilter', __('Anti-virus, Anti-spam, transparent POP proxy')],
    ['ebox-monitor', __('Memory, CPU load, disk usage, temperature')],
    ['ebox-antivirus', __('Anti-virus')],
    ['ebox-egroupware', __('Calendar sharing, address book, webmail')],
    ['ebox-ids', __('Intrusion Detection System')],
    ['ebox-asterisk', __('VoIP and PBX')],
);

#################
# -- constants --
#################

my $SELECTION_FILE = 'selection';
my $INSTALL_FILES = '/var/tmp';

my $INSTALLER_TITLE = __('eBox Installer');
my $SIMPLE_METHOD = __('simple');
my $SIMPLE_DESC = __('Select sets of packages');
my $ADVANCED_METHOD = __('advanced');
my $ADVANCED_DESC = __('Select packages manually');
my $TASK_TITLE = __('Select eBox tasks to install');
my $TASK_MESSAGE = __('Choose a profile');
my $PACKAGE_TITLE = __('Select eBox packages to install');
my $PACKAGE_MESSAGE = __('Choose eBox packages individually');
my $IFACES_TITLE = __('Select external interfaces');
my $IFACES_MESSAGE = __('Strict default policies are applied to incoming traffic through external interfaces');
my $PASS_TITLE = __('Enter password for eBox interface');
my $PASS_MSG = __('You will need to use this password to log into the eBox interface');
my $PASS_CONFIRM_TITLE = __('Confirm password for eBox interface');
my $PASS_CONFIRM_MSG = '';
my $MAIL_TITLE = __('Mail configuration');
my $MAIL_MESSAGE = __('Enter default virtual mail domain');
my $FINAL_TITLE = __('Installation finished');
my $FINAL_MESSAGE = __('Now you can access the eBox interface at ' .
                       'https://YOUR_IP/');

my $LOG = ($ENV{LOG} or '/tmp/ebox-installer.log');

my $WHIPTAIL_ARGS = "--clear --backtitle \"$INSTALLER_TITLE\"";

########################
# -- global variables --
########################

my $CNF_password;
my @CNF_selectedIfaces;
my $CNF_domain = undef;

############################
# -- installation process --
############################

my @packages = selectPackagesMenu();
installPackages(@packages);

# Apache is the most basic module, if it's not installed correctly,
# we assume that the installation has failed
if (system ("$INSTALL_FILES/ebox-module-installed apache") != 0) {
        showDialog(__('Error'), __('Installation failed.') . "\n\n" .
                   __("Check contents of $LOG to see what happened"));
        exit (1);
}

# Choose password for eBox interface
$CNF_password = askPassword();

# Choose interfaces to mark as external if ebox-network is installed
if (system ("$INSTALL_FILES/ebox-module-installed network") == 0) {
    @CNF_selectedIfaces = selectIfacesMenu();
}

# Choose mail domain if mail module is installed
if (system ("$INSTALL_FILES/ebox-module-installed mail") == 0) {
    $CNF_domain = askMailDomain();
}

preconfiguration();

# Show instalation complete message with access instructions
showDialog($FINAL_TITLE, $FINAL_MESSAGE);

###########################
# -- installer functions --
###########################

sub installPackages # (packages)
{
    my (@packages) = @_;

    my $packageList = join (' ', @packages);

    # Get number of packages to install
    my $num = `LANG=C apt-get install -s $packageList | grep ^Inst | wc -l`;
    chomp($num);

    my $aptCmd = 'LANG=C apt-get install -y --force-yes';
    my $message = __('Installing eBox packages...');
    my $whipCmd = "whiptail $WHIPTAIL_ARGS --gauge \"$message\" 7 64 0";
    my $gaugeCmd = "$INSTALL_FILES/ebox-apt-parse $num | $whipCmd";

    $ENV{DEBIAN_FRONTEND} = 'noninteractive';
    my $ret = system ("$aptCmd $packageList 2>&1 | tee -a $LOG | $gaugeCmd");

    if ($ret != 0) {
        showDialog('Error', 'Installation failed. ' .
                   "Check contents of $LOG to see what happened");
        exit (1);
    }
}

sub selectPackagesMenu # returns array
{
    my @selection;
    my $option = '';
    my $ret = 0;
    do {
        unless ($ret == -1) {
            $option = showMenu();
        }
        if ($option eq $SIMPLE_METHOD) {
            $ret = showChecklist($TASK_TITLE, $TASK_MESSAGE, @TASKS);
        } else {
            $ret = showChecklist($PACKAGE_TITLE, $PACKAGE_MESSAGE, @PACKAGES);
        }
        if ($ret == 0) {
            @selection = arrayFromFile($SELECTION_FILE);
            unlink ($SELECTION_FILE);
            if (scalar (@selection) == 0) {
                showDialog(__('Error'),
                           __('You must select at least one package.'));
                $ret = -1;
            }
        }
    } while ($ret != 0);

    return @selection;
}

sub selectIfacesMenu # returns array
{
    my $ifaceList = `$INSTALL_FILES/ebox-get-ifaces`;
    my @ifaces = split (' ', $ifaceList);
    my @ifacePairs = map ( [ $_, '' ] , @ifaces);

    my @selection;
    my $option = '';
    my $ret = 0;
    do {
        $ret = showChecklist($IFACES_TITLE, $IFACES_MESSAGE, @ifacePairs);
        if ($ret == 0) {
            @selection = arrayFromFile($SELECTION_FILE);
            unlink ($SELECTION_FILE);
        }
    } while ($ret != 0);

    return @selection;
}

sub askPassword # returns string
{
    my $password;
    my $confirm;
    do {
        $password = showPasswordDialog($PASS_TITLE, $PASS_MSG);
        $confirm = showPasswordDialog($PASS_CONFIRM_TITLE, $PASS_CONFIRM_MSG);

        if ($password ne $confirm) {
            showDialog(__('Error'), __("Passwords don't match"));
        }
    } until ($password eq $confirm);

    return $password;
}

sub askMailDomain # returns string
{
    my $domain;
    do {
        $domain = showInputDialog($MAIL_TITLE, $MAIL_MESSAGE);

        # TODO: domain validation?
    } until ($domain);

    return $domain;
}

sub preconfiguration
{
    # Workaround buggy squid without FQDN
    if (-f '/etc/squid/squid.conf') {
        system('echo "visible_hostname localhost" >> /etc/squid/squid.conf');
        system('/etc/init.d/squid stop > /dev/null 2>&1');
        system('/etc/init.d/squid start > /dev/null 2>&1');
   }
    my $message = __('Preconfiguring eBox packages. This might take a while...');
    my $whipCmd = "whiptail $WHIPTAIL_ARGS --gauge \"$message\" 7 64 0";
    my $PROGRESS;
    open ($PROGRESS, '|-', $whipCmd);

    # Enable eBox modules
    system("$INSTALL_FILES/enable-all-modules.pl >> $LOG 2>&1");

    print $PROGRESS "33\n";

    # load LANG variable with default locale
    my @lines = arrayFromFile('/etc/default/locale');
    my $LANG = (split ('"', $lines[0]))[1];
    $ENV{LANG} = $LANG;

    print $PROGRESS "40\n";

    # Append eBox support languages to generate to current supported
    # locales
    my $LOCALES_FILE='/var/lib/locales/supported.d/local';
    my $TMP='/tmp/local.tmp';
    system("cat /var/tmp/locale.gen $LOCALES_FILE > $TMP");
    system("sort $TMP | uniq > $LOCALES_FILE");
    unlink($TMP);

    print $PROGRESS "50\n";

    # Regenerate locales to update the new messages from eBox
    system("/usr/sbin/locale-gen >> $LOG 2>&1");

    print $PROGRESS "60\n";

    system("/usr/share/ebox/ebox-set-locale $LANG >> $LOG 2>&1");

    print $PROGRESS "70\n";

    # Run ebox-software in order to update packages list (which is done
    # nightly)
    #system('ebox-software');

    # eBox initial setup
    system ("$INSTALL_FILES/ebox-set-password $CNF_password >> $LOG 2>&1");

    print $PROGRESS "80\n";

    foreach my $iface (@CNF_selectedIfaces) {
        system ("$INSTALL_FILES/ebox-set-external $iface >> $LOG 2>&1");
    }

    print $PROGRESS "90\n";

    if (defined $CNF_domain) {
        system ("$INSTALL_FILES/ebox-set-maildomain $CNF_domain >> $LOG 2>&1");
    }

    print $PROGRESS "100\n";

    close ($PROGRESS);
}

#################################
# -- whiptail helper functions --
#################################

sub showMenu
{
    my $title = __('Choose package selection method');
    my $message = __('Select the method that better fits your needs');

    my $size = 2;
    my $height = $size + 7;

    my $arg1 = "$SIMPLE_METHOD \"$SIMPLE_DESC\"";
    my $arg2 = "$ADVANCED_METHOD \"$ADVANCED_DESC\"";

    my $max_len = max(length($arg1), length($arg2), length ($title));
    my $width = 7 + $max_len;

    my $command = "whiptail $WHIPTAIL_ARGS --nocancel --title \"$title\" " .
                  "--menu \"$message\" $height $width $size $arg1 $arg2";

    my $file = 'selected_option';
    system ("$command 2> $file");
    my @lines = arrayFromFile($file);
    unlink ($file);

    return $lines[0];
}

sub showChecklist # (title, message, options)
{
    my ($title, $message, @options) = @_;

    my $size = scalar (@options);
    if ($size > 14) {
        $size = 14;
    }
    my $height = $size + 7;

    my $option_args;
    my $max_len = 0;
    foreach my $optionPair (@options) {
        my $option = $optionPair->[0];
        my $description = $optionPair->[1];
        my $arg = "$option \"$description\"";
        if (length ($arg) > $max_len) {
            $max_len = length ($arg);
        }
        $option_args .= "$arg 0 ";
    }
    if (length ($title) > $max_len) {
        $max_len = length ($title);
    }
    my $width = 12 + $max_len;

    my $command = "whiptail $WHIPTAIL_ARGS --separate-output " .
                  "--title \"$title\" " .
                  "--checklist \"$message\" $height $width $size $option_args";

    system ("$command 2> $SELECTION_FILE");
}

sub showInputDialog # (title, message)
{
    my ($title, $message) = @_;

    showGenericInputDialog('inputbox', $title, $message);
}

sub showPasswordDialog # (title, message)
{
    my ($title, $message) = @_;

    showGenericInputDialog('passwordbox', $title, $message);
}

sub showGenericInputDialog # (type, title, message) returns input string
{
    my ($type, $title, $message) = @_;

    my $height = 8;
    my $width = 7 + length($title);

    my $command = "whiptail $WHIPTAIL_ARGS --separate-output " .
                  "--title \"$title\" " .
                  "--$type \"$message\" $height $width";

    my @selection;
    do {
        system ("$command 2> $SELECTION_FILE");
        @selection = arrayFromFile($SELECTION_FILE);
        unlink ($SELECTION_FILE);
    } until (scalar(@selection) > 0);

    return $selection[0];
}

sub showDialog # (title, message)
{
    my ($title, $message) = @_;

    my $size = 1;
    my $height = $size + 7;
    my $width = length($message) + 7;

    my $command = "whiptail $WHIPTAIL_ARGS --title \"$title\" " .
                  "--msgbox \"$message\" $height $width";

    system ($command);
}

##############################
# -- other helper functions --
##############################

sub arrayFromFile # (filename)
{
    my ($filename) = @_;

    my $fh;
    open ($fh, '<', "$INSTALL_FILES/$filename") or
        open ($fh, '<', $filename) or
            die "Can't read $filename file";
    my @array = <$fh>;
    chomp (@array);
    close ($fh);

    return @array;
}

sub max # (val1, val2, ...) returns value
{
    my $max = 0;
    map { $max = $_ if ($_ > $max) } @_;
    return $max;
}

