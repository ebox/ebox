# Copyright (C) 2005  Warp Networks S.L., DBS Servicios Informaticos S.L.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License, version 2, as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

package EBox::DNS;

use strict;
use warnings;

use base qw(EBox::Module::Service
            EBox::Model::ModelProvider
            EBox::Model::CompositeProvider
            );

use EBox::Objects;
use EBox::Gettext;
use EBox::Service;
use EBox::Menu::Item;
use EBox::Sudo qw( :all );
use EBox::Validate qw( :all );
use EBox::DNS::Model::DomainTable;
use EBox::DNS::Model::HostnameTable;
use EBox::DNS::Model::AliasTable;
use EBox::DNS::Model::DNSComposite;
use EBox::Model::ModelManager;

use constant BIND9CONFDIR => "@BIND9CONFDIR@";
use constant BIND9CONFFILE => "@BIND9CONF@";
use constant BIND9CONFOPTIONSFILE => "@BIND9CONFOPTIONS@";
use constant BIND9CONFLOCALFILE => "@BIND9CONFLOCAL@";
use constant BIND9INIT     => "@BIND9_INIT@";
use constant PIDFILE       => "/var/run/bind/run/named.pid";
use constant NAMESERVER_HOST => 'ns';

sub _create
{
    my $class = shift;
    my $self = $class->SUPER::_create(name => 'dns',
            domain => 'ebox-dns',
            printableName => __('DNS'),
            @_);

    bless($self, $class);
    return $self;
}

# Method: modelClasses
#
# Overrides:
#
#       <EBox::ModelProvider::modelClasses>
#
sub modelClasses
{
    return [
            {
             class      => 'EBox::DNS::Model::DomainTable',
             parameters => [
                            directory => 'domainTable',
                           ],
            },
            {
             class      => 'EBox::DNS::Model::HostnameTable',
             parameters => [
                            directory => 'hostnameTable',
                           ],
            },
            {
             class      => 'EBox::DNS::Model::AliasTable',
             parameters => [
                            directory => 'aliasTable',
                           ],
            },
            'EBox::DNS::Model::MailExchanger',
            'EBox::DNS::Model::NameServer',
           ];
}

# Method: _exposedMethods
#
#
# Overrides:
#
#      <EBox::Model::ModelProvider::_exposedMethods>
#
# Returns:
#
#      hash ref - the list of the exposes method in a hash ref every
#      component
#
sub _exposedMethods
  {

      my %exposedMethods =
        (
         'addDomain1' => { action   => 'add',
                          path     => [ 'DomainTable' ],
                        },
         'removeDomain' => { action  => 'del',
                             path    => [ 'DomainTable' ],
                             indexes => [ 'domain' ],
                           },
         'addHostName' => { action  => 'add',
                            path    => [ 'DomainTable', 'hostnames' ],
                            indexes => [ 'domain' ],
                          },
         'setIP'       => { action   => 'set',
                            path     => [ 'DomainTable', 'hostnames' ],
                            indexes  => [ 'domain', 'hostname' ],
                            selector => [ 'ipaddr' ]
                          },
         'changeName'  => { action   => 'set',
                            path     => [ 'DomainTable', 'hostnames' ],
                            indexes  => [ 'domain', 'hostname' ],
                            selector => [ 'hostname' ]
                          },
         'getHostNameByName' => { action   => 'get',
                                  path     => [ 'DomainTable', 'hostnames' ],
                                  indexes  => [ 'domain', 'hostname' ],
                                },
         'getHostNameByIP' => { action  => 'get',
                                path    => [ 'DomainTable', 'hostnames' ],
                                indexes => [ 'domain', 'ipaddr' ],
                              },
         'removeHostName' => { action => 'del',
                               path   => [ 'DomainTable', 'hostnames' ],
                               indexes => [ 'domain', 'hostname' ],
                             },
         'addAlias'    => { action  => 'add',
                            path    => [ 'DomainTable', 'hostnames', 'alias' ],
                            indexes => [ 'domain', 'hostname' ],
                          },
         'removeAlias' => { action  => 'del',
                            path    => [ 'DomainTable', 'hostnames', 'alias' ],
                            indexes => [ 'domain', 'hostname', 'alias' ],
                          },
         'changeAlias' => { action   => 'set',
                            path     => [ 'DomainTable', 'hostnames', 'alias' ],
                            indexes  => [ 'domain', 'hostname', 'alias' ],
                            selector => [ 'alias' ],
                          },
         'addMailExchanger' => { action  => 'add',
                                 path    => [ 'DomainTable', 'mailExchangers' ],
                                 indexes => [ 'domain' ],
                               },
         # Both last two methods are only working with custom MX records
         'changeMXPreference' => { action  => 'set',
                                   path    => [ 'DomainTable', 'mailExchangers' ],
                                   indexes => [ 'domain', 'hostName' ],
                                   selector => [ 'preference' ]
                                 },
         'removeMailExchanger' => { action  => 'del',
                                    path    => [ 'DomainTable', 'mailExchangers' ],
                                    indexes => [ 'domain', 'hostName' ],
                                  },
         );

      return \%exposedMethods;

  }

# Method: compositeClasses
#
# Overrides:
#
#    <EBox::Model::CompositeProvider::compositeClasses>
#
sub compositeClasses
{
 return [
         'EBox::DNS::Model::DNSComposite',
        ];
}

# Method: addDomain
#
#  Add new domain to table model
#
# Parameters:
#
#       Check <EBox::DNS::Model::DomainTable> for details
#
sub addDomain
{
 my ($self, $domainData) = @_;

 my $domainModel = EBox::Model::ModelManager->instance()->model('DomainTable');

 $domainModel->addDomain($domainData);
}

# Method: domains
#  returns an array with all domain names
#
# Returns:
#
#  Array ref - containing hash refs with the following elements:
#
#           name - String the domain's name
#           ipaddr - String the domain's ip address
#
sub domains
{
    my $self = shift;
    my @array;

    my $model = EBox::Model::ModelManager->instance()->model('DomainTable');

    foreach my $id (@{$model->ids()})
    {
        my $row = $model->row($id);
        my $domaindata;

        $domaindata->{'name'} = $row->valueByName('domain');
	$domaindata->{'ipaddr'} = $row->valueByName('ipaddr');

        push(@array, $domaindata);
    }

    return \@array;
}

# Method: _hostnames
#  returns an array with all hostname structure
#
# Parameters:
#   model to iterate over
#
# Returns:
#  array ref with this structure data:
#  
#  'name': hostname
#  'ip': ip address of hostname
#  'aliases': an array ref returned by <EBox::DNS::aliases> method.
#  
sub _hostnames
{
    my ($self, $model) = @_;
    my @array;

    foreach my $id (@{$model->ids()})
    {
        my $hostname = $model->row($id);
        my $hostdata;

        $hostdata->{'name'} = $hostname->valueByName('hostname');
        $hostdata->{'ip'} = $hostname->valueByName('ipaddr');
        $hostdata->{'aliases'} = 
            $self->aliases($hostname->subModel('alias'));

        push(@array, $hostdata);
    }

    return \@array;
}

# Method: _formatMailExchangers
#
#       Format the mail exchangers to write configuration settings
#       properly. That is, custom MX records appends a full stop after
#       the type value.
#
# Parameters:
#
#       mailExchangers - model to iterate over 
#
#            hostName - String the host's name
#            id - String the row identifier
#            preference - Int the preference attribute
#            ownerDomain - if the hostname owns to the same domain.
#            custom - if the hostname is a foreign one
#
# Returns:
#
#   Array ref of hashes containing the following keys:
#
#      hostName
#       preference
sub _formatMailExchangers
{
    my ($self, $mailExchangers) = @_;

    my @mailExchangers;
    foreach my $id (@{$mailExchangers->ids()}) {
        my $mx = $mailExchangers->row($id);
        my $hostName = $mx->valueByName('hostName');
        if ($mx->elementByName('hostName')->selectedType() eq 'custom') {
            unless ( $hostName =~ m:\.$: ) {
                $hostName .= '.';
            }
        } else {
            $hostName = $mx->parentRow()
               ->subModel('hostnames')
               ->row($hostName)
               ->valueByName('hostname');
        }
        push (@mailExchangers, { 
                hostName => $hostName, 
                preference => $mx->valueByName('preference')
                });
    }
    return \@mailExchangers;
}

# Method: _formatNameServers
#
#       Format the name servers to write configuration settings
#       properly. That is, custom NS records appends a full stop after
#       the type value.
#
#       If it has none configured, it will configure the following:
#
#       @ NS 127.0.0.1 # If there is no hostname named NS
#       @ NS ns        # If there is a hostname whose name is 'ns'
#
# Parameters:
#
#       nameServers - model to iterate over
#
#            hostName - String the host's name
#            id - String the row identifier
#            ownerDomain - if the hostname owns to the same domain.
#            custom - if the hostname is a foreign one
#
#       hostnames   - model with hostnames for that domain
#
# Returns:
#
#   Array ref of the name servers to set on
#
sub _formatNameServers
{
    my ($self, $nameServers, $hostnames) = @_;

    my @nameservers;
    foreach my $id (@{$nameServers->ids()}) {
        my $ns = $nameServers->row($id);
        my $hostName = $ns->valueByName('hostName');
        if ($ns->elementByName('hostName')->selectedType() eq 'custom') {
            unless ( $hostName =~ m:\.$: ) {
                $hostName .= '.';
            }
        } else {
            $hostName = $ns->parentRow()
               ->subModel('hostnames')
               ->row($hostName)
               ->valueByName('hostname');
        }
        push (@nameservers, $hostName);
    }
    if ( @nameservers == 0 ) {
        # Look for any hostname whose name is 'ns'
        my $matchedId = $hostnames->findId(hostname => __PACKAGE__->NameserverHost());
        if ( defined($matchedId) ) {
            push(@nameservers, __PACKAGE__->NameserverHost());
        }
    }

    return \@nameservers;
}

# Method: getHostnames
#
#       Given a domain name, it returns an array ref of hostnames that
#       it contains.
#
# Parameters:
#
#       domain - String the domain's name
#
# Returns:
#
#       array ref - containing the same structure as
#       <EBox::DNS::hostnames> returns
#
sub getHostnames
{

    my ($self, $domain) = @_;

    my $domainRow = $self->model('DomainTable')->findRow(domain => $domain);
    unless ( defined($domainRow) ) {
        throw EBox::Exceptions::DataNotFound(data  => __('domain'),
                                             value => $domain);
    }

    return $self->_hostnames($domainRow->subModel('hostnames'));

}

# Method: aliases
#  returns an array with all alias structure of a hostname
#
# Parameters:
#   model to iterate over
#
# Returns:
#  array ref with this structure data:
#  
#  'name': alias name
#  
sub aliases
{
    my ($self, $model) = @_;
    my @array;

    foreach my $id (@{$model->ids()})
    {
        my $alias = $model->row($id);
        my $aliasdata;

        $aliasdata->{'name'} = $alias->valueByName('alias');

        push(@array, $aliasdata);
    }

    return \@array;
}

# Method: findAlias
#
#       Return the hostname which the alias refers to given a domain
#
# Parameters:
#
#       domainName - String the domain name
#
#       alias - String the alias name
#
# Returns:
#
#       String - the hostname which the alias refers to
#
# Exceptions:
#
#       <EBox::Exceptions::MissingArgument> - thrown if any compulsory
#       argument is missing
#
#       <EBox::Exceptions::DataNotFound> - thrown if the domain does
#       not exist or the alias does not exist
#
sub findAlias
{
    my ($self, $domainName, $alias) = @_;

    $domainName or throw EBox::Exceptions::MissingArgument('domainName');
    $alias or throw EBox::Exceptions::MissingArgument('alias');

    my $domModel = $self->model('DomainTable');
    $domModel->{cachedVersion} = 0;
    my $id = $domModel->find(domain => $domainName);
    unless ( defined($id)) {
        throw EBox::Exceptions::DataNotFound(data => 'domain',
                                             value => $domainName);
    }
    my $row = $domModel->row($id);
    foreach my $ids (@{$row->subModel('hostnames')->ids()}) {
        my $hostnameRow = $row->subModel('hostnames')->row($id);
        for my $aliasId (@{$hostnameRow->subModel('alias')->ids()}) {
            my $aliasRow = hostnameRow->subModel('alias')->row($aliasId);
            if ($alias eq $aliasRow->valueByName('alias')) {
                return $hostnameRow->valueByName('hostname');
            }
        }
    }

    throw EBox::Exceptions::DataNotFound(data  => 'alias',
                                         value => $alias);
}

# Method: NameserverHost
#
#       Return those host which is the nameserver for every domain. It
#       is a constant
#
# Returns:
#
#       String - the nameserver host name for every eBox defined
#       domain
#
sub NameserverHost
{
    return NAMESERVER_HOST;
}

# Method: _completeDomain
#
#  Return a structure with all required data to build bind db config files
#
# Parameters:
#
#  domain - String the domain's name
#
# Returns:
#
# hash ref - structure data with:
#
#  'name': domain name
#  'ipaddr': domain ip address
#  'hosts': an array ref returned by <EBox::DNS::_hostnames> method.
#  'mailExchangers' : an array ref returned by <EBox::DNS::_formatMailExchangers>
#  'nameServers' : an array ref returned by <EBox::DNS::_formatNameServers>
#
sub _completeDomain # (domain)
{
    my ($self, $domain) = @_;
    my $model = $self->model('DomainTable');
    my $domdata;

    my $row = $model->find(domain => $domain->{'name'});
    $domdata->{'name'} = $domain->{'name'};
    $domdata->{'ipaddr'} = $domain->{'ipaddr'};
    $domdata->{'hosts'} = $self->_hostnames(
            $row->subModel('hostnames'));

    my $subModel = $row->subModel('mailExchangers');
    $domdata->{'mailExchangers'} = $self->_formatMailExchangers($subModel);
    $domdata->{'nameServers'} = $self->_formatNameServers($row->subModel('nameServers'),
                                                          $row->subModel('hostnames'));

    return $domdata;
}

# Method: createHostDataArray
#  returns host and their alias info in a single hosts array ref.
#
# Parameters:
#  hostip: less significant ip address block of a host.
#  hostData: host and alias info
#
# Returns:
#  array ref
sub createHostDataArray
{
    my ($self, $hostip, $hostData) = @_;
    my @newHostsDataArray;

# Add host info
    my $newHostData;
    $newHostData->{'name'} = $hostData->{'name'};
    $newHostData->{'ip'} = $hostip;
    push(@newHostsDataArray, $newHostData);

# Add all alias info
    foreach my $aliasData (@{$hostData->{'aliases'}})
    {
        my $newHostDataFromAlias;
        $newHostDataFromAlias->{'name'} = $aliasData->{'name'};
        $newHostDataFromAlias->{'ip'} = $hostip;
        push(@newHostsDataArray, $newHostDataFromAlias);
    }

    return \@newHostsDataArray;
}

# Method: updateReversedData
#  updates or adds new item to the array data passed as parameters
#
# Parameters:
#  array ref that holds reversed info data
#  groupIDData structure to update or add
#
sub updateReversedData
{
    my ($self, $reversedData, $groupIPData) = @_;
# Try to find an previously added groupip item (from other domain)
    my $pos = -1;
    for(my $i = 0; $i < @{$reversedData}; $i++)
    {
        if($reversedData->[$i]->{'groupip'} eq $groupIPData->{'groupip'})
        {
            my $jpos = -1;
            for(my $j = 0; $j < @{$reversedData->[$i]->{'domain'}}; $j++)
            {
                if($reversedData->[$i]->{'domain'}->[$j]->{'name'}
                        eq $groupIPData->{'domain'}->{'name'})
                {
                    push(@{$reversedData->[$i]->{'domain'}->[$j]->{'hosts'}},
                            @{$groupIPData->{'domain'}->{'hosts'}});
                    $jpos = $j;
                    last;
                }
            }

            if($jpos < 0)
            {
                push(@{$reversedData->[$i]->{'domain'}}, 
                        $groupIPData->{'domain'});
            }
            $pos = $i;
            last;
        }
    }

    if($pos < 0)
    {
        my $item;
        $item->{'groupip'} = $groupIPData->{'groupip'};
        push(@{$item->{'domain'}}, $groupIPData->{'domain'});
        push(@{$reversedData}, $item);
    }
}

# Method: switchToReverseInfoData
#
#  returns a structure with all necesary data to build reverse db config
#  files.
#
# Parameters:
#
#  array ref structure returned by <EBox::DNS::_completeDomain>
#
# Returns:
#
#  array ref structure data with:
#
#  'groupip': ip range to define a zone file info
#  'domain': an array of hosts and domain data:
#  'name': domain name
#  'hosts': an array of hostnames and hostip:
#  'ip': less significant block of an ip address
#  'name': name of the host in the domain
#
sub switchToReverseInfoData
{
    my ($self, $info) = @_;
    my @reversedData;

    foreach my $domainData (@{$info})
    {
        my $domain = $domainData->{'name'};

        # Check for IP address in domain
        if ($domainData->{'ipaddr'}) {
            push(@{$domainData->{'hosts'}},
                 { 'name' => '', 'ip' => $domainData->{'ipaddr'} });
        }

        foreach my $hostData (@{$domainData->{'hosts'}})
        {
            my @ipblocks = split(/\./, $hostData->{'ip'});

            #Set group ip bind format (reverse order)
            my $groupip = join(".", $ipblocks[2], $ipblocks[1], $ipblocks[0]);
            my $hostip = $ipblocks[3];

            my $newDomainData;
            $newDomainData->{'name'} = $domain;
            $newDomainData->{'hosts'} = 
                $self->createHostDataArray($hostip, $hostData);

            my $groupIPData;
            $groupIPData->{'groupip'} = $groupip;
            $groupIPData->{'domain'} = $newDomainData;

            $self->updateReversedData(\@reversedData, $groupIPData);
        }
    }

    return \@reversedData;
}

# Method: usedFiles
#
# Override EBox::Module::Service::usedFiles
#
sub usedFiles
{
    my ($self) = @_;
    my $files = [{
            'file' => BIND9CONFFILE,
            'module' => 'dns',
            'reason' => 'main bind9 configuration file'
        },
       {
           'file' => BIND9CONFOPTIONSFILE,
           'module' => 'dns',
           'reason' => 'bind9 options configuration file'
       },
       {
           'file' => BIND9CONFLOCALFILE ,
           'module' => 'dns',
           'reason' => 'local bind9 configuration file'
       }
    ];


    my @domains = @{$self->domains()};

    my @domainData;
    foreach my $domain (@domains)
    {
        my $domdata = $self->_completeDomain($domain);
        push(@domainData, $domdata);
        my $file = BIND9CONFDIR . "/db." . $domdata->{'name'};
        push (@{$files},
                {
                'file' => $file,
                'module' => 'dns',
                'reason' => __x('configuration file for zone {zone}', 
                    zone => $file )
                });

    }

    my $reversedData = $self->switchToReverseInfoData(\@domainData);
    my @inaddrs;
    foreach my $reversedDataItem(@{$reversedData})
    {
        my $file = BIND9CONFDIR . "/db." . $reversedDataItem->{'groupip'};
        push (@{$files},
                {
                'file' => $file,
                'module' => 'dns',
                'reason' => 
                    __x('configuration file for reverse resolution zone {zone}'
                        , zone => $file )
                });

    }

    return $files;
}

# Method: enableActions 
#
#  Override EBox::Module::Service::enableActions
#
sub enableActions
{
    root(EBox::Config::share() . '/ebox-dns/ebox-dns-enable');
}

# Method: _daemons
#
#  Override <EBox::Module::Service::_daemons>
#
sub _daemons
{
    return [
        {
            'name' => 'ebox.bind9'
        }
    ];
}

# Method: enableService
#
# Overrides:
#
#  <EBox::Module::Service::enableService>
#
sub enableService
{
    my ($self, $status) = @_;

    $self->SUPER::enableService($status);
    $self->configureFirewall();    
}

# Method: _setConf
#
# Overrides:
#
#  <EBox::Module::Service::_setConf>
#
sub _setConf
{
    my $self = shift;
    my @array = ();

    $self->writeConfFile(BIND9CONFFILE, 
            "dns/named.conf.mas", 
            \@array);
    $self->writeConfFile(BIND9CONFOPTIONSFILE, 
            "dns/named.conf.options.mas", 
            \@array);

    my @domains = @{$self->domains()};

# push(@array, 'domains' => \@domains);
# $self->writeConfFile(BIND9CONFLOCALFILE, 
#    "dns/named.conf.local.mas", 
#    \@array);

# root("/bin/rm -rf " . BIND9CONFDIR . "/zones/");
# root("/bin/mkdir " . BIND9CONFDIR . "/zones/");

    my @domainData;
    foreach my $domain (@domains)
    {
        my $domdata = $self->_completeDomain($domain);
        push(@domainData, $domdata);

        my $file = BIND9CONFDIR . "/db." . $domdata->{'name'};
        @array = ();
        push(@array, 'domain' => $domdata);
        push(@array, 'nameserverHostname' => __PACKAGE__->NameserverHost());
        $self->writeConfFile($file,"dns/db.mas",\@array);
    }

    my $reversedData = $self->switchToReverseInfoData(\@domainData);

    my @inaddrs;
    foreach my $reversedDataItem(@{$reversedData})
    {
        my $file = BIND9CONFDIR . "/db." . $reversedDataItem->{'groupip'};
        push(@inaddrs, $reversedDataItem->{'groupip'});
        @array = ();
        push(@array, 'rdata' => $reversedDataItem);
        $self->writeConfFile($file, "dns/dbrev.mas", \@array);
    }

    push(@array, 'domains' => \@domains);
    push(@array, 'inaddrs' => \@inaddrs);
    $self->writeConfFile(BIND9CONFLOCALFILE,
            "dns/named.conf.local.mas",
            \@array);
}

sub configureFirewall
{
    my ($self) = @_;

    my $fw = EBox::Global->modInstance('firewall');

    if ($self->isEnabled()) {
        $fw->addOutputRule('udp', 53);
        $fw->addOutputRule('tcp', 53);
    } else {
        $fw->removeOutputRule('udp', 53);
        $fw->removeOutputRule('tcp', 53);
    }
}

# Method: menu
#
#       Overrides EBox::Module method.
#
sub menu
{
    my ($self, $root) = @_;
    $root->add(new EBox::Menu::Item('url' => 'DNS/View/DomainTable',
                                    'text' => $self->printableName(),
                                    'separator' => 'Infrastructure',
                                    'order' => 420));
}

sub logReportInfo
{
    my ($self) = @_;

    my $domains = @{$self->domains()};
    my $data = [
        {
            'table'  => 'dns_domains',
            'values' => {
                'domains' => $domains
            }
        }
    ];
    return $data;
}

sub consolidateReportInfoQueries
{
    return [
        {
            'target_table' => 'dns_domains_report',
            'query' => {
                'select' => 'domains',
                'from' => 'dns_domains'
            }
        }
    ];
}

# Method: report
#
# Overrides:
#   <EBox::Module::Base::report>
sub report
{
    my ($self, $beg, $end, $options) = @_;

    my $report = {};

    $report->{'domains'} = $self->runMonthlyQuery($beg, $end, {
        'select' => 'domains',
        'from' => 'dns_domains_report',
    }, { 'name' => 'domains' });

    return $report;
}

1;
