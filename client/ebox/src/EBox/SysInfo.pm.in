# Copyright (C) 2009 eBox Technologies S.L.
# Copyright (C) 2005 Warp Networks S.L., DBS Servicios Informaticos S.L.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License, version 2, as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

package EBox::SysInfo;

use strict;
use warnings;

use base qw(EBox::GConfModule EBox::Report::DiskUsageProvider);

use Sys::Hostname;
use Sys::CpuLoad;
use File::Slurp qw(read_file);
use Filesys::Df;

use EBox::Config;
use EBox::Gettext;
use EBox::Global;
use EBox::Dashboard::Widget;
use EBox::Dashboard::Section;
use EBox::Dashboard::List;
use EBox::Dashboard::Value;
use EBox::Dashboard::HTML;
use EBox::Menu::Item;
use EBox::Menu::Folder;
use EBox::Report::DiskUsage;
use EBox::Report::RAID;

use constant LATEST_VERSION => '/var/lib/ebox/latestversion';

sub _create
{
    my $class = shift;
    my $self = $class->SUPER::_create(name => 'sysinfo',
                                          printableName => __('System Information'),
                                          @_);
    $self->{version} = "1.3.16";

    bless($self, $class);
    return $self;
}


sub _facilitiesForDiskUsage
{
    my ($self, @params) = @_;
    return EBox::Backup->_facilitiesForDiskUsage(@params);
}

sub modulesWidget
{
    my ($self, $widget) = @_;
    my $section = new EBox::Dashboard::Section('status');
    $widget->add($section);

    my $global = EBox::Global->getInstance();
    my $typeClass = 'EBox::Module::Service';
    my %moduleStatus;
    for my $class (@{$global->modInstancesOfType($typeClass)}) {
        $class->addModuleStatus($section);
    }
}

sub generalWidget
{
    my ($self, $widget) = @_;
    my $section = new EBox::Dashboard::Section('info');
    $widget->add($section);
    my $time_command = "LC_TIME=" . EBox::locale() . " /bin/date";
    my $time = `$time_command`;

    my $version = $self->{version};
    my $lastVersion;
    open (my $fh, LATEST_VERSION);
    read ($fh, $lastVersion, 16);
    chomp($lastVersion);
    close ($fh);
    if ($lastVersion gt $version) {
        my $url =
           "http://trac.ebox-platform.com/wiki/Document/Documentation/Updates";
        my $available = __('available');
        $version .=
           " (<a target='_blank' href='$url'>$lastVersion $available</a>)";
    }

    $section->add(new EBox::Dashboard::Value(__("Time"), $time));
    $section->add(new EBox::Dashboard::Value(__("Hostname"), hostname));
    $section->add(new EBox::Dashboard::Value(__("Core version"), $version));
    $section->add(new EBox::Dashboard::Value(
        __("System load"), join(', ', Sys::CpuLoad::load)));
}

sub processesWidget
{
    my ($self, $widget) = @_;
    my $section = new EBox::Dashboard::Section('foo');
    $widget->add($section);
    my $titles = ['PID','Name'];
    my $ids = [];
    my @processes = `ps ax | grep -v PID| awk '{ print \$1, \$5 }'`;
    my $rows = {};
    for my $p (@processes) {
        chomp($p);
        my ($pid, $name) = split(' ', $p);
        my $foopid = 'a' . $pid;
        push(@{$ids}, $foopid);
        $rows->{$foopid} = [$pid,$name];
    }
    $section->add(new EBox::Dashboard::List(undef, $titles, $ids, $rows));
}

sub linksWidget
{
    my ($self, $widget) = @_;
    my $section = new EBox::Dashboard::Section('links');
    $widget->add($section);

    my $html = read_file(EBox::Config::share() . 'ebox/www/links-widget.html');
    $section->add(new EBox::Dashboard::HTML($html));
}

#
# Method: widgets
#
#   Overriden method that returns the widgets offered by this module
#
# Overrides:
#
#       <EBox::Module::widgets>
#
sub widgets
{

    my $widgets = {
        'modules' => {
            'title' => __("Module Status"),
            'widget' => \&modulesWidget,
            'default' => 1
        },
        'general' => {
            'title' => __("General Information"),
            'widget' => \&generalWidget,
            'default' => 1
        },
        'processes' => {
            'title' => __("Process List"),
            'widget' => \&processesWidget
        },
    };

    unless (EBox::Config::configkey('disable_links_widget') eq 'yes') {
        $widgets->{'links'} = {
            'title' => __("Support & Services"),
            'widget' => \&linksWidget,
            'default' => 1
        };
    }

    return $widgets;
}

sub addKnownWidget()
{
    my ($self,$wname) = @_;
    my $list = $self->st_get_list("known/widgets");
    push(@{$list},$wname);
    $self->st_set_list("known/widgets", "string", $list);
}

sub isWidgetKnown()
{
    my ($self, $wname) = @_;
    my $list = $self->st_get_list("known/widgets");
    my @results = grep(/^$wname$/,@{$list});
    if(@results) {
        return 1;
    } else {
        return undef;
    }
}

sub getDashboard()
{
    my ($self,$dashboard) = @_;
    return $self->st_get_list("$dashboard/widgets");
}

sub setDashboard()
{
    my ($self,$dashboard,$widgets) = @_;
    $self->st_set_list("$dashboard/widgets", "string", $widgets);
}

sub toggleElement()
{
    my ($self,$element) = @_;
    my $toggled = $self->st_get_bool("toggled/$element");
    $self->st_set_bool("toggled/$element",!$toggled);
}

sub toggledElements()
{
    my ($self) = @_;
    return $self->st_hash_from_dir("toggled");
}

#
# Method: menu
#
#   Overriden method that returns the core menu entries:
#
#   - Summary
#   - Save/Cancel
#   - Logout
#   - EBox/General
#   - EBox/Backup
#   - EBox/Halt
#   - EBox/Bug
sub menu
{
    my ($self, $root) = @_;

    $root->add(new EBox::Menu::Item('url' => 'Dashboard/Index',
                    'text' => __('Dashboard'),
                    'separator' => 'Core',
                    'order' => 10));

    $root->add(new EBox::Menu::Item('url' => 'ServiceModule/StatusView',
                    'text' => __('Module Status'),
                    'separator' => 'Core',
                    'order' => 20));


    my $folder = new EBox::Menu::Folder('name' => 'EBox',
                        'text' => __('System'),
                        'order' => 30);

    $folder->add(new EBox::Menu::Item('url' => 'EBox/General',
                      'text' => __('General')));

    $folder->add(new EBox::Menu::Item('url' => 'Report/DiskUsage',
                      'text' => __('Disk Usage')));

    $folder->add(new EBox::Menu::Item(
             'url' => 'Report/RAID',
             'text' => __('RAID'))
            );


    $folder->add(new EBox::Menu::Item('url' => 'EBox/Backup',
                      'text' => __('Backup')));

    $folder->add(new EBox::Menu::Item('url' => 'EBox/Halt',
                      'text' => __('Halt/Reboot')));

#   $folder->add(new EBox::Menu::Item('url' => 'EBox/Bug',
#                     'text' => __('Bug report')));



    $root->add($folder);
}

sub logReportInfo
{
    my ($self) = @_;

    my @data;

    my $fileSysS = EBox::Report::DiskUsage::partitionsFileSystems();
    foreach my $fileSys (keys %{$fileSysS}) {
        my $entry = {};
        $entry->{'table'} = 'sysinfo_disk_usage';
        $entry->{'values'} = {};
        my $mount = $fileSysS->{$fileSys}->{mountPoint};
        $entry->{'values'}->{'mountpoint'} = $mount;
        my $info = df($mount);
        $entry->{'values'}->{'used'} = $info->{'used'};
        $entry->{'values'}->{'free'} = $info->{'bavail'};
        push(@data, $entry)
    }
    return \@data;
}

sub consolidateReportInfoQueries
{
    return [
        {
            'target_table' => 'sysinfo_disk_usage_report',
            'query' => {
                'select' => 'mountpoint, used, free',
                'from' => 'sysinfo_disk_usage',
                'key' => 'mountpoint'
            }
        }
    ];
}

# Method: report
#
# Overrides:
#   <EBox::Module::Base::report>
sub report
{
    my ($self, $beg, $end, $options) = @_;

    my $report = {};

    $report->{'disk_usage'} = $self->runMonthlyQuery($beg, $end, {
        'select' => 'mountpoint, used, free',
        'from' => 'sysinfo_disk_usage_report',
    }, { 'key' => 'mountpoint' });

    return $report;
}

1;
