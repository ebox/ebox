# Copyright (C) 2005  Warp Netwoks S.L., DBS Servicios Informaticos S.L.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License, version 2, as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

package EBox::DNSCache;

use strict;
use warnings;

use base 'EBox::GConfModule';

use EBox::Objects;
use EBox::Gettext;
use EBox::Service;
use EBox::Summary::Module;
use EBox::Summary::Status;
use EBox::Menu::Item;
use EBox::Sudo qw( :all );

use constant BIND9CONFFILE => "@BIND9CONF@";
use constant BIND9CONFOPTIONSFILE => "@BIND9CONFOPTIONS@";
use constant BIND9CONFLOCALFILE => "@BIND9CONFLOCAL@";
use constant BIND9INIT     => "@BIND9_INIT@";
use constant PIDFILE       => "/var/run/bind/run/named.pid";

sub _create 
{
	my $class = shift;
	my $self = $class->SUPER::_create(name => 'dns-cache', 
						domain => 'ebox-dns-cache',
						@_);
	bless($self, $class);
	return $self;
}

sub _doDaemon
{
	my $self = shift;

	if ($self->service and EBox::Service::running('bind9')) {
		EBox::Service::manage('bind9','restart');
	} elsif ($self->service) {
		EBox::Service::manage('bind9','start');
	} elsif (EBox::Service::running('bind9')) {
		EBox::Service::manage('bind9','stop');
	}
}

sub _stopService
{
	EBox::Service::manage('bind9','stop');
}

sub _configureFirewall($){
	my $self = shift;
	my $fw = EBox::Global->modInstance('firewall');

	if ($self->service) {
		$fw->addService('dnscache', 'udp', 53, 0);
		$fw->addOutputRule('udp', 53);
		$fw->setObjectService('_global', 'dnscache', 'allow');
	} else {
		$fw->removeService('dnscache');
	}
}

# Method: setService 
#
#       Sets the dns-cache service as enabled
#
# Parameters:
#
#       enabled - boolean. True enable, undef disable
#
sub setService
{
	my ($self, $active) = @_;
	($active and $self->service) and return;
	(!$active and !$self->service) and return;
	$self->set_bool('active', $active);
	$self->_configureFirewall;
}

# Method: service 

#
#       Returns if the dns-cache service is enabled  
#
# Returns:
#
#       boolean - true if enabled, otherwise undef      

sub service
{
	my $self = shift;
	return $self->get_bool('active');
}


# Method: _regenConfig
#
#       Overrides base method. It regenertates the dhcp service configuration
#
sub _regenConfig
{
	my $self = shift;

	$self->_setBindConf;
	$self->_doDaemon();
}

sub _setBindConf
{
	my $self = shift;
	my @array = ();

	$self->writeConfFile(BIND9CONFFILE, 
				"dns-cache/named.conf.mas", 
				\@array);
	$self->writeConfFile(BIND9CONFOPTIONSFILE, 
				"dns-cache/named.conf.options.mas", 
				\@array);
	$self->writeConfFile(BIND9CONFLOCALFILE, 
				"dns-cache/named.conf.local.mas", 
				\@array);
}

sub statusSummary
{
	my $self = shift;
	return new EBox::Summary::Status('dns-cache', __('DNS cache'),
		EBox::Service::running('bind9'), $self->service);
}

# Method: rootCommands
#
#       Overrides EBox::Module method.
#
sub rootCommands
{
	my $self = shift;
	my @array = ();
 
	push(@array, $self->rootCommandsForWriteConfFile(BIND9CONFFILE));
	push(@array, $self->rootCommandsForWriteConfFile(BIND9CONFOPTIONSFILE));
	push(@array, $self->rootCommandsForWriteConfFile(BIND9CONFLOCALFILE));
	
	return @array;
}

# Method: menu 
#
#       Overrides EBox::Module method.
#
sub menu
{
        my ($self, $root) = @_;
        $root->add(new EBox::Menu::Item('url' => 'DNSCache/Index',
                                        'text' => __('DNS Cache')));
}

1;
