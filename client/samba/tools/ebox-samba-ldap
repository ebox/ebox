#!/usr/bin/perl

use strict;

use EBox;
use EBox::Global;
use EBox::SambaLdapUser;
use EBox::Ldap;
use EBox::Sudo qw( :all );
use Crypt::SmbHash qw(nthash ntlmgen);


use constant DEFAULTDOMAINNAME => 'EBOX';
use constant TMPROOT	=> 'ebox-samba-admin';

# LDAP Domain stuff
use constant DomainGroups => 
		( 
			{ 
				name => 'Domain Admins',
				gid  => 512,
				gtype => 2,
			},
			{
				name => 'Domain Users',
				gid => 513,
				gtype => 2,
			},
			{
				name => 'Domain Guests',
				gid  => 514,
				gtype => 2,
			},
			{
				name => 'Domain Computers',
				gid => 544,
				gtype => 2,
			},
			{
				name => 'Administrators',
				gid => 544,
				gtype => 5,
				sid => 'S-1-5-32-544',
			},
			{
				name => 'Account Operators',
				gid => 548,
				gtype => 5,
				sid => 'S-1-5-32-548'
			},
			{
				name => 'Print Operators',
				gid => 550,
				gtype => 5,
				sid => 'S-1-5-32-550'
			}, 
			{
				name => 'Backup Operators',
				gid => 551,
				gtype => 5,
				sid => 'S-1-5-32-551'

			},
			{
				name => 'Replicators',
				gid => 552,
				gtype => 5,
				sid => 'S-1-5-32-552'

			}
		);
	


EBox::init();

my $global = EBox::Global->getInstance();
my $users  = $global->modInstance('users');


sub _addPDCStuff {
	my $ldap = EBox::Ldap->instance();
	my $smb  = new EBox::SambaLdapUser;
	my $sid = EBox::SambaLdapUser::getSID();
	my $samba  = $global->modInstance('samba');
	
	# Mandatory groups
	foreach my $group (DomainGroups) {
		my ($name, $gid, $gtype) = ($group->{'name'}, 
					    $group->{'gid'}, $group->{'gtype'});
		my %attrs = (
				base => 'ou=Groups,dc=ebox',
				filter => "&(objectclass=*)(cn=$name)",
				scope => 'one'
			    );
		next if ($ldap->search(\%attrs)->count() > 0);

		my $gsid;
		if ($group->{'sid'}) {
			$gsid = $group->{'sid'};
		} else {
			$gsid = "$sid-$gid";
		}

		my %args = (
			    attr => [
				      'cn'		=> $name,
				      'gidNumber'	=> $gid,
				      'sambaSID'	=> $gsid, 
				      'sambaGroupType'  => $gtype,
				      'displayName'	=> $name, 
				      'objectclass'	=> ['posixGroup',
				      			   'sambaGroupMapping', 
							   'eboxGroup']
				    ]
			    );

		my $dn = "cn=$name,ou=Groups,dc=ebox";
		$ldap->add($dn, \%args);

	}
	
	# Computers
        my %args = (base => "dc=ebox", filter => "&(ou=Computers)", 
			scope => 'one');
	unless ($ldap->search(\%args)->pop_entry()) {
		%args = (
		    attr => [
			      'ou'		=> 'Computers',
			      'objectclass'	=> ['organizationalUnit']
			    ]
		        );

		my $dn = "ou=Computers,dc=ebox";
		$ldap->add($dn, \%args);
	}

	# Idmap 
	%args = (base => "dc=ebox", filter => "&(ou=Idmap)", 
			scope => 'one');

	unless ($ldap->search(\%args)->pop_entry()) {
		%args = (
		    attr => [
			      'ou'		=> 'Idmap',
			      'objectclass'	=> ['organizationalUnit']
			    ]
		    );

		my $dn = "ou=Idmap,dc=ebox";
		$ldap->add($dn, \%args);
	}


	# SambaDomainName
	%args = (
                        base => "dc=ebox",
                        filter => "(sambaDomainName=*)",
			attrs => ['sambaDomainName'],
                        scope => "sub"
                    );
	
	foreach my $entry ($ldap->search(\%args)->entries()) {
		my $dn = 'sambaDomainName=' . 
			$entry->get_value('sambaDomainName') . ',dc=ebox';
		$ldap->delete($dn);
	}
        %args = (
                        base => "dc=ebox",
                        filter => "(objectclass=sambaDomain)",
                        scope => "sub"
                    );

	unless ($ldap->search(\%args)->pop_entry()) {
		$smb->setSambaDomainName(DEFAULTDOMAINNAME);
	}
	
	# Set permissions for Domain Admins 
        %args = (
                        base => "ou=Users,dc=ebox",
                        filter => '(uid=' . TMPROOT . ')',
                        scope => "sub"
                    );
	
	# TODO Redo from here to the end of the function
	
	unless ($ldap->search(\%args)->pop_entry()) {
		root('/usr/sbin/smbldap-useradd -a ' . TMPROOT);
		root('/usr/sbin/smbldap-usermod  -u 0 '.  TMPROOT);
	}

	my $pass .= int (rand(10000000)); 
	my ($lm ,$nt) = ntlmgen $pass;
	%args = (
		changes => [
			replace => [
					sambaLMPassword 	=> $lm,
					sambaNTPassword 	=> $nt,
					sambaAcctFlags		=> '[U]',
					sambaPwdLastSet		=> time
				]
			]
		);

	my $dn = 'uid=' . TMPROOT . ',' . $users->usersDn;
	$ldap->modify($dn, \%args );
	
	# This evil hack needs to be done to use net rpc rights 
	# Now, I prefer to modify the TDB file directly to set
	# the proper bits.
	my $oldserv = $samba->fileService();
	unless ($oldserv) {
		$samba->setFileService(1);
		$samba->save();
	}
	$samba->_regenConfig();
	system("/etc/init.d/ebox samba restart");
	my $abort = 1;
	for (1..3) {
		if ($samba->isRunning()) {
			$abort = undef;
			last;
		}
		sleep 2;
	} 
	die "smbd is not running" if $abort;

	system("net rpc rights grant  '" . DEFAULTDOMAINNAME . 
	"\\Domain Admins' Semachineaccountprivilege -U " . TMPROOT . "%$pass");
	unless ($oldserv) {
		$samba->setFileService(undef);
		$samba->save();
		$samba->_regenConfig();
	}
	root('/usr/sbin/smbldap-userdel ' . TMPROOT);
	

}

sub clean 
{
	my $smb  = new EBox::SambaLdapUser;
	my $ldap = EBox::Ldap->instance();

	
	# clean users
	foreach my $user ($users->users){
		my $username = $user->{'username'};
		my $dn = "uid=$username," .  $users->usersDn;
		$ldap->delObjectclass($dn, 'sambaSamAccount');
		
	}

	# clean groups
	foreach my $group ($users->groups){
		my $groupname = $group->{'account'};
		my $dn = "cn=$groupname," .  $users->groupsDn;
		$ldap->delObjectclass($dn, 'eboxGroup');
		$ldap->delObjectclass($dn, 'sambaGroupMapping');
	}
	
	# remove groups
	foreach my $group (DomainGroups) {
		my $name = $group->{'name'}; 
		my $dn = "cn=$name,ou=Groups,dc=ebox";
		my %attrs = (
				base => 'ou=Groups,dc=ebox',
				filter => "&(objectclass=*)(cn=$name)",
				scope => 'one'
			    );
		next unless ($ldap->search(\%attrs)->count() > 0);
		$ldap->delete($dn);
	}

	# Idmap 
	my %args = (base => "dc=ebox", filter => "&(ou=Idmap)", 
			scope => 'one');

	if ($ldap->search(\%args)->pop_entry()) {
		$ldap->delete ('ou=Idmap,dc=ebox');
	}


	# SambaDomainName
	%args = (
                        base => "dc=ebox",
                        filter => "(sambaDomainName=*)",
			attrs => ['sambaDomainName'],
                        scope => "sub"
                    );
	
	foreach my $entry ($ldap->search(\%args)->entries()) {
		my $dn = 'sambaDomainName=' . 
			$entry->get_value('sambaDomainName') . ',dc=ebox';
		$ldap->delete($dn);
	}

	# Comptuers
	%args = (base => "dc=ebox", filter => "&(ou=Computers)", 
			scope => 'sub');
	if ($ldap->search(\%args)->pop_entry()) {
		%args = (
			base => "ou=Computers,dc=ebox",
			filter => 'objectclass=*',
			scope => "one",
			attrs => ['cn']
			
		    );
		
		for my $entry ($ldap->search(\%args)->entries()) {
			my $cn = $entry->get_value('cn');
			$ldap->delete("uid=$cn,ou=Computers,dc=ebox");
		}
	}
	
}

sub update 
{
	my $smb  = new EBox::SambaLdapUser;

	# update users
	foreach my $user ($users->users){
		my $username = $user->{'username'};
		my $dn = "uid=$username," .  $users->usersDn;
			$smb->_addUser($username);		
	}

	# update groups
	foreach my $group ($users->groups){
		my $groupname = $group->{'account'};
		my $dn = "cn=$groupname," .  $users->groupsDn;
			$smb->_addGroup($groupname);		
	}
}

sub gen_config
{
	my $samba = EBox::Global->modInstance('samba');
	$samba->_regenConfig;
}

sub usage
{
	print "Usage: $0 update | clean | genconfig\n";
	exit 1;
}

#main 

unless ($#ARGV == 0) {
	usage();
}

if ($ARGV[0] eq 'update') {
	update();
	_addPDCStuff();
} elsif ($ARGV[0] eq 'genconfig') {
	gen_config();
} elsif ($ARGV[0] eq 'clean') {
	clean();
} else {
	usage();
}
