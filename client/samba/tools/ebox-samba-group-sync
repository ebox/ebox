#!/usr/bin/perl

# Script to create/delete samba homes depending on if the users belongs to a
# group that should have a samba account

use strict;
use warnings;

use EBox;
use EBox::Global;
use EBox::Sudo;

use File::Slurp;
use Error qw(:try);

EBox::init();

my $sambaMod = EBox::Global->modInstance('samba');
unless ($sambaMod->configured()) {
    print STDERR "Samba module is not enabled\n";
    exit(0);
}

my $currentGroup = $sambaMod->model('GeneralSettings')->row()->valueByName('sambaGroup');

my $userMod = EBox::Global->modInstance('users');
my $groupName = '';
if ($userMod->gidExists($currentGroup)) {
    $groupName = $userMod->gidGroup($currentGroup);
}

print STDERR "Current group: $currentGroup ($groupName) \n";

if ((not defined ($currentGroup)) or $currentGroup eq '1901') {
    exit (0);
}

my %usersToDel = map { $_ => 1 } $userMod->usersNotInGroup($groupName);
my @currentHomes = File::Slurp::read_dir('/home/samba/users');

print STDERR "Checking homes to delete:\n";

for my $home (@currentHomes) {
    print "\t$home";
    if ( exists $usersToDel{$home}) {
        print "\t Yes\n";
        EBox::Sudo::root("rm -rf /home/samba/users/$home");
    } else {
        print "\t No\n";
    }
}

print STDERR "Checking homes to create:\n";
my @usersInGroup =  @{$userMod->usersInGroup($groupName)};
for my $user (@usersInGroup) {
    print "\t$user";
    if (EBox::Sudo::fileTest('-d', "/home/samba/users/$user" )) {
        print "\t No\n";
    } else {
        print "\t Yes\n";
        try {
            EBox::Sudo::root("mkdir \'/home/samba/users/$user\'");
            EBox::Sudo::root("chown \'$user\':513 \'/home/samba/users/$user\'");
        } otherwise {

        };
    }
}


