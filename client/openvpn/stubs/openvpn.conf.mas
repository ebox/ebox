<%args>
$name
$dev
$port  
$proto
$caCertificatePath
$certificatePath
$key
$crlVerify        => undef
$subnet
$subnetNetmask
$local            => undef
$clientToClient   => 0
$user
$group
$dh
$tlsRemote      => undef

$statusLogFile

@advertisedNets => ()
</%args>
<%init>
use EBox::Config;
my $logDir = EBox::Config::log();
my $logFile = "$logDir/openvpn-$name.log";
</%init>
# EBox OpenVPN 2.0 config file for  server <% $name %>


# Which local IP address should OpenVPN
# listen on? (optional)
<& valueEntry, entry => 'local', value => $local  &>


# Which TCP/UDP port should OpenVPN listen on?
<& valueEntry, entry => 'port', value => $port  &>

# TCP or UDP server?
<& valueEntry, entry => 'proto', value => $proto  &>

# virtual device
<& valueEntry, entry => 'dev', value => $dev  &>

# SSL/TLS root certificate (ca), certificate

# (cert), and private key (key). 
<& valueEntry, entry => 'ca', value => $caCertificatePath  &>
<& valueEntry, entry => 'cert', value => $certificatePath  &>
<& valueEntry, entry => 'key', value => $key  &> # This file should be kept secret

# check peer certificate against certificate revokation list
<& valueEntry, entry => 'crl-verify', value => $crlVerify  &> 

# Diffie hellman parameters.
# Generate your own with:
#   openssl dhparam -out dh1024.pem 1024
# Substitute 2048 for 1024 if you are using
# 2048 bit keys. 
#dh /etc/openvpn/dh1024.pem
<& valueEntry, entry => 'dh', value => $dh  &>

# Configure server mode and supply a VPN subnet
# for OpenVPN to draw client addresses from.
server <% $subnet %> <% $subnetNetmask %>

# Maintain a record of client <-> virtual IP address
# associations in this file.  
ifconfig-pool-persist ipp.txt


# If enabled, this directive will configure
# all clients to redirect their default
# network gateway through the VPN
;push "redirect-gateway"


# Uncomment this directive to allow different
# clients to be able to "see" each other.
<& boolEntry, entry => 'client-to-client', value => $clientToClient &>

# The keepalive directive causes ping-like
# messages to be sent back and forth over
keepalive 10 120


# client certificate common name authentication
<& valueEntry, entry=> 'tls-remote', value => $tlsRemote &>

# For extra security beyond that provided
# by SSL/TLS, create an "HMAC firewall"
# to help block DoS attacks and UDP port flooding.
;tls-auth ta.key 0 # This file is secret

# Select a cryptographic cipher.
# This config item must be copied to
# the client config file as well.
;cipher BF-CBC        # Blowfish (default)
;cipher AES-128-CBC   # AES
;cipher DES-EDE3-CBC  # Triple-DES

# Enable compression on the VPN link.
# If you enable it here, you must also
# enable it in the client config file.
comp-lzo

# The maximum number of concurrently connected
# clients we want to allow.
;max-clients 100

# group and user for the OpenVPN
# daemon's privileges after initialization.
<& valueEntry, entry => 'user', value => $user  &>
<& valueEntry, entry => 'group', value => $group  &>


# The persist options will try to avoid
# accessing certain resources on restart
# that may no longer be accessible because
# of the privilege downgrade.
persist-key
persist-tun

# Output a short status file showing
# current connections, truncated
# and rewritten every minute.
status <% $statusLogFile %>

# By default, log messages will go to the syslog (or
# on Windows, if running as a service, they will go to
# the "\Program Files\OpenVPN\log" directory).
# Use log or log-append to override this default.
# "log" will truncate the log file on OpenVPN startup,
# while "log-append" will append to it.  Use one
# or the other (but not both).
log-append  <% $logFile %>

# Set the appropriate level of log
# file verbosity.
#
# 0 is silent, except for fatal errors
# 4 is reasonable for general usage
# 5 and 6 can help to debug connection problems
# 9 is extremely verbose
verb 3

# Silence repeating messages.  At most 20
# sequential messages of the same message
# category will be output to the log.
;mute 20
<& advertisedNets, nets => \@advertisedNets &>




<%def valueEntry>
<%args>
$entry
$value
</%args>
% if (defined $value) {
<% $entry %> <% $value %>
%}
</%def>

<%def boolEntry>
<%args>
$entry
$value
</%args>
% if ($value) {
<% $entry %>
%}
</%def>

<%def advertisedNets>
<%args>
@nets
</%args>
% foreach my $net (@nets) {
%   my ($net, $netmask) = @{ $net  };
   push "route <% $net %> <% $netmask %>"
%}
</%def>
