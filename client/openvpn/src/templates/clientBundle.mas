<%args>
$name
$disabled
$EBoxToEBoxTunnel => 0
@availableCertificates
@addresses
</%args>
<%init>
use EBox::Gettext;

my @certificateOptions = map { { value => $_ } } @availableCertificates; 
my $certificateInput =  [ 
			 name => 'clientCertificate', 
			 printableName => __(q{Client's certificate}), 
			 input => 'select', 
			 options => \@certificateOptions ,  
			 help => __('This certificate will be used by the client to authenticate itself to the server'),
			];


my @disabledAttr = (disabled => 'disabled');

my @typeOptions = (
 { 
    value => 'windows', 
    printableValue =>'Windows', 
    $EBoxToEBoxTunnel ? @disabledAttr : (),
 }, 
 { 
    value => 'linux',   
    printableValue =>'Linux',
    $EBoxToEBoxTunnel ? @disabledAttr : (),
 } ,
 { 
    value => 'EBoxToEBox', 
    printableValue => __('EBox to EBox tunnel') ,
   $EBoxToEBoxTunnel ? () : @disabledAttr,
  },

);

my $typeInputValue = $EBoxToEBoxTunnel ? 'EBoxToEBox' : 'windows';

my $typeInput = [
			 name => 'clientType', 
			 printableName => __(q{Client's type}), 
			 input => 'select', 
			 
			 value   => $typeInputValue,
			 options => \@typeOptions, 
					
			 help => __('This selection should match the operative
			 system running on the client computer'),

			 id => 'type',
			 onChange => 'typeChanged()',
			];

my $installerInput = [
			name => 'installer',
			printableName => __(q(Add OpenVPN's installer to bundle)),
                        input   => 'checkbox',
                        $EBoxToEBoxTunnel ?
                                         ( value => 0, disabled => 'disabled') :
                                         ( value => 1),
                        id      => 'installer',
		       ];



my @formElements = (
                     [ 
		        name => 'name', value => $name, input =>'hidden',
		     ],
                     $typeInput,
		     $certificateInput,
                     $installerInput,
                    ); 


my @addressesInputs = ();


my $nInputs = @addresses;
$nInputs = 2 if $nInputs < 2;

# XXX remove this when create client dialog supports more than one address
if ($EBoxToEBoxTunnel) {
  $nInputs = 0;
}

foreach my $i (0 .. $nInputs) {
  my $name = "ip$i";
  my $value = $i > @addresses ? '' : $addresses[$i];
  defined $value or $value = '';

  my $printableName;
  my $help;
  if ($i == 0) {
    $printableName = __(q{Server's IP address});
    $help          = __('This address should be the one used to reach the server.');
  }
  else {
    $printableName = __(q{Additional server's IP address (optional)});
    $help          = __('An additional address to reach the server can be specified here');
   }
  
  my $input = [  name => $name, value => $value, printableName => $printableName, help => $help ];
  push @addressesInputs, $input;
}


push @formElements, @addressesInputs;

# the submit button must be after the addresses
push @formElements, [ 
		       name => 'download', input => 'submit',
		       value => __(q{Download client's files}),
		     ];


</%init>
%# environment check..

% if ($disabled)  {
  <& /openvpn/caRequired.mas, caCreated => 0 &>
% return;
% }
% elsif (@availableCertificates == 0) {
   <& /openvpn/caRequired.mas, caCreated => 1 &>
%  return;
% }


<h3><% __x('Client files for server {name}', name => $name) %></h3>
<div class='note'>
<% __('You can download an archive with all the required files to set up a
OpenVPN client. Remember to place the contained files in the client configuration directory') %>
<p>
% if (@addresses) {
<%  __(q{eBox  has guessed for you the values of the addresses' fields. If those values are incorrect or you want another ones, change them}) %>
% }
% else {
<%  __(q{eBox was unable to guess for you the values of the server's address. Please, enter the value manually or check your internet connection and try again}) %>
% } 
</div>
<form  method='POST' >
<& /formTable.mas, rows => \@formElements &>
</form>
<a href='Index'> <% __(q{Return to the OpenVPN's main page}) %></a>

<& .jsSection &>

<%def .jsSection>
<script type="text/javascript">

function typeChanged() {
    var selectType   = document.getElementById('type');
    var index      = selectType.selectedIndex;
    var typeValue    = selectType.options[index].value;

    var installer = document.getElementById('installer');

    if (typeValue ==  'windows') {
          installer.disabled = false
    }
    else {
        installer.disabled = true
    }
}

typeChanged();
</script>
</%def>