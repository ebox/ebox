#!/usr/bin/perl

use strict;
use warnings;

use EBox::Config;
use POSIX qw(setsid);

use constant {
  JNETTOP_PATH => '/usr/sbin/jnettop',
  JNETTOP_FORMAT => q{'$proto$,$src$,$srcport$,$dst$,$dstport$,$totalbps$'},

  LOGGER_PATH =>  EBox::Config::libexec() . 'ebox-traffic-monitor-logger',
};


sub _checkEnvironment
{
  if ( $> != 0) { # $> means EUID
    die 'only superuser can use this script';
  }
  
  if (not -x JNETTOP_PATH) {
    die 'cannot found jnettop program at ' . JNETTOP_PATH;
  }
  
  
  if (not -x LOGGER_PATH) {
    die 'cannot found logger program at ' . LOGGER_PATH;
  }

}



sub _jnettopCmd
{
  my (%params) = @_;

  my $iface = $params{iface};

  my $jnettopCmd = JNETTOP_PATH . ' --display text -p';

  if ($iface) {
  # check iface
    system "ifconfig $iface 2&>1 > /dev/null";
    if ($? != 0) {
      die "cannot get infromation for interface $iface. Please, make sure that is a valid interface";
    }
    
    $jnettopCmd .= " -i $iface";
  }
  
  my $time = $params{time};
  defined $time or
    die 'time parameter needed';

  $jnettopCmd .= " -t $time";

  
  $jnettopCmd .= ' --format ' . JNETTOP_FORMAT;


  return $jnettopCmd;
}

sub _daemonize
{
  # try to detach usign a fork
  chdir('/');
#   open STDIN, '/dev/null'   or die "Can't read /dev/null: $!";
#   open STDOUT, '>/dev/null' or die "Can't write to /dev/null: $!";
#   open STDERR, '>/dev/null' or die "Can't write to /dev/null: $!";

  my $pid = fork();
  defined $pid or
    die "cannot fork: $!";

  if ($pid) {
    # parent returns
    exit;
  }

  # child becames a daemon
  setsid() or die "Can't start new session: $!";
}



# entry point
_checkEnvironment();

my %params = @ARGV;

_daemonize();

my $jnettopCmd = _jnettopCmd(%params);


my $LOGGER;
open $LOGGER,  '|' . LOGGER_PATH or
  die "cannot fork logger child process";


while (1) {
 my @output =  `$jnettopCmd`;
  if ($? != 0) {
    die 'error executing jnettop';
  }

 print $LOGGER @output or die 'child error';


}


close $LOGGER  or  die "bad spool: $! $?";


1;
