#!/usr/bin/perl

use strict;
use warnings;

use EBox::Config;
use EBox::AbstractDaemon;
use POSIX qw(setsid);

use constant {
  JNETTOP_PATH => '/usr/sbin/jnettop',
  JNETTOP_FORMAT => q{'$proto$,$src$,$srcport$,$dst$,$dstport$,$totalbps$'},

  LOGGER_PATH =>  EBox::Config::libexec() . 'ebox-traffic-monitor-logger',
};


sub _checkEnvironment
{
  if ( $> != 0) { # $> means EUID
    die 'only superuser can use this script';
  }
  
  if (not -x JNETTOP_PATH) {
    die 'cannot found jnettop program at ' . JNETTOP_PATH;
  }
  
  
  if (not -x LOGGER_PATH) {
    die 'cannot found logger program at ' . LOGGER_PATH;
  }

}

sub _checkParams
{
  my (%params) = @_;
  if (not exists $params{time}) {
    die 'time parameter not found';
  }
  elsif ($params{time} <= 0) {
    die 'time parameter must be greater than zero';
  }

}

sub _jnettopCmd
{
  my (%params) = @_;

  my $iface = $params{iface};

  my $jnettopCmd = JNETTOP_PATH . ' --display text -p';

  $jnettopCmd .= ' --local-aggr port ' ;

  if ($iface) {
  # check iface
    system "ifconfig $iface 2&>1 > /dev/null";
    if ($? != 0) {
      die "cannot get information for interface $iface. Please, make sure that is a valid interface";
    }
    
    $jnettopCmd .= " -i $iface";
  }

  my $time = $params{time};

  $jnettopCmd .= " -t $time";

  
  $jnettopCmd .= ' --format ' . JNETTOP_FORMAT;


  return $jnettopCmd;
}

sub _daemonize
{
  # POSIX unmasks the sigprocmask properly
  my $sigset = POSIX::SigSet->new();
  my $action = POSIX::SigAction->new('sigINT_handler',
                                     $sigset,
                                     &POSIX::SA_NODEFER);
  POSIX::sigaction(&POSIX::SIGINT, $action);


  my $daemon = EBox::AbstractDaemon->new(name => 'ebox-traffic-monitor');
  $daemon->init();
}


sub sigINT_handler 
{
  system 'pkill -f ' . JNETTOP_PATH ;
  exit 0;
}




# entry point
_checkEnvironment();

my %params = @ARGV;
_checkParams(%params);

_daemonize();

my $jnettopCmd = _jnettopCmd(%params);


my $LOGGER;
open $LOGGER,  '|' . LOGGER_PATH or
  die "cannot fork logger child process";


while (1) {
 my @output =  `$jnettopCmd`;
  if ($? != 0) {
    die 'error executing jnettop';
  }

 print $LOGGER @output or die "child error $!";


}


close $LOGGER  or  die "bad spool: $! $?";


1;
