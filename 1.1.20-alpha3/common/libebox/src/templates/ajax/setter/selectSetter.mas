<%args>
$tableName
$data
$cssClass => ''
$disabled => undef
</%args>
<%init>
  use Data::Dumper;
use Perl6::Junction qw(any);

#########################
# EVIL HACK
#########################
# This is done here, since it makes a deep recursion error on Select
# type class at options method. This is due to rows implementation
# which always ask for printableValues and it is not possible to ask
# for value rows. This does not work when the edit/add will be
# generated by JavaScript.
#
# We are very ashamed about this evil hack, we want to apologise for
# that. Time constraints make us do this crap. Sorry.

my $options = $data->options();
my @filteredOptions;
my @optionsAlreadyModel = ();

if ( $data->unique() ) {
    # Filter the options in other just to show the ones allowed
    my $model = $data->model();

    if ( defined ( $model )) {
        my $field  = $data->fieldName();

        foreach my $id (@{$model->ids()}) {
            # Check if the element exists to avoid nasty issues
            # with union types
	    my $row = $model->row($id);
            next unless ($row->elementByName($field));
            push( @optionsAlreadyModel,
                  $row->valueByName($field) );
        }

        # Difference among optionsAlreadyModel and options arrays
        @filteredOptions = grep { ! ($_->{value} eq any(@optionsAlreadyModel)) } @{$options};

        # Add the current value if the action is an edition
        if ( $data->value() ) {
            push ( @filteredOptions, {
                                      value => $data->value(),
                                      printableValue => $data->printableValue(),
                                     }
               );
            @filteredOptions = sort { $a->{value} cmp $b->{value} } ( @filteredOptions );
        }

        $options = \@filteredOptions;
    }
}
</%init>
% my $id = $tableName . '_' . $data->fieldName();
% # my $onChange = "eval('OnChangeOn$id(this)')";
% my $onChange = "OnChangeOn$id(this)";
<& /input/select.mas,
   'name'    => "$id" ,
   'value'   => $data->value(),
   'options' => $options,
   'id'      => "$id",
   'class'   => "$cssClass",
   'disabled' => $disabled,
&>
<% $data->trailingText() %>


