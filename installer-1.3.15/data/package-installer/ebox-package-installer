#!/usr/bin/perl
# Copyright (C) 2009 eBox Technologies S.L.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License, version 2, as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

use warnings;
use strict;

use EBox::Gettext;

EBox::Gettext::settextdomain('ebox-package-installer');

#########################
# -- eBox package data --
#########################

my @TASKS = (
    ['gateway', __('Firewall, HTTP proxy, traffic shaping, etc.')],
    ['security', __('Firewall, IDS, AV, VPN, content & mail filter, etc.')],
    ['infrastructure', __('DHCP, DNS, NTP, HTTP server, etc.')],
    ['office', __('File sharing and printing, groupware, etc.')],
    ['communication', __('Mail, Jabber/XMPP, VoIP, etc.')],
);

my @PACKAGES = (
    ['network', __('Networking')],
    ['firewall', __('Firewall and redirections')],
    ['trafficshaping', __('Traffic shaping')],
    ['samba', __('File sharing server and Windows PDC')],
    ['dns', __('DNS server')],
    ['dhcp', __('DHCP server')],
    ['radius', __('RADIUS server')],
    ['squid', __('HTTP proxy and content filter')],
    ['usersandgroups', __('LDAP users and groups management')],
    ['monitor', __('System monitor with graphs and alerts')],
    ['software', __('System and eBox package managmenet')],
    ['ntp', __('NTP server')],
    ['printers', __('Printing server')],
    ['jabber', __('Jabber/XMPP server')],
    ['openvpn', __('VPN server')],
    ['webserver', __('HTTP server')],
    ['mail', __('Mail system: SMTP, POP3, IMAP4')],
    ['webmail', __('WWW Mail Client')],
    ['mailfilter', __('Antispam, antivirus, transparent POP3 proxy')],
    ['antivirus', __('Antivirus')],
    ['egroupware', __('Shared calendar and address book, webmail, etc')],
    ['ids', __('Intrusion Detection System')],
#    ['captiveportal', __('Captive Portal')],
    ['asterisk', __('VoIP PBX')],
#    ['improxy', __('Instant Messaging Proxy')],
);

my $ASTERISK_EXTRAS = 'dahdi-modules-ebox dahdi-linux dahdi';

#################
# -- constants --
#################

my $SELECTION_FILE = 'selection';
my $INSTALL_FILES = '/var/tmp';

my $INSTALLER_TITLE = __('eBox Platform Installer');
my $PACKAGE_MODE_TITLE = __('Choose package selection method');
my $PACKAGE_MODE_MESSAGE = __('Select the method that better fits your needs.');
my $SIMPLE_METHOD = __('simple');
my $SIMPLE_DESC = __('Select packages by task');
my $ADVANCED_METHOD = __('advanced');
my $ADVANCED_DESC = __('Select packages manually');
my $TASK_TITLE = __('Select eBox tasks to install');
my $TASK_MESSAGE = __('Select one or more tasks:');
my $PACKAGE_TITLE = __('Select eBox packages to install');
my $PACKAGE_MESSAGE = __('Select the desired packages:');
my $USERS_MODE_TITLE = __('Select the type of the server');
my $USERS_MODE_MESSAGE = __('Choose standalone unless you want LDAP replication or synchronization with Active Directory.');
my $USERS_STANDALONE_DESC = __('Standalone server');
my $USERS_ADVANCED_DESC = __('Advanced configuration (Master/Slave/AD Sync)');
my $USERS_STANDALONE = __('standalone');
my $USERS_ADVANCED = __('advanced');
my $USERS_ADVANCED_TITLE = __("Advanced configuration modes");
my $USERS_ADVANCED_MESSAGE = __x("In this beta version we don't support the advanced autoconfiguration yet. You can learn more about these features here:
{url}",
url => 'http://trac.ebox-platform.com/wiki/Document/AdvancedSetup_1.3');
my $IFACES_TITLE = __('Select External (WAN) interfaces');
my $IFACES_MESSAGE = __('WARNING: By default you will not be able to access the web interface through them.');
my $GATEWAY_WARNING = __('You have installed a gateway profile. It needs at least two network interfaces and your machine has only one. You can still enjoy the rest of the eBox features but it will not act as a gateway unless you add another network card.');
my $PASS_TITLE = __('Enter password for eBox interface');
my $PASS_MSG = __('You will need to use this password to log into the eBox interface:');
my $PASS_CONFIRM_TITLE = __('Confirm password for eBox interface');
my $PASS_CONFIRM_MSG = '';
my $MAIL_TITLE = __('Mail configuration');
my $MAIL_MESSAGE = __('Enter default virtual mail domain:');
my $FINAL_TITLE = __('Installation finished');
my $FINAL_MESSAGE = __('Now you can access the eBox interface at: ');
my $NO_SPACE_MESSAGE = __('The size of your root filesystem is less than 2GB. This is not enough for a typical setup. If you really know what you are doing you can install in expert mode and define your own partition layout.');

my $LOG = ($ENV{LOG} or '/tmp/ebox-installer.log');

my $WHIPTAIL_ARGS = "--clear --backtitle \"$INSTALLER_TITLE\"";

########################
# -- global variables --
########################

my $CNF_password;
my $CNF_users = '';
my $CNF_ldap_pass;
my @CNF_selectedIfaces;
my $CNF_domain = undef;

############################
# -- installation process --
############################

# Check if there is enough space before starting the installation
# Only if we are in non-expert mode
if (-f "$INSTALL_FILES/ebox-installer.auto") {
    my $root_space = `df -Pm /|awk 'NR>1{ print \$2 }'`;
    chomp($root_space);
    if ($root_space < 2000) {
        showDialog(__('Error'), $NO_SPACE_MESSAGE);
        exit (1);
    }
}

my @packages = selectPackagesMenu();
@packages = map ("ebox-$_", @packages);

installPackages(@packages);

# Apache is the most basic module, if it's not installed correctly,
# we assume that the installation has failed
if (system ("$INSTALL_FILES/ebox-module-installed apache") != 0) {
        showDialog(__('Error'), __('Installation failed.') . "\n\n" .
                   __("Check contents of $LOG to see what happened"));
        exit (1);
}

# Choose mode if users module is installed
if (system ("$INSTALL_FILES/ebox-module-installed users") == 0) {
    $CNF_users = askUsersMode();
    if ($CNF_users eq $USERS_ADVANCED) {
        showDialog($USERS_ADVANCED_TITLE, $USERS_ADVANCED_MESSAGE);
    }
}

# Choose password for eBox interface
$CNF_password = askPassword();

# Choose interfaces to mark as external if ebox-network is installed
if (system ("$INSTALL_FILES/ebox-module-installed network") == 0) {
    @CNF_selectedIfaces = selectIfacesMenu();
}

# Choose mail domain if mail module is installed
if (system ("$INSTALL_FILES/ebox-module-installed mail") == 0) {
    $CNF_domain = askMailDomain();
}

preconfiguration();

# Fetch internal addresses
my $haveAddress = 0;
my $output = `$INSTALL_FILES/ebox-get-addresses`;
if ( $? == 0 ) {
    for my $address ( split(/ /, $output ) ) {
        $FINAL_MESSAGE .= "https://$address ";
        $haveAddress = 1;
    }
}
unless ($haveAddress) {
        $FINAL_MESSAGE .= "https://<your-ip-address>";
}
# Show instalation complete message with access instructions
showDialog($FINAL_TITLE, $FINAL_MESSAGE);

###########################
# -- installer functions --
###########################

sub installPackages # (packages)
{
    my (@packages) = @_;

    my $packageList = join (' ', @packages);

    my $output = `LANG=C apt-get install -s $packageList | grep ^Inst`;

    if ($output =~ /ebox-samba/s) {
        $packageList .= ' samba-vscan';
    }
    if ($output =~ /ebox-asterisk/s) {
        $packageList .= " $ASTERISK_EXTRAS";
    }

    # Get number of packages to install
    my $num = `LANG=C apt-get install -s $packageList | grep ^Inst | wc -l`;
    chomp($num);

    my $aptCmd = 'LANG=C apt-get install -y --force-yes';
    my $message = __('Installing eBox packages...');
    my $whipCmd = "whiptail $WHIPTAIL_ARGS --gauge \"$message\" 7 64 0";
    my $gaugeCmd = "$INSTALL_FILES/ebox-apt-parse $num | $whipCmd";

    $ENV{DEBIAN_FRONTEND} = 'noninteractive';
    my $ret = system ("$aptCmd $packageList 2>&1 | tee -a $LOG | $gaugeCmd");

    if ($ret != 0) {
        showDialog('Error', 'Installation failed. ' .
                   "Check contents of $LOG to see what happened");
        exit (1);
    }
}

sub selectPackagesMenu # returns array
{
    my @selection;
    my $option = '';
    my $ret = 0;
    my $arg1 = "$SIMPLE_METHOD \"$SIMPLE_DESC\"";
    my $arg2 = "$ADVANCED_METHOD \"$ADVANCED_DESC\"";
    do {
        unless ($ret == -1) {
            $option = showMenu($PACKAGE_MODE_TITLE, $PACKAGE_MODE_MESSAGE, $arg1, $arg2);
        }
        if ($option eq $SIMPLE_METHOD) {
            $ret = showChecklist($TASK_TITLE, $TASK_MESSAGE, @TASKS);
        } else {
            $ret = showChecklist($PACKAGE_TITLE, $PACKAGE_MESSAGE, @PACKAGES);
        }
        if ($ret == 0) {
            @selection = arrayFromFile($SELECTION_FILE);
            unlink ($SELECTION_FILE);
            if (scalar (@selection) == 0) {
                showDialog(__('Error'),
                           __('You must select at least one package.'));
                $ret = -1;
            }
        }
    } while ($ret != 0);

    return @selection;
}

sub selectIfacesMenu # returns array
{
    my $ifaceList = `$INSTALL_FILES/ebox-get-ifaces`;
    my @ifaces = split (' ', $ifaceList);
    my @ifacePairs = map ( [ $_, '' ] , @ifaces);

    my $gateway = grep /gateway/, @packages;

    return () unless $gateway;

    if (scalar (@ifaces) < 2) {
        showDialog(__('Warning'), $GATEWAY_WARNING);
        return ();
    }

    my @selection;
    my $option = '';
    my $ret = 0;
    do {
        $ret = showChecklist($IFACES_TITLE, $IFACES_MESSAGE, @ifacePairs);
        if ($ret == 0) {
            @selection = arrayFromFile($SELECTION_FILE);
            unlink ($SELECTION_FILE);
        }
    } while ($ret != 0);

    return @selection;
}

sub askPassword # returns string
{
    my $password;
    my $confirm;
    do {
        $password = showPasswordDialog($PASS_TITLE, $PASS_MSG);
        $confirm = showPasswordDialog($PASS_CONFIRM_TITLE, $PASS_CONFIRM_MSG);

        if ($password ne $confirm) {
            showDialog(__('Error'), __("Passwords don't match"));
        }
    } until ($password eq $confirm);

    return $password;
}

sub askUsersMode # returns string
{
    my $arg1 = "$USERS_STANDALONE \"$USERS_STANDALONE_DESC\"";
    my $arg2 = "$USERS_ADVANCED \"$USERS_ADVANCED_DESC\"";
    my $mode;
    do {
        $mode = showMenu($USERS_MODE_TITLE, $USERS_MODE_MESSAGE, $arg1, $arg2);
    } until ($mode);

    return $mode;
}

sub askMailDomain # returns string
{
    my $domain;
    do {
        $domain = showInputDialog($MAIL_TITLE, $MAIL_MESSAGE);

        # TODO: domain validation?
    } until ($domain);

    return $domain;
}

sub preconfiguration
{
    # Workaround buggy squid without FQDN
    if (-f '/etc/squid/squid.conf') {
        system('echo "visible_hostname localhost" >> /etc/squid/squid.conf');
        system('/etc/init.d/squid stop > /dev/null 2>&1');
        system('/etc/init.d/squid start > /dev/null 2>&1');
    }

    # Disable cdrom and delete file from apt sources
    system('sed -i "s/^deb cdrom/#deb cdrom/" /etc/apt/sources.list');
    system('sed -i "s/^deb file:.*$//" /etc/apt/sources.list');

    my $message = __('Preconfiguring eBox packages...');
    my $whipCmd = "whiptail $WHIPTAIL_ARGS --gauge \"$message\" 7 64 0";
    my $PROGRESS;
    open ($PROGRESS, '|-', $whipCmd);

    # Set LDAP as master before enabling usersandgroups
    if ($CNF_users) {
        system("$INSTALL_FILES/ebox-set-master >> $LOG 2>&1");
    }

    # Enable all eBox installed modules
    my $moduleList = `$INSTALL_FILES/ebox-enable-list`;
    print $PROGRESS "1\n";

    chomp($moduleList);
    my @modules = split (/\n/, $moduleList);
    my $numModules = scalar (@modules);
    # Do not enable anything if advanced mode is selected
    if (($numModules > 0) and ($CNF_users ne $USERS_ADVANCED)) {
        my $step = 40 / $numModules;
        my $counter = $step;
        foreach my $module (@modules) {
            next if ($module eq 'dhcp'); # Skip dhcp module
            system("$INSTALL_FILES/ebox-enable-module $module >> $LOG 2>&1");
            print $PROGRESS int($counter) . "\n";
            $counter += $step;
        }

        system("$INSTALL_FILES/ebox-update-digests >> $LOG 2>&1");
        $counter = 45;
        print $PROGRESS "$counter\n";

        # save changes
        foreach my $module (@modules) {
            system("$INSTALL_FILES/ebox-save-module $module >> $LOG 2>&1");
            print $PROGRESS int($counter) . "\n";
            $counter += $step;
        }
    }


    # load LANG variable with default locale
    my @lines = arrayFromFile('/etc/default/locale');
    my $LANG = (split ('"', $lines[0]))[1];
    $ENV{LANG} = $LANG;

    print $PROGRESS "86\n";

    # Append eBox support languages to generate to current supported
    # locales
    my $LOCALES_FILE='/var/lib/locales/supported.d/local';
    my $TMP='/tmp/local.tmp';
    system("cat /var/tmp/locale.gen $LOCALES_FILE > $TMP");
    system("sort $TMP | uniq > $LOCALES_FILE");
    unlink($TMP);

    print $PROGRESS "87\n";

    # Regenerate locales to update the new messages from eBox
    system("/usr/sbin/locale-gen >> $LOG 2>&1");

    print $PROGRESS "96\n";

    system("/usr/share/ebox/ebox-set-locale $LANG >> $LOG 2>&1");

    print $PROGRESS "97\n";

    # Run ebox-software in order to update packages list (which is done
    # nightly)
    #system('ebox-software');

    # eBox initial setup
    system ("$INSTALL_FILES/ebox-set-password $CNF_password >> $LOG 2>&1");

    print $PROGRESS "98\n";

    foreach my $iface (@CNF_selectedIfaces) {
        system ("$INSTALL_FILES/ebox-set-external $iface >> $LOG 2>&1");
    }

    print $PROGRESS "99\n";

    if (defined $CNF_domain) {
        system ("$INSTALL_FILES/ebox-set-maildomain $CNF_domain >> $LOG 2>&1");
    }

    print $PROGRESS "100\n";

    close ($PROGRESS);
}

#################################
# -- whiptail helper functions --
#################################

sub showMenu
{
    my ($title, $message, $arg1, $arg2) = @_;

    my $size = 2;
    my $height = $size + 9;

    my $max_len = max(length($arg1), length($arg2), length ($title));
    my $width = 7 + $max_len;

    my $command = "whiptail $WHIPTAIL_ARGS --nocancel --title \"$title\" " .
                  "--menu \"$message\" $height $width $size $arg1 $arg2";

    my $file = 'selected_option';
    system ("$command 2> $file");
    my @lines = arrayFromFile($file);
    unlink ($file);

    return $lines[0];
}

sub showChecklist # (title, message, options)
{
    my ($title, $message, @options) = @_;

    my $size = scalar (@options);
    if ($size > 14) {
        $size = 14;
    }
    my $height = $size + 7;

    my $option_args;
    my $max_len = 0;
    foreach my $optionPair (@options) {
        my $option = $optionPair->[0];
        my $description = $optionPair->[1];
        my $arg = "$option \"$description\"";
        my $this_len = length ($arg) + 8;
        if ($this_len > $max_len) {
            $max_len = $this_len;
        }
        $option_args .= "$arg 0 ";
    }
    my $width = max(get_dialog_width($title, $message), $max_len + 10);
    my $max_chars = max(length($title), length($message), $max_len);
    if ($max_chars > 70) {
        $height += int($max_chars / 70);
    }

    my $command = "whiptail $WHIPTAIL_ARGS --separate-output " .
                  "--title \"$title\" " .
                  "--checklist \"$message\" $height $width $size $option_args";

    system ("$command 2> $SELECTION_FILE");
}

sub showInputDialog # (title, message)
{
    my ($title, $message) = @_;

    showGenericInputDialog('inputbox', $title, $message);
}

sub showPasswordDialog # (title, message)
{
    my ($title, $message) = @_;

    showGenericInputDialog('passwordbox', $title, $message);
}

sub showGenericInputDialog # (type, title, message) returns input string
{
    my ($type, $title, $message) = @_;

    my $height = 8;
    my $width = get_dialog_width($title, $message);

    my $command = "whiptail $WHIPTAIL_ARGS --separate-output " .
                  "--title \"$title\" " .
                  "--$type \"$message\" $height $width";

    my @selection;
    do {
        system ("$command 2> $SELECTION_FILE");
        @selection = arrayFromFile($SELECTION_FILE);
        unlink ($SELECTION_FILE);
    } until (scalar(@selection) > 0);

    return $selection[0];
}

sub showDialog # (title, message)
{
    my ($title, $message) = @_;

    my $size = 1 + int(length($message) / 70);
    my $height = $size + 8;
    my $width = get_dialog_width($title, $message);

    my $command = "whiptail $WHIPTAIL_ARGS --title \"$title\" " .
                  "--msgbox \"$message\" $height $width";

    system ($command);
}

##############################
# -- other helper functions --
##############################

sub arrayFromFile # (filename)
{
    my ($filename) = @_;

    my $fh;
    open ($fh, '<', "$INSTALL_FILES/$filename") or
        open ($fh, '<', $filename) or
            die "Can't read $filename file";
    my @array = <$fh>;
    chomp (@array);
    close ($fh);

    return @array;
}

sub get_dialog_width # (title, message) returns int
{
    my ($title, $message) = @_;

    my $width = 7 + length($title);
    if (length($message) > length($title)) {
        if (length($message) < 70) {
            $width = length($message) + 7;
        } else {
            $width = 70;
        }
    }

    return $width;
}

sub max # (val1, val2, ...) returns value
{
    my $max = 0;
    map { $max = $_ if ($_ > $max) } @_;
    return $max;
}

