#!/usr/bin/perl
use strict;
use warnings;
use English '-no_match_vars';


my $RSA_LENGTH = 1024;
my $destDir  = $ARGV[0];

unless (defined($destDir) and -d $destDir) {
	print "Usage:$0 destDir\n";
	exit 1;
}


my ($keyFile, $keyUpdated)  = _generateRSAKey($destDir, $RSA_LENGTH);
my $certFile = _generateCert($destDir, $keyFile, $keyUpdated);
_generatePem($destDir, $certFile, $keyFile, $keyUpdated);
print "All server's certificate files in place\n\n";

sub _checkCredentials
{
  if ($EUID != 0) {
    die "This script can only be run by root";
  }
  
  my ($gid) = split '\s', $EGID;
  if ($gid != 0) {
    die "To run this script your primary group must be set to root";
  }
}

sub _generateRSAKey
{
  my ($destDir, $length) = @_;

  my $type    = 'key';
  my ($keyFile, $alreadyExists) = _generateFileInfraestructure($type, $destDir);

  return  ($keyFile, 0)  if   $alreadyExists;

  my @cmds = (
	      "openssl genrsa $RSA_LENGTH > $keyFile",
	      "chmod 0400 $keyFile",
	     );

  foreach (@cmds) {
    system $_;
    if ($? != 0) {
      die "Generation of RSA key failed";
    }
  }

  print "New key file generated\n";
  return ($keyFile, 1);
}


sub _generateCert
{
  my ($destDir, $keyFile, $keyUpdated) = @_;

  my $type = 'crt';
  my ($certFile, $alreadyExists) = _generateFileInfraestructure($type, $destDir, $keyUpdated, 'cert');

  return $certFile if $alreadyExists;

  my $subject = q{/CN=eBox\'s\ Server/};

  my @cmds = (
	      "openssl req -new -x509 -batch -subj $subject  -sha1 -days 3650 -key $keyFile > $certFile",
	      "chmod 0400 $certFile",
	     );

  foreach (@cmds) {
    system $_;
    if ($? != 0) {
      die "Generation of CERT file failed";
    }
  }

  print "New certificate file generated\n";
  return $certFile;
}


sub _generatePem
{
  my ($destDir, $certFile, $keyFile, $keyUpdated) = @_;

  my $type = 'pem';
  my ($pemFile, $alreadyExists) = _generateFileInfraestructure($type, $destDir, $keyUpdated);

  return $pemFile if $alreadyExists;

  my @cmds = (
	      "cat $certFile $keyFile > $pemFile",
	      "chmod 0400 $pemFile",
	     );

  foreach (@cmds) {
    system $_;
    if ($? != 0) {
      die "Generation of PEM file failed";
    }
  }

  print "New PEM file generated\n";
}


sub _generateFileInfraestructure
{
  my ($type, $destDir, $alwaysDelete, $extension) = @_;
  defined $alwaysDelete or $alwaysDelete = 0;
  $extension            or $extension    = $type;

  my $sslDir  = $destDir;
  my $file     = "$sslDir/smtp.$extension";

  my  @cmds =  (
		"touch $file",
		 "chmod 0600 $file",
		 );


  foreach (@cmds) {
    system $_;
    if ($? != 0) {
      die "Generation of $type file failed";
    }
  }

  return ($file, 0);
}

sub _sslDir
{
  my ($destDir, $postfix) = @_;

  my $sslDir = "$destDir";
  if (not -d $sslDir) {
    print "Creating eBox's ssl.$postfix directory\n";
    mkdir $sslDir, 0600;
  }

  return $sslDir;
}

1;
