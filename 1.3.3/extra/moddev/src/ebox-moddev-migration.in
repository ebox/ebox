#!/usr/bin/perl

use strict;
use warnings;


use Getopt::Long;
use Cwd;
use HTML::Mason;
use File::Slurp;
use File::Copy;

use constant 
    {
       MODULE_VERSION => '0.1',
       STUBS_PATH => '@DATADIR@/emoddev/stubs',
    };

sub _printUsage
{
    print STDERR "\nUsage: $0 --module-name class --version [Options]\n\n";
    print STDERR "Options:\n";
    print STDERR "\t--destdir\n";
    _printValidTypes();
    exit 1;
}


sub _parseOptions
{
    my %options = ( 
            name =>   undef,
            parent => undef,
            destdir => undef,
            mainClass => undef,
            );
    my $help;
    my $info;
    my @fields;
    my $optionsOk = GetOptions(
            'module-name=s' => \$options{mainClass},
            'version=s' => \$options{version},
            'destdir=s' => \$options{destdir},
            'help'  => \$help,
            'info'  => \$info,
            );
    if (not $optionsOk or $info or $help) {
        _printUsage();
    }

    unless (defined($options{mainClass} and $options{mainClass})) {
        _printUsage();
    }

    if ($options{destdir}) {
        unless (-d $options{destdir}) {
            die "$options{destidir} does not exist";
        }
    } else {
        $options{destdir} = getcwd;
    }

    unless ( -d $options{destdir} ) {
        die "$options{destdir} does not exist!!";
    }

    return \%options;
}

sub _migrations
{
    my ($dir) = @_;
    my @models ;
    opendir ( my $dirFH, $dir );
    while ( defined ( my $file = readdir ( $dirFH ))) {
          next unless ( $file =~ m/.*\.pl/ );
          push(@models, $file);
    }
    return \@models; 
}

sub _makefile
{
    my ($interp, $output, $options) = @_;

    my $dir = $options->{destdir} . '/migration';
    ( -d $dir )  or mkdir $dir;

   my $comp = $interp->make_component(
            comp_file => STUBS_PATH .  '/migration/Makefile.am.mas',
            );
    ${$output} = '';
    $interp->exec($comp,
                    ( module => $options->{mainClass},
                      migrationScripts => _migrations($dir)));

    write_file($dir . '/Makefile.am', ${$output});
}

sub _migration
{
    my ($interp, $output, $options) = @_;

    my $dir = $options->{destdir} . '/migration';
    mkdir ($dir) unless (-d $dir); 

    my $template = '/migration/migration.pl.mas';
   
    my $comp = $interp->make_component(
            comp_file => STUBS_PATH . $template,
            );
    ${$output} = '';
    my $version = $options->{version};
    $interp->exec($comp, 
            ( 
                version => $version,
                module => $options->{mainClass},
              ));
    write_file("$dir/$version.pl", ${$output});

}

sub _runAutogen
{
    if (-e 'autogen.sh') {
        system('./autogen.sh');
    } else {
        print STDERR " You will have to manually run autogen.sh within your module directory";
    }
}

sub _createType
{
    # Main
    my $options = _parseOptions();

    my $dir = $options->{destdir};
    
    my $output;
    my $interp = HTML::Mason::Interp->new(comp_root => STUBS_PATH, 
            out_method => \$output);

   _migration($interp, \$output, $options);
   _makefile($interp, \$output, $options);
   _runAutogen();
}

_createType();
