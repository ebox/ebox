<%args>
$nameEditable   => 0
%properties     => ()
@availableCertificates
@localInterfaces => ()
$submitName
$submitValue
</%args>
<%init>
use EBox::Gettext;

my @certificateOptions = map { { value => $_ } } @availableCertificates; 
my $certificateInput =  [ 
			 name => 'certificate', 
			 printableName => __('Certificate'), 
			 input => 'select',
			 options => \@certificateOptions ,
			 help => __('This certificate will be used by the server to authenticate itself'),
			];

my @tlsRemoteOptions = ( { value =>  0,printableValue => __('disabled'), } , @certificateOptions);
my $tlsRemoteInput = [
		      name => 'tlsRemote',
		      printableName => __('Client authorization by common name'),
		      input => 'select',
		       options => \@tlsRemoteOptions, 
		      help        => __("Only clients with this value as full common name's prefix will be authorized"),
		     ];

my @localOptions = map { { value => $_ } } @localInterfaces; 
push @localOptions,  { value => '', printableValue => __('All network interfaces'), };
# if the local interface does not exist (was removed by force) put in
# int the options to avoid confusion about the actual value
if ($properties{local}) {
  my $localIface = $properties{local};
  if (! grep { $_ eq $localIface } @localInterfaces) {
    push @localOptions, { value => $localIface };
  }
}

my $localInput   =  [
		     name  => 'local', printableName => __('Interface to listen on'), 
		     input => 'select', 
		     options => \@localOptions, 
		     help  => __('The server will listen only in all external interfaces or only in the interface selected'),
		    ];				       


my @tableElements  = (
      [ name => 'service',           printableName => __('Active'), input => 'checkbox' ],
      [ name => 'port',              printableName => __('Port'),],
      [ name => 'subnet',            printableName => __('VPN network address'),], 
      [ name => 'subnetNetmask',     printableName => __('VPN network netmask'),], 
      [ name => 'proto',             printableName => __('Protocol'), 
       input => 'select',  
       options => [ 
		   { value => 'tcp',
		     printableValue => 'TCP' },
		   { value => 'udp',
		     printableValue => 'UDP' },
		  ], 
       ],					 
      $certificateInput,	
      $tlsRemoteInput,
		      
      [ 
       name =>  'masquerade',
       printableName => __('Network Address Translation'),
       input => 'checkbox',
      ],
		      
      [ name => 'clientToClient',    printableName => __('Allow client-to-client connections'), 
	input => 'checkbox' ,
	help => __('Allow clients to connect each other within the VPN'),
      ], 

      [ name => 'pullRoutes', 
	printableName => __('Allow eBox-to-eBox tunnels'), 
	input => 'checkbox', 
	help => __("If you want to create a tunnel between two eBox, you will need this option to allow connections from clients to this server"),
      ],
      [ name => 'ripPasswd', 
	printableName => __('eBox-to-eBox tunnel password'), 
	input => 'text', 
	help => __("Only this password is required for eBox-to-eBox tunnels. The same password must be set in the client or it wouldn't be able to push routes to this host"),
      ],
      $localInput,		      
     );
if ($nameEditable) {
   unshift @tableElements, [ name => 'name', printableName =>    __('Server name') ];
}
# set values if required..



@tableElements = map  {
  my %element = @{ $_ };

  my $property = $element{name};
  if (exists $properties{$property}) {
    $element{value} =  $properties{$property};
  }
   

  [ %element ]
} @tableElements;



push @tableElements, [ name => $submitName, value => $submitValue, input => 'submit' ];

</%init>
<& /formTable.mas, rows => \@tableElements &>
