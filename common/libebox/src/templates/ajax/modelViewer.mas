<%flags>
  inherit => undef
</%flags>
<%doc>
  This template establishes the common things that every model viewer
  will have
  Parameters:
     model - <EBox::Model::DataTable> the model to use its name
     hasChanged - Boolean indicating whether the model has changed or
                  not
     action     - String the action be performed. Only if action is
                  equal to 'view' the whole model viewer will be
                  loaded, any other action just the body will be
                  updated. This behaviour could be enhanced just
                  printing the updated version of needed. *(Optional)*
                  Default value: 'view'
</%doc>
<%args>
  $model
  $hasChanged
  $action => 'view'
</%args>
<%init>
  use EBox::Gettext;
</%init>

% if ( $action eq 'view' ) {
<& SELF:view,
   model => $model,
   hasChanged => $hasChanged
&>
% } else {
<& SELF:body,
   model => $model,
   onlyBody => 1,
&>
% }
% # Anyway you should call the change menu sub-component to check if
% # any change has been done
<& SELF:changeMenu,
   hasChanged => $hasChanged
&>


<%doc>
  Method: view

     Prints the model viewer. This method must be called by every
     component which inherits from this one. The body is not displayed
     if the precondition is accomplished, if not a fail message is
     shown instead.

  Parameters:

     model - <EBox::Model::DataTable> the model to view
     hasChanged - Boolean indicating whether the model has changed or not

</%doc>
<%method view>
<%args>
  $model
  $hasChanged
</%args>
  <& SELF:header,
     model => $model
   &>
% if ( $model->precondition() ) {
<div id="<% $model->modelName() %>">
  <& SELF:body,
     model      => $model
  &>
</div>
% }
% else
% {
<div class="note">
  <% $model->preconditionFailMsg() %>
</div>
% }
</%method>

<%doc>
  Method: header

     Include everything that a model view should have

  Parameters:
  
     model - <EBox::Model::DataTable> the model to view
</%doc>
<%method header>
<%args>
  $model
</%args>
<script type="text/javascript" src="/data/js/table-helper.js">
  //
</script>

<!-- Element to hide the elements while Asynchronous request are -->
<!-- working. Find more information at "table-helper.js"  -->
<div id="<% 'hiddenDiv_' . $model->name() | h %>" class="hidden"></div>

% if ($model->help()) {
<div class="help">
  <% $model->help() %>
</div>
% }

<div id='error_<% $model->modelName() | hu %>'></div>
</%method>

<%doc>
  Method: body

     Set the model viewer body. The message if any is also shown.

  Parameters:
  
     model - <EBox::Model::DataTable> the model to view
     onlyBody - boolean indicating if just the body is updated
                *(Optional)* Default value: false
     
</%doc>
<%method body>
<%args>
  $model
  $onlyBody => 0
</%args>
<%init>
  # Get the content from the first called template
  my $requestCaller = $onlyBody ? 1 : 2;
  my @childArgs = $m->caller_args($requestCaller);
</%init>
% if ( $model->message() ) {
<& /msg.mas,
   msg => $model->popMessage()
&>
% }
<& SELF:_body,
   model => $model,
   @childArgs
&>
</%method>

<%doc>
  Method: title

     Set the view title

  Parameters:

     title - String the title

</%doc>
<%method title>
<%args>
  $title
</%args>
<h3>
  <%
    $title | h
  %>
</h3>
</%method>

<%doc>
  Method: editForm

    Show the form to edit the fields from a row

  Parameters:

    modelName - String the model name
    formData - array containing <EBox::Types::Abstract> which form the
    table row

</%doc>
<%method editForm>
<%args>
  $modelName
  @formData
</%args>
<table class="formTable">
  <tbody>
    <& SELF:editRowFields,
       modelName => $modelName,
       formData => \@formData
    &>
    <tr>
      <td class="tright" 
          id="applyChanges">
      </td>
      <& SELF:buttons &>
    </tr>
  </tbody>
</table>
</%method>

<%doc>
  Method: editRowFields

    Show the form to edit the fields from a row

  Parameters:

    modelName - String the model name
    formData - array containing <EBox::Types::Abstract> which form the
    table row

</%doc>
<%method editRowFields>
<%args>
  $modelName
  @formData
</%args>
% foreach my $type (grep { defined($_->HTMLSetter())} @formData) 
% {
<tr>
  <td class='tright'>
    <% $type->printableName() %>:
  </td>
  <td>
    <&
      $type->HTMLSetter(),
      'data' => $type,
      'tableName' => "$modelName"
    &>
  </td>
</tr>
% }
</%method>

<%doc>
  Method: buttons

    Show the button to submit the form. It must be overriden. In order
    to obtain the main arguments used $m->request_args()->{argName}.

</%doc>
<%method buttons>
</%method>

<%doc>
  Method: changeMenu

     Change the CSS class from the changes menu in order to advise the
     user some changes have been made

</%doc>
<%method changeMenu>
<%args>
  $hasChanged
</%args>
<script>
<%perl>
my $className;
if ($hasChanged) {
  $className = 'changed';
} else {
  $className = 'notChanged';
}
</%perl>
$('changes_menu').className = '<% $className %>';
</script>
</%method>

<%doc>
  Group: Protected methods
</%doc>

<%doc>
  Method: _body

     Set the body for the viewer indeed. This method must be
     overridden by the subclasses in order to show the model content
     in some way. 

     The original parameters from the subclass template must appear as
     well with their own default values.
     (Protected method)

  Parameters:

     model - <EBox::Model::DataTable> the model to view
 
     - Additional parameters, see above.

</%doc>
<%method _body>
% # Default empty implementation
% $m->call_next();
</%method>
