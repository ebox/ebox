<%doc>
    Plots the given @series in a graph within a <div> element which will have
    the given $id. The data should be in the following format:
    [
        { 'data' => [ [x1,y1],[x2,y2],[x3,y3],[x4,y4],[x5,y5] ],
          'label' => 'foo'
        },
        { 'data => [ [x1,z1],[x2,z2],[x3,z3],[x4,z4],[x5,z5] ],
          'label' => 'bar'
        }
    ]
    The template will generate a graph with one line for each different set
    of data.
</%doc>
<%args>
    $id
    $type
    $timetype => 'time'
    @series
</%args>
<%init>
my $formatter;
my $timeformatter;
if($type eq 'int') {
    $formatter = undef;
} elsif($type eq 'byte') {
    $formatter = 'getBytes';
} elsif($type eq 'degree') {
    $formatter = 'getDegrees';
}
if($timetype eq 'time') {
    $timeformatter = 'getTime';
} else {
    $timeformatter = 'getDate';
}
my $tiny = 0.01;
</%init>
<div id='<% $id %>' class='graph'></div>
<div id='legend_<% $id %>'></div>
<script type="text/javascript" src="/data/js/format.js"></script>
<script type="text/javascript">
var track_formatter = function(obj) {
    var time = <% $timeformatter %>(obj.x);
    var other;
%   if($formatter) {
        other = <% $formatter %>(obj.y);
%   } else {
        other = obj.y;
%   }
    return '(' + time + ': ' + other + ')';
}

Flotr.draw(
    $('<% $id %>'), [
% my $first = $series[0]->{'data'};
% my $min_x = $first->[0]->[0];
% my $max_x = $first->[$#{$first}]->[0];
% my $min_y = undef;
% my $max_y = undef;
% foreach my $set (@series) {
%   my $data = $set->{'data'};
%   pop(@{$data}); # Remove the last nan value
    {
        data: [
%   for my $i (0..$#{$data}) {
%       my $pair = $data->[$i];
%       if ($pair->[1] ne 'nan') {
%           if (!defined($min_y) or ($min_y > $pair->[1])) {
%               $min_y = $pair->[1];
%           }
%           if (!defined($max_y) or ($max_y < $pair->[1])) {
%               $max_y = $pair->[1];
%           }
        [<% $pair->[0] %>,<% $pair->[1] %>],
%       } else {
%           $min_y = 0;
%           if($i != 0) {
                [<% ($data->[$i-1]->[0] + $tiny) %>,0],
%           }
%           if($i != (@{$data}-1)) {
                [<% ($data->[$i+1]->[0] - $tiny)  %>,0],
%           }
%       }
%   }
        ],
%   if(defined($set->{'label'})) {
        label: '<% $set->{'label'} %>',
%   }
    },
% }
    ],
    {
        xaxis: { noTicks: 3,
            tickFormatter: <% $timeformatter %>
        },
        yaxis: { noTicks: 5,
% if($formatter) {
  tickFormatter: <% $formatter %>
% }
        },
% my $columns = $#series + 1;
% if ($columns > 5) {
%   $columns = 5;
% }
% my $diff_x = $max_x - $min_x;
% my $diff_y = $max_y - $min_y;
% my $max_diff;
% if ($diff_x > $diff_y) {
%   $max_diff = $diff_x;
% } else {
%   $max_diff = $diff_y;
% }
% my $sensibility = int($max_diff/10);
% my $point = int($max_diff/10);
        legend: { container: 'legend_<% $id %>', noColumns: <% $columns %> },
        mouse: {
            track: true,
            sensibility: <% $sensibility %>,
            lineColor: '#ff3f19',
            trackFormatter: track_formatter
        }
    }
);
</script>
